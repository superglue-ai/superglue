timestamp,siteId,siteName,question,searchQuery,searchResultsSizeKB,searchResultsPreview,success,retrievalScore,endpointScore,completenessScore,reasoning,error
2025-10-09T12:35:26.031Z,stripe-api,"Stripe API","How do I create a new customer in Stripe?","Stripe API create customer endpoint parameters",10,"/preview](/api/credit%5Fnotes/preview)[POST/v1/credit\_notes/:id/void](/api/credit%5Fnotes/void)  # [Customer Balance Transaction](/api/customer%5Fbalance%5Ftransactions)   Each customer has a [Balance](/api/customers/object#customer%5Fobject-balance) value; which denotes a debit or credit that’s automatically applied to their next invoice upon finalization. You may modify the value directly by using the [update customer API](/api/customers/update); or by creating a Customer Balance Transaction; which increments or decrements the customer’s `balance` by the specified `amount`.  Related guide: [Customer balance](/billing/customer/balance)  Endpoints  [POST/v1/customers/:id/balance\_transactions](/api/customer%5Fbalance%5Ftransactions/create)[POST/v1/customers/:id/balance\_transactions/:id](/api/customer%5Fbalance%5Ftransactions/update)[GET/v1/customers/:id/balance\_transactions/:id](/api/customer%5Fbalance%5Ftransactions/retrieve)[GET/v1/customers/:id/balance\_transactions](/api/customer%5Fbalance%5Ftransactions/list)  # [Customer Portal Session](/api/customer%5Fportal/sessions)   The Billing customer portal is a Stripe-hosted UI for subscription and billing management.  A portal configuration describes the functionality and features that you want to provide to your customers through the portal.  A portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL; the customer can manage their subscriptions and billing details. For security reasons; sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.  Related guide: [Customer management](/customer-management)  Endpoints  [POST/v1/billing\_portal/sessions](/api/customer%5Fportal/sessions/create)  # [Customer Portal Configuration](/api/customer%5Fportal/configurations)   A portal configuration describes the functionality and behavior of ",true,40,20,10,"The retrieved documentation contains information about balance transactions, updating customers, customer portal sessions, and subscriptions. However, it does not include the critical information about how to create a new customer, specifically the required POST /v1/customers endpoint. The closest match is the update customer operation (POST /v1/customers/{customer}), which only applies to existing customers and explicitly says it accepts similar arguments to creation but does not specify how to create one. There are no examples or explicit parameter lists relevant to creating a new customer, and the correct endpoint is not directly presented. Thus, the core developer need—to know how to create a new customer and what parameters can/should be sent—is not satisfied by the retrieved documentation.",""
2025-10-09T12:35:32.157Z,stripe-api,"Stripe API","What are the required fields for creating a payment intent?","payment intent creation required fields API endpoint parameters",10,"Payment Intents](/api/payment%5Fintents)   A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](/payments/payment-intents)  Endpoints  [POST/v1/payment\_intents](/api/payment%5Fintents/create)[POST/v1/payment\_intents/:id](/api/payment%5Fintents/update)[GET/v1/payment\_intents/:id](/api/payment%5Fintents/retrieve)[GET/v1/payment\_intents](/api/payment%5Fintents/list)[POST/v1/payment\_intents/:id/cancel](/api/payment%5Fintents/cancel)[POST/v1/payment\_intents/:id/capture](/api/payment%5Fintents/capture)[POST/v1/payment\_intents/:id/confirm](/api/payment%5Fintents/confirm)[POST/v1/payment\_intents/:id/increment\_authorization](/api/payment%5Fintents/increment%5Fauthorization)[POST/v1/payment\_intents/:id/apply\_customer\_balance](/api/payment%5Fintents/apply%5Fcustomer%5Fbalance)[GET/v1/payment\_intents/search](/api/payment%5Fintents/search)[POST/v1/payment\_intents/:id/verify\_microdeposits](/api/payment%5Fintents/verify%5Fmicrodeposits)  # [Setup Intents](/api/setup%5Fintents)   A SetupIntent guides you through the process of setting up and saving a customer’s payment credentials for future payments. For example; you can use a SetupIntent to set up and save your customer’s card without immediately collecting a payment. Later; you can use [PaymentIntents](#payment%5Fintents) to drive the payment flow.  Create a SetupIntent when you’re ready to collect your customer’s payment credentials. Don’t maintain long-lived; unconfirmed SetupIntents because they mi",true,80,95,65,"The documentation correctly surfaces the relevant Payment Intent creation endpoint (POST /v1/payment_intents), and indicates that creating a PaymentIntent involves passing fields to this endpoint. The requestBody schema is partially shown and does mention 'amount' (including a partial description), which is a required field, but the complete list of required fields is not included in the snippet. There is no explicit list of all required fields (such as 'amount' and 'currency'), nor a clear minimum parameter set, nor a sample request. Thus, while the correct endpoint is easy to identify, details on which fields are required to successfully create a PaymentIntent are incomplete.",""
2025-10-09T12:35:35.652Z,stripe-api,"Stripe API","What parameters are required to refund a payment?","refund payment API endpoint required parameters",10,"Payment Intents](/api/payment%5Fintents)   A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](/payments/payment-intents)  Endpoints  [POST/v1/payment\_intents](/api/payment%5Fintents/create)[POST/v1/payment\_intents/:id](/api/payment%5Fintents/update)[GET/v1/payment\_intents/:id](/api/payment%5Fintents/retrieve)[GET/v1/payment\_intents](/api/payment%5Fintents/list)[POST/v1/payment\_intents/:id/cancel](/api/payment%5Fintents/cancel)[POST/v1/payment\_intents/:id/capture](/api/payment%5Fintents/capture)[POST/v1/payment\_intents/:id/confirm](/api/payment%5Fintents/confirm)[POST/v1/payment\_intents/:id/increment\_authorization](/api/payment%5Fintents/increment%5Fauthorization)[POST/v1/payment\_intents/:id/apply\_customer\_balance](/api/payment%5Fintents/apply%5Fcustomer%5Fbalance)[GET/v1/payment\_intents/search](/api/payment%5Fintents/search)[POST/v1/payment\_intents/:id/verify\_microdeposits](/api/payment%5Fintents/verify%5Fmicrodeposits)  # [Setup Intents](/api/setup%5Fintents)   A SetupIntent guides you through the process of setting up and saving a customer’s payment credentials for future payments. For example; you can use a SetupIntent to set up and save your customer’s card without immediately collecting a payment. Later; you can use [PaymentIntents](#payment%5Fintents) to drive the payment flow.  Create a SetupIntent when you’re ready to collect your customer’s payment credentials. Don’t maintain long-lived; unconfirmed SetupIntents because they mi",true,15,0,0,"The retrieved documentation does not mention any refund-related API endpoint, nor does it describe the required parameters for refunding a payment. Most information is about Payment Intents, setup, payment method configurations, and domain validation, which are unrelated to processing refunds. Therefore, a developer looking to refund a payment will not find relevant endpoint information or the required parameters for that specific use case in the retrieved content.",""
2025-10-09T12:35:41.685Z,slack-api,"Slack API","How can I authenticate a bot using OAuth2?","OAuth2 bot authentication API endpoint parameters documentation",10,"  === SECURITY ===  {   "securityDefinitions": {     "slackAuth": {       "authorizationUrl": "https://slack.com/oauth/authorize";       "flow": "accessCode";       "scopes": {         "admin": "admin";         "admin.apps:read": "admin.apps:read";         "admin.apps:write": "admin.apps:write";         "admin.conversations:read": "admin.conversations:read";         "admin.conversations:write": "admin.conversations:write";         "admin.invites:read": "admin.invites:read";         "admin.invites:write": "admin.invites:write";         "admin.teams:read": "admin.teams:read";         "admin.teams:write": "admin.teams:write";         "admin.usergroups:read": "admin.usergroups:read";         "admin.usergroups:write": "admin.usergroups:write";         "admin.users:read": "admin.users:read";         "admin.users:write": "admin.users:write";         "authorizations:read": "authorizations:read";         "bot": "Bot user scope";         "calls:read": "calls:read";         "calls:write": "calls:write";         "channels:history": "channels:history";         "channels:manage": "channels:manage";         "channels:read": "channels:read";         "channels:write": "channels:write";         "chat:write": "chat:write";         "chat:write:bot": "Author messages as a bot";         "chat:write:user": "Author messages as a user";         "conversations:history": "conversations:history";         "conversations:read": "conversations:read";         "conversations:write": "conversations:write";         "dnd:read": "dnd:read";         "dnd:write": "dnd:write";         "emoji:read": "emoji:read";         "files:read": "files:read";         "files:write:user": "files:write:user";         "groups:history": "groups:history";         "groups:read": "groups:read";         "groups:write": "groups:write";         "identity.basic": "identity.basic";         "im:history": "im:history";         "im:read": "im:read";         "im:write": "im:write";         "links:write": "links:write";         "mpim:",true,65,60,55,"The retrieved documentation contains relevant security definition information, notably referencing OAuth2 and the Slack OAuth2 authorization URL, and details available scopes including the 'bot' scope. However, it lacks a step-by-step explanation of authenticating a bot using OAuth2, omits a clear OAuth2 token exchange or authorization endpoint example, and gives no sample request or parameter-by-parameter breakdown for the full OAuth2 flow. Some endpoints are mentioned but are unrelated to the initial token acquisition process needed for bot OAuth2 authentication. There is no explicit, actionable example showing how to obtain or use the bot OAuth2 token. Key steps and required parameters for making the OAuth2 API call are missing, limiting usefulness for a developer seeking to implement bot authentication.",""
2025-10-09T12:35:49.883Z,slack-api,"Slack API","How do I send a message to a channel?","send message to channel API endpoint parameters payload",10," unexpected factors affect processing. Callers should always check the value of the `ok` parameter in the response.  Error  Description  `access_denied`  Access to a resource specified in the request is denied.  `accesslimited`  Access to this method is limited on the current network  `account_inactive`  Authentication token is for a deleted user or workspace when using a `bot` token.  `cannot_add_more_channels_to_group`  The maximum number of channels have already been linked to the group.  `cannot_add_more_groups_to_channel`  The maximum number of groups have already been linked to the channel.  `channel_is_not_private`  The channel is a public channel; a multi-party direct message; a direct message; or is externally-shared.  `channel_not_found`  `channel_id` can’t be found.  `default_channel_restricted`  The channel is a default channel on the workspace.  `deprecated_endpoint`  The endpoint has been deprecated.  `ekm_access_denied`  Administrators have suspended the ability to post a message.  `enterprise_is_restricted`  The method cannot be called from an Enterprise.  `fatal_error`  The server could not complete your operation(s) without encountering a catastrophic error. It's possible some aspect of the operation succeeded before the error was raised.  `feature_not_enabled`  Feature not enabled  `group_already_linked_to_channel`  The IDP group is already linked to the channel  `group_must_not_be_empty`  The IDP group is currently empty.  `group_not_found`  `group_id` can’t be found.  `internal_error`  The server could not complete your operation(s) without encountering an error; likely due to a transient issue on our end. It's possible some aspect of the operation succeeded before the error was raised.  `invalid_arg_name`  The method was passed an argument whose name falls outside the bounds of accepted or expected values. This includes very long names and names with non-alphanumeric characters other than `_`. If you get this error; it is typically an indicatio",true,85,95,80,"The retrieved documentation identifies the correct endpoint for sending a message to a channel as POST /chat.postMessage, along with detailed parameter lists (e.g., token, channel, text). It also shows related endpoints like chat.postEphemeral and chat.meMessage, which may add clutter but does not detract from the presence of the correct answer. The documentation includes a breakdown of parameters, required scopes, and types, but lacks a complete worked example or a fully detailed payload schema, so a developer may need to refer to external docs for usage examples. Overall, it provides nearly all the information needed to construct an API request but could be improved with explicit usage samples.",""
2025-10-09T12:35:53.931Z,slack-api,"Slack API","How do I add a reaction to a message?","API add reaction to message endpoint parameters documentation",10,"nifies the expiration time of the request; meaning that it shouldn't be trusted if it's not received by the expiration time. * `iat` signifies the time when the token was issued. * `auth_time` signifies the time when the end-user authenticated. * `nonce` is a state variable that you pass to the `/openid/connect/authorize` endpoint at the beginning of Sign in with Slack; and that Slack then returns to you at the end of the flow here. Verify that it matches the `nonce` you passed to `/authorize`.  ####   Successful token request during the Sign in with Slack flow  ``` {   "ok": true;   "access_token": "xoxp-1234";   "token_type": "Bearer";   "id_token": "eyJhbGcMjY5OTA2MzcWNrLmNvbVwvdGVhbV9p..." }  ```  ## Errors[​](#errors "Direct link to Errors")  This table lists the expected errors that this method could return. However; other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` parameter in the response.  Error  Description  `access_denied`  Access to a resource specified in the request is denied.  `accesslimited`  Access to this method is limited on the current network  `account_inactive`  Authentication token is for a deleted user or workspace when using a `bot` token.  `bad_client_secret`  The value passed for `client_secret` was invalid.  `bad_redirect_uri`  The value passed for `redirect_uri` did not match the `redirect_uri` in the original request.  `cannot_install_an_org_installed_app`  An org-installed app cannot be installed on a workspace.  `deprecated_endpoint`  The endpoint has been deprecated.  `ekm_access_denied`  Administrators have suspended the ability to post a message.  `enterprise_is_restricted`  The method cannot be called from an Enterprise.  `fatal_error`  The server could not complete your operation(s) without encountering a catastrophic error. It's possible some aspect of the operation succeeded before the error was raised.  `internal_",true,95,100,90,"The documentation directly includes the endpoint for adding a reaction: POST /reactions.add. It lists all the required parameters (channel, name, timestamp, token) and specifies their types and descriptions. There is also a success response example and a list of possible errors. However, the documentation snippet does not include a full example request or response payload, which would further help developers, but all information necessary to make the API call is clearly presented.",""
2025-10-09T12:35:59.863Z,gmail-api,"Gmail API","How do I list all messages in a user's mailbox?","list messages mailbox API endpoint user documentation",9,"------ | | [batchDelete](/workspace/gmail/api/reference/rest/v1/users.messages/batchDelete) | POST /gmail/v1/users/{userId}/messages/batchDelete  Deletes many messages by message ID.                                                                                                                                                     | | [batchModify](/workspace/gmail/api/reference/rest/v1/users.messages/batchModify) | POST /gmail/v1/users/{userId}/messages/batchModify  Modifies the labels on the specified messages.                                                                                                                                           | | [delete](/workspace/gmail/api/reference/rest/v1/users.messages/delete)           | DELETE /gmail/v1/users/{userId}/messages/{id}  Immediately and permanently deletes the specified message.                                                                                                                                    | | [get](/workspace/gmail/api/reference/rest/v1/users.messages/get)                 | GET /gmail/v1/users/{userId}/messages/{id}  Gets the specified message.                                                                                                                                                                      | | [import](/workspace/gmail/api/reference/rest/v1/users.messages/import)           | POST /gmail/v1/users/{userId}/messages/import POST /upload/gmail/v1/users/{userId}/messages/import  Imports a message into only this user's mailbox; with standard email delivery scanning and classification similar to receiving via SMTP. | | [insert](/workspace/gmail/api/reference/rest/v1/users.messages/insert)           | POST /gmail/v1/users/{userId}/messages POST /upload/gmail/v1/users/{userId}/messages  Directly inserts a message into only this user's mailbox similar to IMAP APPEND; bypassing most scanning and classification.                           | | [list](/workspace/gmail/api/reference/rest/v1",true,95,100,85,"The retrieved documentation directly includes the correct endpoint (GET /gmail/v1/users/{userId}/messages) for listing all messages in a user's mailbox, and clearly describes its purpose. The allowed parameters (userId, maxResults, pageToken, q, labelIds, includeSpamTrash) are enumerated and described, making it easy for a developer to construct an API call. However, while there is mention of further usage examples being available at an external link, the retrieval does not include an inline, concrete example request or response, slightly reducing completeness. Still, the overall detail is sufficient for an experienced developer to proceed.",""
2025-10-09T12:36:05.541Z,gmail-api,"Gmail API","How do I list all labels in a mailbox?","list labels mailbox API endpoint documentation",7,"ts in the user's mailbox.                                                                                                      | | [send](/workspace/gmail/api/reference/rest/v1/users.drafts/send)     | POST /gmail/v1/users/{userId}/drafts/send POST /upload/gmail/v1/users/{userId}/drafts/send  Sends the specified; existing draft to the recipients in the To; Cc; and Bcc headers. | | [update](/workspace/gmail/api/reference/rest/v1/users.drafts/update) | PUT /gmail/v1/users/{userId}/drafts/{id} PUT /upload/gmail/v1/users/{userId}/drafts/{id}  Replaces a draft's content.                                                             |  ## REST Resource: [v1.users.history](/workspace/gmail/api/reference/rest/v1/users.history)  | Methods                                                           |                                                                                              | | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | | [list](/workspace/gmail/api/reference/rest/v1/users.history/list) | GET /gmail/v1/users/{userId}/history  Lists the history of all changes to the given mailbox. |  ## REST Resource: [v1.users.labels](/workspace/gmail/api/reference/rest/v1/users.labels)  | Methods                                                              |                                                                                                                                                                          | | -------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | [create](/workspace/gmail/api/reference/rest/v1/users.labels/create) | POST /gmail/v1/users/{userId}/labels  Creates a new label.                                                                   ",true,90,100,75,"The retrieved documentation includes the precise endpoint needed to list all labels in a user's mailbox: GET /gmail/v1/users/{userId}/labels. It clearly describes its use and provides details about the 'userId' parameter, including the special value 'me' for the authenticated user. However, the documentation does not provide a usage example or the format of the response, which diminishes completeness. It does, however, list required scopes and mentions the response type, which is helpful. Extra information about related endpoints is present but does not detract from the usefulness of the central answer.",""
2025-10-09T12:36:15.584Z,gmail-api,"Gmail API","What's the rate limit per user for Gmail API requests?","Gmail API rate limits per user endpoint documentation",9,"il/api/reference/rest/v1/users/getProfile) | GET /gmail/v1/users/{userId}/profile  Gets the current user's Gmail profile.                               | | [stop](/workspace/gmail/api/reference/rest/v1/users/stop)             | POST /gmail/v1/users/{userId}/stop  Stop receiving push notifications for the given user mailbox.          | | [watch](/workspace/gmail/api/reference/rest/v1/users/watch)           | POST /gmail/v1/users/{userId}/watch  Set up or update a push notification watch on the given user mailbox. |  ## REST Resource: [v1.users.drafts](/workspace/gmail/api/reference/rest/v1/users.drafts)  | Methods                                                              |                                                                                                                                                                                   | | -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | [create](/workspace/gmail/api/reference/rest/v1/users.drafts/create) | POST /gmail/v1/users/{userId}/drafts POST /upload/gmail/v1/users/{userId}/drafts  Creates a new draft with the DRAFT label.                                                       | | [delete](/workspace/gmail/api/reference/rest/v1/users.drafts/delete) | DELETE /gmail/v1/users/{userId}/drafts/{id}  Immediately and permanently deletes the specified draft.                                                                             | | [get](/workspace/gmail/api/reference/rest/v1/users.drafts/get)       | GET /gmail/v1/users/{userId}/drafts/{id}  Gets the specified draft.                                                                                                               | | [list](/workspace/gmail/api/reference/rest/v1/users.drafts/list)     | GET /gmail/v1/users/{userId}/drafts  Lists the draf",true,30,20,10,"The retrieved documentation includes details about various Gmail API endpoints and some specific endpoint paths and their parameters. However, it does not mention rate limits (per user or global), nor does it discuss any rate-limiting policies, headers, quota information, or clarify where to find these limits. It also does not direct the reader to a quota or usage limits section, which is typically where rate limits are documented. While developers get endpoint parameter details and request/response formats, there is no connection or answer to the rate limit aspect of the original question.",""
2025-10-09T12:36:23.805Z,openai-api,"OpenAI API","What parameter do I use to get structured output?","structured output parameter API endpoint documentation data format response type",10,"he unique ID of the server event.  [](#realtime-server-events/response/output%5Ftext/delta-item%5Fid)  item\_id  string  The ID of the item.  [](#realtime-server-events/response/output%5Ftext/delta-output%5Findex)  output\_index  integer  The index of the output item in the response.  [](#realtime-server-events/response/output%5Ftext/delta-response%5Fid)  response\_id  string  The ID of the response.  [](#realtime-server-events/response/output%5Ftext/delta-type)  type  string  The event type; must be `response.output_text.delta`.  OBJECT response.output\_text.delta  ```JSON 1 2 3 4 5 6 7 8 9 {     "event_id": "event_4142";     "type": "response.output_text.delta";     "response_id": "resp_001";     "item_id": "msg_007";     "output_index": 0;     "content_index": 0;     "delta": "Sure; I can h" } ```  ##   response.output\_text.done  Returned when the text value of an "output\_text" content part is done streaming. Also emitted when a Response is interrupted; incomplete; or cancelled.  [](#realtime-server-events/response/output%5Ftext/done-content%5Findex)  content\_index  integer  The index of the content part in the item's content array.  [](#realtime-server-events/response/output%5Ftext/done-event%5Fid)  event\_id  string  The unique ID of the server event.  [](#realtime-server-events/response/output%5Ftext/done-item%5Fid)  item\_id  string  The ID of the item.  [](#realtime-server-events/response/output%5Ftext/done-output%5Findex)  output\_index  integer  The index of the output item in the response.  [](#realtime-server-events/response/output%5Ftext/done-response%5Fid)  response\_id  string  The ID of the response.  [](#realtime-server-events/response/output%5Ftext/done-text)  text  string  The final text content.  [](#realtime-server-events/response/output%5Ftext/done-type)  type  string  The event type; must be `response.output_text.done`.  OBJECT response.output\_text.done  ```JSON 1 2 3 4 5 6 7 8 9 {     "event_id": "event_4344";     "type": "response.output",true,50,60,40,"The retrieved documentation covers several endpoints and provides detailed schema for response structures, but it does not explicitly answer the user's core question of what parameter (e.g., 'response_format', 'structured_output', etc.) to use in a request to obtain structured (machine-readable) output. The documentation references response types and event types, but these are related to the format of responses sent by the API, not options for controlling output structure at request time. The /chat/completions and /responses endpoints are present, but there is no mention of a parameter that enables structured output. The documentation would need to explicitly document such a parameter in a request body example or parameter list to score higher.",""
2025-10-09T12:36:27.294Z,openai-api,"OpenAI API","How can I retrieve files from my vector database?","vector database API retrieve files endpoint data retrieval parameters file storage",10,"id: "vs_abc123" }   );   console.log(vectorStoreFile); }  main(); ```  Response  ```json 1 2 3 4 5 6 7 8 {   "id": "file-abc123";   "object": "vector_store.file";   "created_at": 1699061776;   "vector_store_id": "vs_abcd";   "status": "completed";   "last_error": null } ```  ##   Retrieve vector store file content  get https://api.openai.com/v1/vector\_stores/{vector\_store\_id}/files/{file\_id}/content  Retrieve the parsed contents of a vector store file.  #### Path parameters  [](#vector-stores-files-getcontent-file%5Fid)  file\_id  string  Required  The ID of the file within the vector store.  [](#vector-stores-files-getcontent-vector%5Fstore%5Fid)  vector\_store\_id  string  Required  The ID of the vector store.  #### Returns  The parsed contents of the specified vector store file.  Example request  curl  ```bash 1 2 3 curl \ https://api.openai.com/v1/vector_stores/vs_abc123/files/file-abc123/content \ -H "Authorization: Bearer $OPENAI_API_KEY" ```  Response  ```json 1 2 3 4 5 6 7 8 9 {   "file_id": "file-abc123";   "filename": "example.txt";   "attributes": {"key": "value"};   "content": [     {"type": "text"; "text": "..."};     ...   ] } ```  ##   Update vector store file attributes  post https://api.openai.com/v1/vector\_stores/{vector\_store\_id}/files/{file\_id}  Update attributes on a vector store file.  #### Path parameters  [](#vector-stores-files-updateattributes-file%5Fid)  file\_id  string  Required  The ID of the file to update attributes.  [](#vector-stores-files-updateattributes-vector%5Fstore%5Fid)  vector\_store\_id  string  Required  The ID of the vector store the file belongs to.  #### Request body  [](#vector-stores-files-updateattributes-attributes)  attributes  map  Required  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format; and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Value",true,95,100,95,"The documentation directly addresses the user's question by showing how to retrieve files from a vector database using the GET /v1/vector_stores/{vector_store_id}/files/{file_id}/content endpoint. It provides exact path parameters (file_id, vector_store_id), details about what is returned, and includes a concrete curl example. Required authentication and parameter usage are clear. There is additional info about other endpoints, but this doesn't detract from the presence and clarity of the correct retrieval information.",""
2025-10-09T12:36:32.174Z,openai-api,"OpenAI API","How do I include both text and images in the same input?","API documentation input text image parameters endpoint multipart request data structure",10,"image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-partial%5Fimage%5Findex)  partial\_image\_index  integer  0-based index for the partial image (streaming).  [](#images-streaming/image%5Fgeneration/partial%5Fimage-quality)  quality  string  The quality setting for the requested image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-size)  size  string  The size of the requested image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-type)  type  string  The type of the event. Always `image_generation.partial_image`.  OBJECT image\_generation.partial\_image  ```JSON 1 2 3 4 5 6 7 8 9 10 {   "type": "image_generation.partial_image";   "b64_json": "...";   "created_at": 1620000000;   "size": "1024x1024";   "quality": "high";   "background": "transparent";   "output_format": "png";   "partial_image_index": 0 } ```  ##   image\_generation.completed  Emitted when image generation has completed and the final image is available.  [](#images-streaming/image%5Fgeneration/completed-b64%5Fjson)  b64\_json  string  Base64-encoded image data; suitable for rendering as an image.  [](#images-streaming/image%5Fgeneration/completed-background)  background  string  The background setting for the generated image.  [](#images-streaming/image%5Fgeneration/completed-created%5Fat)  created\_at  integer  The Unix timestamp when the event was created.  [](#images-streaming/image%5Fgeneration/completed-output%5Fformat)  output\_format  string  The output format for the generated image.  [](#images-streaming/image%5Fgeneration/completed-quality)  quality  string  The quality setting for the generated image.  [](#images-streaming/image%5Fgeneration/completed-size)  size  string  The size of the generated image.  [](#images-streaming/image%5Fgeneration/completed-type)  type  string  The type of the event. Always `image_generation.completed`.  [](#images-streaming/image%5Fgeneration/completed-usage)  usage  object  For `gpt-image-1` only; the token usage information",true,50,40,35,"The retrieved documentation discusses image processing (generation/editing) and chat/completion endpoints, but it does not directly or clearly explain how to include both text and images in the SAME input. The /chat/completions endpoint is present but there are no specific examples or parameter descriptions that combine text and image data in a single API call, nor an explanation of how to structure such a request (e.g., whether to use multipart forms, referencing images, or base64-encoding alongside text). While relevant endpoints and some parameter descriptions are present, the documentation lacks explicit instructions or unified examples for submitting both text and images together, making it insufficient for confidently answering the user's integration question.",""
2025-10-09T12:36:37.192Z,zignsec-api,"Zignsec API","How can I Create a proof-of-address session?","create proof-of-address session API endpoint documentation parameters",10,"whenever an event occurs on a session with the given identifier.";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Session events that are sent as callbacks through webhooks.";"properties":{"event":{"description":"The type of event that occurred.";"type":"string"};"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"id":{"description":"Session Event ID";"type":"string"};"integration_id":{"description":"An identifier to the service provider that triggered this session event.";"type":"string"};"relay_state":{"description":"Optional Custom Parameter to be included in webhook calls ";"type":"string"};"status":{"description":"The Status of the session";"type":"string"};"workflow_session_id":{"description":"The id of the workflow session that this event relates to.";"type":"string"}};"required":["id";"workflow_session_id";"integration_id";"event";"result"];"title":"ValidateCompanyCallback";"type":"object"}}};"description":"Session Event Data";"required":true};"responses":{"200":{"content":{"application/json":{}};"description":"Acknowledge Session Event"};"204":{"content":{"application/json":{}};"description":"Acknowledge Session Event"}};"summary":"Session Event Callback Webhook";"tags":[]}}}};"deprecated":false;"operationId":"postValidateCompanyGdc";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Parameters that initiate a new synchronous data session request.";"properties":{"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"metadata":{"additionalProperties":false;"example":{"address":{"country_code":"US";"house_number":"290";"locality":"ASHEVILLE";"postal_code":"28804";"province":"NC";"thoroughfare":"Macon Avenue"};"country_code":"US";"email":{"domain":"random.com"};"identity":{"business_id":"47-423432";"organization_name":"Random Inc."};"options":"BusinessVerify;MessageVerbose"};"properties":{"address":{"additionalProperties":false;"properties":{"t",true,85,95,75,"The retrieved documentation includes the correct endpoint for creating a proof-of-address session: POST /core/api/sessions/proof_of_address/document. The documentation provides parameters needed in the request body, such as gdpr_user_id, locale, and metadata with fields (first_name, last_name, full_address, full_name). However, it lacks a fully expanded example request and detailed required/optional parameter breakdown. Some content is incomplete or cut off, and there's additional information about unrelated endpoints, but the essential information to identify the correct endpoint and key parameters is present.",""
2025-10-09T12:36:42.618Z,zignsec-api,"Zignsec API","How can I start an identity verification session?","start identity verification session API endpoint parameters documentation",10,"tity_check/pep_global_member_check/due_diligence_status":{"post":{"callbacks":{"SessionEvent":{"webhook_url":{"post":{"callbacks":{};"deprecated":false;"description":"Invoked whenever an event occurs on a session with the given identifier.";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Session events that are sent as callbacks through webhooks.";"properties":{"event":{"description":"The type of event that occurred.";"type":"string"};"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"id":{"description":"Session Event ID";"type":"string"};"integration_id":{"description":"An identifier to the service provider that triggered this session event.";"type":"string"};"relay_state":{"description":"Optional Custom Parameter to be included in webhook calls ";"type":"string"};"status":{"description":"The Status of the session";"type":"string"};"workflow_session_id":{"description":"The id of the workflow session that this event relates to.";"type":"string"}};"required":["id";"workflow_session_id";"integration_id";"event";"result"];"title":"UpdateDueDiligenceStatusCallback";"type":"object"}}};"description":"Session Event Data";"required":true};"responses":{"200":{"content":{"application/json":{}};"description":"Acknowledge Session Event"};"204":{"content":{"application/json":{}};"description":"Acknowledge Session Event"}};"summary":"Session Event Callback Webhook";"tags":[]}}}};"deprecated":false;"operationId":"postIdentityCheckPepGlobalMemberCheckDueDiligenceStatus";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"";"properties":{"session_id":{"description":"Session ID";"example":"44d8e35b-d3d7-4d45-9d80-06e3ccf10736";"type":"string"};"status":{"description":"Status";"example":1;"type":"integer"}};"title":"Session ID Request";"type":"object"}}};"description":"Create Session Parameters";"required":false};"responses":{"200":{"content":{"application/json":{}};"description":"Update ",true,70,60,50,"The retrieved documentation includes information about various session-related endpoints, including some for creating sessions (e.g., POST /core/api/sessions/wyzerwork/merchant-onboarding, POST /core/api/sessions/proof_of_address/document). However, it is not explicit about a generic or primary identity verification session creation endpoint. While there is some information about required parameters found in requestBody schemas (like 'gdpr_user_id', 'locale', and 'metadata'), it lacks a clear, unified description or example specifically for starting an identity verification session. Endpoint names are similar but not clearly definitive for general identity verification. Additionally, parameter explanations are fragmented and do not provide step-by-step instructions or concrete sample payloads for the most relevant action (starting a generic identity verification session).",""
2025-10-09T12:36:48.483Z,sitecore-components-api,"Sitecore Cloud Components API","How do I interact with a file source like azure blob storage?","azure blob storage API interact upload download endpoints parameters",1,"  === OPENAPI OPERATIONS ===  [POST /api/files/generateSAS] {"description":"Route used to generate SAS Token to be used in frontend to upload files to Azure blob storage";"tags":["Files"];"parameters":[{"name":"body";"in":"body";"schema":{"$schema":"http://json-schema.org/draft-07/schema#";"type":"object";"additionalProperties":false;"properties":{"storedPolicyName":{"type":"string"};"category":{"enum":["thumbnails";"uploads";"images";"webcomponents"]}};"required":["category"]}}];"responses":{"200":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":true}};"400":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Bad Request"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}};"404":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Not Found"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}};"500":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Internal server error"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}}}}",true,70,90,60,"The retrieved documentation identifies a relevant endpoint—POST /api/files/generateSAS—which is directly related to obtaining a SAS token needed to interact with Azure Blob Storage (specifically for uploading files). The endpoint, its purpose, and parameter schema (with required and optional fields) are clearly listed. However, the documentation covers only the generation of a SAS Token; it does not document how to actually upload or download files using Azure Blob Storage with that token, nor does it provide examples or detailed next steps. Therefore, while the correct starting point is given, critical steps and context for completing 'interact/upload/download' tasks with Azure Blob Storage are missing.",""
2025-10-09T12:36:57.287Z,sitecore-components-api,"Sitecore Cloud Components API","I want to upload a new stylesheet","upload stylesheet API endpoint parameters file format authentication",8,"  === OPENAPI OPERATIONS ===  [PUT /api/libraries/{libraryId}/stylesheets/] {"description":"Create or update a stylesheet; requires correct revision/status to be provided.";"tags":["Stylesheets"];"parameters":[{"name":"body";"in":"body";"schema":{"required":["revision";"source";"status"];"properties":{"libraryId":{"description":"The identifier of the Library that Stylesheet belongs to";"minLength":3;"maxLength":64;"type":"string"};"id":{"description":"The identifier of the Stylesheet";"minLength":3;"maxLength":64;"type":"string"};"source":{"description":"The source of the Stylesheet"};"formatVersion":{"description":"The format version of the Stylesheet.";"minimum":0;"type":"integer"};"status":{"description":"The status of the Stylesheet";"enum":["draft";"published";"saved";"staged"];"type":"string"};"revision":{"description":"The numeric revision of the Stylesheet.";"minimum":0;"type":"integer"};"createdAt":{"description":"The timestamp the Stylesheet was created at";"type":"string";"format":"date-time"};"modifiedAt":{"description":"The timestamp when the Stylesheet was last modified at";"type":"string";"format":"date-time"}};"description":"Defines the schema for Stylesheet.";"type":"object";"additionalProperties":false;"$schema":"http://json-schema.org/draft-07/schema#";"definitions":{}}};{"type":"string";"minLength":3;"required":true;"in":"path";"name":"libraryId"}];"responses":{"200":{"description":"Defines the schema for Stylesheet.";"schema":{"required":["createdAt";"formatVersion";"id";"libraryId";"modifiedAt";"revision";"source";"status"];"properties":{"libraryId":{"description":"The identifier of the Library that Stylesheet belongs to";"minLength":3;"maxLength":64;"type":"string"};"id":{"description":"The identifier of the Stylesheet";"minLength":3;"maxLength":64;"type":"string"};"source":{"description":"The source of the Stylesheet"};"formatVersion":{"description":"The format version of the Stylesheet.";"minimum":0;"type":"integer"};"status":{"description":",true,85,90,70,"The retrieved documentation lists several endpoints, but the [PUT /api/libraries/{libraryId}/stylesheets/] endpoint is clearly described as creating or updating a stylesheet, which matches the user's task. The endpoint is explicitly mentioned with its path and expected parameters (including revision, source, status), so developers know what is needed. However, while required fields are listed, there are no concrete request/response examples, and it is not fully clear if 'source' must be the stylesheet file contents or a reference. Authentication details are not specified. Thus, the documentation is sufficiently detailed for an experienced developer to proceed but lacks completeness for a straightforward implementation (e.g., file format details, authentication steps, usage example).",""
2025-10-09T12:37:04.892Z,openstorage-api,"OpenStorage API","Create a new role","API create role endpoint parameters request body example",7,"ckground filesystem trim operation   apiSdkFilesystemTrimStartResponse   apiSdkFilesystemTrimStatusResponse   SdkFilesystemTrimStopRequest defines a request to stop a background filesystem trim operation   Empty response   Defines the status of an existing job   apiSdkGetRebalanceJobStatusResponse   apiSdkGetRebalanceScheduleResponse   Defines credentials for Google   Defines the response for Google credentials   Defines a response containing the capabilities of the cluster   Defines a response containing version information   Defines a response for an SDK request that spins up a new job to perform the request   Defines credentials for NFS   Defines the response for NFS credential   SdkNodeCordonAttachmentsRequest request for disabling new volume attachments from a node   SdkNodeCordonAttachmentsRespinse response for disabling new volume attachments from a node   Defines a node drain volume attachments request   Defines a response with a list of node ids   Defines a response with a list of nodes   Defines a response when inspecting a node   Defines a response when inspecting a node   Defines response containing status of the trigger   SdkNodeUncordonAttachmentsRequest request for re-enabling volume attachments for a node   SdkNodeUncordonAttachmentsRespinse response for enabling new volume attachments from a node   Defines response containing Node's volumes/snapshot capacity usage details   Defines a request to create an object store   Defines a response when an object store has been created for a specified volume   Empty response   Defines a response when inspecting an object store endpoint   Defines a request to update an object store   Empty response   Define a request to create storage policy   Empty response   Define default storage policy response   Empty Response   Define a storage policy enumerate response   Define a storage policy inspect response   Empty Request   Empty Response   Define a request to set default storage policy   Empty Response   Define a r",true,10,0,0,"None of the retrieved documentation provides details for a 'create role' functionality—there is no mention of a 'role', 'roles', or a relevant POST /v1/roles (or similar) endpoint. The closest endpoints are for credentials and volumes, which are unrelated. No parameters, example requests, or guidance are given for any kind of 'role' creation call. Retrieval brought mostly irrelevant endpoints and did not satisfy the developer need for creating a new role.",""
2025-10-09T12:37:10.370Z,openstorage-api,"OpenStorage API","Activate a cluster domain","activate cluster domain API endpoint parameters documentation",7,"lusterdomains/deactivate/{cluster\_domain\_name}](#/OpenStorageClusterDomains/OpenStorageClusterDomains%5FDeactivate)  Deactivates a cluster domain in the cluster. All the nodes which are part of a deactivated cluster domain. will not participate in cluster quorum calculation  GET[/v1/clusterdomains/inspect/{cluster\_domain\_name}](#/OpenStorageClusterDomains/OpenStorageClusterDomains%5FInspect)  Inspect returns information about a cluster domain and a status indicating whether the cluster domain is active  #### [OpenStorageClusterPair](#/OpenStorageClusterPair)  GET[/v1/clusterpairs](#/OpenStorageClusterPair/OpenStorageClusterPair%5FEnumerate)  Enumerate returns list of cluster pairs  POST[/v1/clusterpairs](#/OpenStorageClusterPair/OpenStorageClusterPair%5FCreate)  Creates Pair with a remote cluster and returns details about the remote cluster  GET[/v1/clusterpairs/inspect/{id}](#/OpenStorageClusterPair/OpenStorageClusterPair%5FInspect)  Inspect information about a cluster pair  GET[/v1/clusterpairs/token](#/OpenStorageClusterPair/OpenStorageClusterPair%5FGetToken)  GetToken returns a auth token  POST[/v1/clusterpairs/token](#/OpenStorageClusterPair/OpenStorageClusterPair%5FResetToken)  ResetToken returns a auth token  DELETE[/v1/clusterpairs/{cluster\_id}](#/OpenStorageClusterPair/OpenStorageClusterPair%5FDelete)  Delete a cluster pair  #### [OpenStorageCluster](#/OpenStorageCluster)  GET[/v1/clusters/inspectcurrent](#/OpenStorageCluster/OpenStorageCluster%5FInspectCurrent)  InspectCurrent returns information about the current cluster  #### [OpenStorageCredentials](#/OpenStorageCredentials)  GET[/v1/credentials](#/OpenStorageCredentials/OpenStorageCredentials%5FEnumerate)  Enumerate returns a list of credential ids  POST[/v1/credentials](#/OpenStorageCredentials/OpenStorageCredentials%5FCreate)  Create is used to submit cloud credentials. It will return an id of the credentials once they are verified to work.  GET[/v1/credentials/inspect/{credential\_id}](#/OpenSt",true,95,100,80,"The retrieved documentation directly includes the correct API endpoint (POST /v1/clusterdomains/activate/{cluster_domain_name}) for activating a cluster domain, clearly stating the purpose and required parameter (cluster_domain_name in the path). The endpoint is unambiguously identified, earning a perfect endpoint score. Completeness is good since it details the required path parameter and successful/failed responses, but it lacks example requests (e.g., curl or code snippets), which would help developers make the call with full confidence. Overall, the retrieval is very effective though some minor improvements (like usage examples) could be made.",""
2025-10-09T12:37:15.876Z,caspio-api,"Caspio REST API","how do I deploy a DataPage?","deploy DataPage API endpoint parameters documentation",5,"  === OPENAPI OPERATIONS ===  [GET /v3/bridgeApplications/{externalKey}/datapages/{appKey}/deployment] {"tags":["Bridge Applications"];"summary":"Returns the DataPage deploy code";"description":"Available deployment methods: **iFrame**; **URL**; **Embedded**; **Net**.  \nValues are case-insensitive and can be replaced by a single character of each string (**I**; **U**; **E**; **N**) respectively.";"operationId":"GetBridgeApplicationDataPageDeploymentCode";"parameters":[{"name":"externalKey";"in":"path";"description":"App ID";"required":true;"schema":{"type":"string"}};{"name":"appKey";"in":"path";"description":"DataPage ID";"required":true;"schema":{"type":"string"}};{"name":"method";"in":"query";"description":"Deployment method";"required":true;"schema":{"type":"string"}}];"responses":{"200":{"description":"OK";"content":{"application/json":{"schema":{"type":"string"}};"text/json":{"schema":{"type":"string"}};"application/xml":{"schema":{"type":"string"}};"text/xml":{"schema":{"type":"string"}}}};"400":{"description":"BadRequest"};"401":{"description":"Unauthorized"};"403":{"description":"Forbidden"};"404":{"description":"NotFound"}}}  ---  [PUT /v3/outgoingWebhooks/{webhookId}] {"tags":["Outgoing Webhooks"];"summary":"Updates the outgoing webhook definition";"description":"At least one of the following parameters must be included in the request body:\n- **Name** must be unique for each outgoing webhook.\n- **Description**\n- **OutgoingUrls** must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** should be higher than 0 and lower than the max value for the account plan.\n- **Enabled** can be set to true or false to configure statuses of all events related to this webhook.";"operationId":"UpdateOutgoingWebhook";"parameters":[{"name":"webhookId";"in":"path";"description":"";"required":true;"schema":{"type":"string"}}];"requestBody":{"descrip",true,90,100,80,"The documentation retrieved is highly relevant—it provides two endpoints specifically for deploying DataPages: PUT /v3/bridgeApplications/{externalKey}/datapages/{appKey}/deployment for an individual DataPage, and PUT /v3/bridgeApplications/{externalKey}/datapages/deployment for all DataPages in an app. The documentation clearly lists these endpoints, their purposes (deploy/un-deploy), and required parameters (externalKey, appKey). It also specifies that the request body must include a deployment state, referencing a SetDeploymentStatusRequest object. However, there is a lack of a detailed example of what the request body should look like (e.g., what fields are required in SetDeploymentStatusRequest), which prevents a perfect completeness score.",""
2025-10-09T12:37:28.890Z,caspio-api,"Caspio REST API","Create a new ongoing webhook","create webhook endpoint ongoing subscription API documentation",5,"  === OPENAPI OPERATIONS ===  [PUT /v3/outgoingWebhooks/{webhookId}] {"tags":["Outgoing Webhooks"];"summary":"Updates the outgoing webhook definition";"description":"At least one of the following parameters must be included in the request body:\n- **Name** must be unique for each outgoing webhook.\n- **Description**\n- **OutgoingUrls** must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** should be higher than 0 and lower than the max value for the account plan.\n- **Enabled** can be set to true or false to configure statuses of all events related to this webhook.";"operationId":"UpdateOutgoingWebhook";"parameters":[{"name":"webhookId";"in":"path";"description":"";"required":true;"schema":{"type":"string"}}];"requestBody":{"description":"";"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookPutRequest"}}};"required":true};"responses":{"200":{"description":"OK";"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookPutResponse"}};"text/json":{"schema":{"$ref":"#/components/schemas/WebhookPutResponse"}}}};"400":{"description":"BadRequest"};"401":{"description":"Unauthorized"};"403":{"description":"Forbidden"};"404":{"description":"NotFound"}}}  ---  [POST /v3/outgoingWebhooks] {"tags":["Outgoing Webhooks"];"summary":"Creates a new outgoing webhook";"description":"- **Name** is required and must be unique for each outgoing webhook.\n- **Description** is optional. \n- **OutgoingUrls** is required; must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** is optional and should be higher than 0 and lower than the max value for the account plan. If not provided; the account plan's max value is used.";"operationId":"CreateOutgoingWebhook";"requestBody":{"description":"";"conten",true,95,100,85,"The retrieved documentation strongly addresses the user's request to 'create a new ongoing webhook'. The correct endpoint (POST /v3/outgoingWebhooks) is clearly specified, including a summary and a description of required parameters (Name, OutgoingUrls) and optional parameters (Description, CallThrottling). However, while required fields are mentioned and there is schema reference, there are no explicit request or response body examples included. Extra endpoints are present, but do not distract from finding the correct one. Overall, this documentation would enable a developer to confidently construct the API call, but could be improved with concrete JSON payload examples.",""
2025-10-09T12:37:34.232Z,epaypolicy-api,"ePayPolicy API","Please cancel a ongoing payment schedule","cancel payment schedule API endpoint ongoing payment cancelation parameters",7,"  === OPENAPI OPERATIONS ===  [POST /api/v2/paymentSchedules] {"tags":["PaymentSchedules"];"summary":"Creates a payment schedule for a delayed payment or recurring payments.";"operationId":"PaymentSchedules_Post";"consumes":["application/json";"text/json";"application/xml";"text/xml";"application/x-www-form-urlencoded"];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"postPaymentScheduleRequestModel";"in":"body";"description":"Contains the parameters for the payment schedule. In the response; the Id of the created payment schedule is the last part of the URI in the location header attribute.";"required":true;"schema":{"$ref":"#/definitions/PostPaymentScheduleRequestModel"}};{"name":"impersonationAccountKey";"in":"header";"description":"The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request.";"required":false;"schema":{"type":"string"};"type":"string";"default":""}];"responses":{"201":{"description":"The payment schedule was created successfully. The Id of the schedule is in the location header attribute."};"400":{"description":"Invalid request. Check the body for any related errors.";"schema":{"type":"object";"additionalProperties":{"$ref":"#/definitions/Object"}}};"401":{"description":"Invalid credentials. Please verify the key and secret used to generate the authorization header value."}};"deprecated":false;"security":[{"basic":[]}]}  ---  [POST /api/v2/paymentSchedules/{id}/cancel] {"tags":["PaymentSchedules"];"summary":"Cancels an active payment schedule.";"operationId":"PaymentSchedules_Cancel";"consumes":[];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"id";"in":"path";"description":"The public Id of the payment schedule.";"required":true;"type":"string"};{"name":"impersonationAccountKey";"in":"header";"de",true,95,100,85,"The retrieved documentation directly includes the exact endpoint needed to cancel an ongoing payment schedule: POST /api/v2/paymentSchedules/{id}/cancel. It specifies the method, path, required path parameter (id), and an optional impersonation header. While it gives strong technical clarity, the completeness is slightly reduced by the lack of a complete request/response example, but all parameters and success/error scenarios are described sufficiently for a developer to make the call. Overall, a developer would be able to confidently perform the requested action using the details provided.",""
2025-10-09T12:37:44.470Z,epaypolicy-api,"ePayPolicy API","Can you calculate transaction fees for me","calculate transaction fees API endpoint parameters transaction_fee data structure",7,"  === OPENAPI OPERATIONS ===  [GET /api/v2/transactionFees] {"tags":["TransactionFees"];"summary":"Calculates and returns transaction fees for a given net amount due based on the account.";"operationId":"TransactionFees_Get";"consumes":[];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"amount";"in":"query";"description":"Net amount due from which to calculate the transaction fees.";"required":true;"type":"number";"format":"double"};{"name":"impersonationAccountKey";"in":"header";"description":"";"required":false;"schema":{"type":"string"};"type":"string";"default":""}];"responses":{"200":{"description":"The transaction fees were successfully calculated.";"schema":{"$ref":"#/definitions/GetTransactionFeesResponseModel"}};"400":{"description":"Invalid request. Check the body for any related errors.";"schema":{"type":"object";"additionalProperties":{"$ref":"#/definitions/Object"}}};"401":{"description":"Invalid credentials. Please verify the key and secret used to generate the authorization header value."}};"deprecated":false;"security":[{"basic":[]}]}  ---  [GET /api/v2/transactions/{id}] {"tags":["Transactions"];"summary":"Retrieves the details of a transaction.";"operationId":"Transactions_Get";"consumes":[];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"id";"in":"path";"description":"The Id of the transaction.";"required":true;"type":"integer";"format":"int64"};{"name":"impersonationAccountKey";"in":"header";"description":"The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request.";"required":false;"schema":{"type":"string"};"type":"string";"default":""}];"responses":{"200":{"description":"The transaction was found. See the body of the response for details.";"schema":{"$ref":"#/definitions/GetTransactionResponseMod",true,90,100,80,"The documentation directly includes an endpoint for calculating transaction fees: [GET /api/v2/transactionFees]. This endpoint is clearly identified and described as calculating and returning transaction fees for a given net amount. Required parameters, particularly 'amount' (a required query parameter), are clearly listed. Optional headers are also mentioned. However, the documentation does not include example requests or detailed sample responses, which would further assist developers in making the call and understanding the returned data structure, resulting in a slightly lower completeness score. Overall, the correct and necessary information is present to answer the user's question.",""
2025-10-09T12:37:51.485Z,twitter-api,"Twitter API","How is pagination handled in the Twitter API?","Twitter API pagination parameters next_token max_results endpoint documentation",10,"  === SECURITY ===  {   "securitySchemes": {     "BearerToken": {       "type": "http";       "scheme": "bearer"     };     "OAuth2UserToken": {       "type": "oauth2";       "flows": {         "authorizationCode": {           "authorizationUrl": "https://api.x.com/2/oauth2/authorize";           "tokenUrl": "https://api.x.com/2/oauth2/token";           "scopes": {             "block.read": "View accounts you have blocked.";             "bookmark.read": "Read your bookmarked Posts.";             "bookmark.write": "Create and delete your bookmarks.";             "dm.read": "Read all your Direct Messages.";             "dm.write": "Send and manage your Direct Messages.";             "follows.read": "View accounts you follow and accounts following you.";             "follows.write": "Follow and unfollow accounts on your behalf.";             "like.read": "View Posts you have liked and likes you can see.";             "like.write": "Like and unlike Posts on your behalf.";             "list.read": "View Lists; members; and followers of Lists you created or are a member of; including private Lists.";             "list.write": "Create and manage Lists on your behalf.";             "media.write": "Upload media; such as photos and videos; on your behalf.";             "mute.read": "View accounts you have muted.";             "mute.write": "Mute and unmute accounts on your behalf.";             "offline.access": "Request a refresh token for the app.";             "space.read": "View all Spaces you have access to.";             "timeline.read": "View all Custom Timelines you can see; including public Custom Timelines from other developers.";             "tweet.moderate.write": "Hide and unhide replies to your Posts.";             "tweet.read": "View all Posts you can see; including those from protected accounts.";             "tweet.write": "Post and repost on your behalf.";             "users.read": "View any account you can see; including protected accounts."           }     ",true,90,85,80,"The retrieved documentation includes explicit references to Twitter API pagination using parameters like next_token, max_results, and pagination_token. Several relevant endpoints are listed, such as GET /2/users/:id/liked_tweets and GET /2/tweets/:id/liking_users, and there is strong documentation about how these endpoints use pagination tokens to page through results. The OpenAPI operation details for search endpoints (e.g., /2/communities/search and /2/tweets/search/all) also list next_token and max_results as query parameters. However, the connection between general pagination handling and each specific endpoint could be clearer, and worked API call examples with pagination are missing. The documentation covers the existence and usage of pagination tokens well, but would be improved by including direct example requests and responses showing pagination in action for a typical endpoint.",""
2025-10-09T12:37:57.911Z,twitter-api,"Twitter API","How do I get posts from a user's timeline?","get user timeline posts API endpoint parameters documentation",10,"up group; you can retrieve a list of accounts that have liked a Post; or a list of Posts that an account has liked. These endpoints include:  * Posts liked by a user - GET /2/users/:id/liked\_tweets * Users who have liked a Post - GET /2/tweets/:id/liking\_users You can authenticate these endpoints with either [OAuth 1.0a User Context](/resources/fundamentals/authentication) or [OAuth 2.0 Bearer Token](/resources/fundamentals/authentication#oauth-2-0). For the liked Posts endpoints; pagination tokens will be provided for paging through large sets of results. The liking users endpoint limits you to a total of 100 liking accounts per post for all time. Additionally; the liked Posts endpoint is also subject to the monthly [Post cap](/x-api/fundamentals/post-cap) applied at the Project level.   ###   [​](#manage-likes)  Manage Likes  The manage Likes endpoints enable you to like or unlike a specified Post on behalf of an authenticated account. For this endpoint group; there are two methods available POST and DELETE. The POST method allows you to like a Post; and the DELETE method will enable you to unlike a Post. Since you are making requests on behalf of a user; you must authenticate these endpoints with [OAuth 1.0a User Context](/resources/fundamentals/authentication) and use the Access Tokens associated with the user; which can be generated using the [3-legged OAuth flow](/resources/fundamentals/authentication#oauth-1-0a-2)/obtaining-user-access-tokens). You can like a Post from your account or an account of an authenticated user. With both endpoints; there is a user rate limit of 50 requests per 15 minutes per endpoint. To access these endpoint; you must have an approved [developer account](/resources/fundamentals/developer-portal). When authenticating; you must use keys and tokens from a [developer App](/resources/fundamentals/developer-apps) that is located within a [Project](/resources/fundamentals/projects). Learn more about getting access to the X API v2 endpoi",true,90,95,85,"The retrieved documentation contains the highly relevant GET /2/users/{id}/timelines/reverse_chronological endpoint, which is specifically for retrieving a user's timeline posts in reverse chronological order. The exact path is given, and the documentation lists required and optional parameters (id, since_id, until_id, max_results, pagination_token, exclude, start_time) with descriptions. However, while parameters and their purposes are explained, the documentation is missing a concrete, example request/response, which would help developers slightly more. The endpoint for user timeline is clear and accurate, but some extra content about related endpoints (liked tweets, user tweets) may introduce some minor ambiguity if the reader isn't familiar with the API's distinctions. Overall, the material is highly relevant and would enable most developers to make the appropriate API call.",""
2025-10-09T12:38:04.751Z,trello-api,"Trello API","How do I create a new board?","create board API endpoint parameters request example",7,"equired  #### Query parameters  **value**  TrelloID  ### Responses  Success  PUT/lists/{id}/closed  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/closed?key=APIKey&token=APIToken'`  PUT  ## Move List to Board  Move a List to a different Board  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  TrelloID  Required  #### Query parameters  **value**  TrelloID  Required  ### Responses  Success  PUT/lists/{id}/idBoard  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/idBoard?value=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken'`  PUT  ## Update a field on a List  Rename a list  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  TrelloID  Required  **field**  string  Required  #### Query parameters  **value**  oneOf \[string; number; string; boolean\]  ### Responses  Success  PUT/lists/{id}/{field}  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/{field}?key=APIKey&token=APIToken'`  GET  ## Get Actions for a List  Get the Actions on a List  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  string  Required  #### Query parameters  **filter**  string  ### Responses  Success  GET/lists/{id}/actions  curl  Node.js  Java  Python  PHP  `12` `curl --request GET \ --url 'https://api.trello.com/1/lists/{id}/actions?key=APIKey&token=APIToken'`  GET  ## Get the Board a List is on  Get the board a list is on  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  string  Required  #### Query parameters  **fields**  string  ### Responses  Success  GET/lists/{id}/board  curl  Node.js  Java  Python  PHP  `12` `curl --request GET \ --url 'https://api.trello.com/1/lists/{id}/board?key=APIKey&token=APIToken'`  GET  ## Get Cards in ",true,90,100,85,"The retrieved documentation includes the correct endpoint (POST /boards/) for creating a new board and clearly highlights it within the results. The endpoint section lists the required 'name' parameter and several optional query parameters (defaultLabels, defaultLists, desc, etc.). An explicit curl example for making the API call is provided, which is very helpful for developers. While most required and optional parameters are described, there could be more example values and a response example to make the documentation more comprehensive for first-time users, hence the slight deduction on completeness.",""
2025-10-09T12:38:10.374Z,trello-api,"Trello API","How do I get a list of all cards in a board?","Trello API list all cards in board endpoint",5,"/trello/rest/api-group-emoji/#api-group-emoji) * [Enterprises](/cloud/trello/rest/api-group-enterprises/#api-group-enterprises) * [Labels](/cloud/trello/rest/api-group-labels/#api-group-labels) * [Lists](/cloud/trello/rest/api-group-lists/#api-group-lists) * [Members](/cloud/trello/rest/api-group-members/#api-group-members) * [Notifications](/cloud/trello/rest/api-group-notifications/#api-group-notifications) * [Organizations](/cloud/trello/rest/api-group-organizations/#api-group-organizations) * [Plugins](/cloud/trello/rest/api-group-plugins/#api-group-plugins) * [Search](/cloud/trello/rest/api-group-search/#api-group-search) * [Tokens](/cloud/trello/rest/api-group-tokens/#api-group-tokens) * [Webhooks](/cloud/trello/rest/api-group-webhooks/#api-group-webhooks)  Cloud  Trello / Reference / REST API  # Cards  [Postman Collection](/cloud/trello/trello.postman.json)  [OpenAPI](https://dac-static.atlassian.com/cloud/trello/swagger.v3.json?%5Fv=1.740.0)  Operations  [POST/cards](/cloud/trello/rest/api-group-cards/#api-cards-post)[GET/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-get)[PUT/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-put)[DEL/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-delete)[GET/cards/{id}/{field}](/cloud/trello/rest/api-group-cards/#api-cards-id-field-get)[GET/cards/{id}/actions](/cloud/trello/rest/api-group-cards/#api-cards-id-actions-get)[GET/cards/{id}/attachments](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-get)[POST/cards/{id}/attachments](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-post)[GET/cards/{id}/attachments/{idAttachment}](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-idattachment-get)[DEL/cards/{id}/attachments/{idAttachment}](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-idattachment-delete)[GET/cards/{id}/board](/cloud/trello/rest/api-group-cards/#api-cards-id-board-get)[GET/cards/{id}/checkItemStates](/cloud/trello/rest/api-g",true,90,100,70,"The retrieved documentation directly surfaces the exact endpoint needed for the user question: GET /boards/{id}/cards, which is used to list all cards on a Trello board. It also includes GET /boards/{id}/cards/{filter} for additional filtering, which is relevant. Endpoint identification is clear and precise. However, while basic required parameters (path parameter 'id') are mentioned, there is no example request, no information about authentication, and minimal detail about optional query parameters or the structure of the returned data. This lowers the completeness score, since a developer might need to look elsewhere for full usage (such as sample requests, response format, and authentication requirements). The retrieval is strong overall for endpoint identification but not exhaustive in actionable detail.",""
2025-10-09T12:38:16.178Z,gemini-api,"Gemini API","How do I generate content using the Gemini API?","Gemini API generate content endpoint documentation parameters examples",10,"s.com/v1beta/models/gemini-2.5-flash:generateContent" \   -H "x-goog-api-key: $GEMINI_API_KEY" \   -H 'Content-Type: application/json' \   -X POST \   -d '{     "contents": [       {         "parts": [           {             "text": "Explain how AI works in a few words"           }         ]       }     ]   }'  ```  ## Meet the models  [Start building with Gemini](https://aistudio.google.com/apps)    2.5 Prospark    Our most powerful thinking model with features for complex reasoning and much more  [](/gemini-api/docs/models#gemini-2.5-pro)    2.5 Flashspark    Our most balanced model; with a 1 million token context window and more  [](/gemini-api/docs/models/gemini#gemini-2.5-flash)    2.5 Flash-Litespark    Our fastest and most cost-efficient multimodal model with great performance for high-frequency tasks  [](/gemini-api/docs/models/gemini#gemini-2.5-flash-lite)    Veo 3video\_library    Our state of the art video generation model; with native audio  [](/gemini-api/docs/video)    Gemini 2.5 Flash Imageimagesmode    (Nano Banana); our highly effective and precise image generation model  [](/gemini-api/docs/image-generation)    Gemini Embeddingsdata\_array    Our first Gemini embedding model; designed for production RAG workflows  [](/gemini-api/docs/embeddings)   ## Explore the API  ### Native Image Generation (aka Nano Banana)  Generate and edit highly contextual images natively with Gemini 2.5 Flash Image.  [](/gemini-api/docs/image-generation)   ### Explore long context  Input millions of tokens to Gemini models and derive understanding from unstructured images; videos; and documents.  [](/gemini-api/docs/long-context)   ### Generate structured outputs  Constrain Gemini to respond with JSON; a structured data format suitable for automated processing.  [](/gemini-api/docs/structured-output)   ### Start building with the Gemini API  [Get started](/gemini-api/docs/quickstart)   Except as otherwise noted; the content of this page is licensed under the [Creative Co",true,85,90,80,"The retrieved documentation includes a concrete example of a cURL request for generating content using the Gemini API, showing the correct endpoint (`POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent`), proper headers, and a sample JSON payload. While there is some extra unrelated content and some formatting noise, the key information a developer needs—the endpoint, parameters, example request, and mention of required headers like the API key—is present. However, the documentation could be more complete if it included further details about additional optional parameters, response examples, or error handling. The endpoint is clearly specified, but the completeness is dinged slightly due to lack of exhaustiveness regarding inputs and outputs.",""
2025-10-09T12:38:20.509Z,gemini-api,"Gemini API","How do I count tokens I used?","count tokens API endpoint usage parameters",10,"lem";"thumb-up"\];\["Other";"otherUp";"thumb-up"\]\];\[\["Missing the information I need";"missingTheInformationINeed";"thumb-down"\];\["Too complicated / too many steps";"tooComplicatedTooManySteps";"thumb-down"\];\["Out of date";"outOfDate";"thumb-down"\];\["Samples / code issue";"samplesCodeIssue";"thumb-down"\];\["Other";"otherDown";"thumb-down"\]\];\["Last updated 2025-09-22 UTC."\];\[\];\[\]\]   * On this page * [Method: models.get](#method:-models.get)      * [Endpoint](#endpoint)      * [Path parameters](#path-parameters)      * [Request body](#request-body)      * [Example request](#example-request)      * [Response body](#response-body) * [Method: models.list](#method:-models.list)      * [Endpoint](#endpoint%5F1)      * [Query parameters](#query-parameters)      * [Request body](#request-body%5F1)      * [Example request](#example-request%5F1)      * [Response body](#response-body%5F1) * [REST Resource: models](#rest-resource:-models) * [Resource: Model](#Model) * [Method: models.predict](#method:-models.predict)      * [Endpoint](#endpoint%5F2)      * [Path parameters](#path-parameters%5F1)      * [Request body](#request-body%5F2)      * [Response body](#response-body%5F2) * [Method: models.predictLongRunning](#method:-models.predictlongrunning)      * [Endpoint](#endpoint%5F3)      * [Path parameters](#path-parameters%5F2)      * [Request body](#request-body%5F3)      * [Response body](#response-body%5F3)   A new native audio model is available for the Live API. [Learn more](https://ai.google.dev/gemini-api/docs/live)   * [ Home](https://ai.google.dev/) * [ Gemini API](https://ai.google.dev/gemini-api) * [ API Reference](https://ai.google.dev/api)  Was this helpful?  #  Models   * On this page * [Method: models.get](#method:-models.get)      * [Endpoint](#endpoint)      * [Path parameters](#path-parameters)      * [Request body](#request-body)      * [Example request](#example-request)      * [Response body](#response-body) * [Method: models.list](#meth",true,25,10,10,"The documentation does not directly answer how to count tokens used in API calls. There is a lot of information about various endpoints (e.g., models.get, models.list, batches.list) but none directly relate to counting tokens consumed. No endpoint is described as providing usage metrics or token counts. Parameter and usage detail regarding token measurement is missing. While endpoints are listed, none map clearly to token usage reporting; thus, the documentation only tangentially relates to the actual user question.",""
2025-10-09T12:38:25.327Z,linear-api,"Linear API","How do I create a new triage issue?","create triage issue API endpoint parameters request example",10,"on":"The time at which the issue entered triage.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"triagedAt";"description":"The time at which the issue left triage.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"canceledAt";"description":"The time at which the issue was moved into canceled state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"autoClosedAt";"description":"The time at which the issue was automatically closed by the auto pruning process.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"autoArchivedAt";"description":"The time at which the issue was automatically archived by the auto pruning process.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"dueDate";"description":"The date at which the issue is due.";"args":[];"type":{"kind":"SCALAR";"name":"TimelessDate";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaStartedAt";"description":"The time at which the issue's SLA began.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaMediumRiskAt";"description":"The time at which the issue's SLA will enter medium risk state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaHighRiskAt";"description":"The time at which the issue's SLA will enter high risk state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaBreachesAt";"description":"The time at which the issue's SLA will breach.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofT",true,55,10,35,"The retrieved documentation provides some information about possible input parameters for triage issue creation, such as teamId, labelIds, dueDate, and others. However, it does not clearly specify which API endpoint to use, such as a POST URL or a named GraphQL mutation. There is no structured request example, and the required/optional nature of parameters is only partially implied. While the content suggests this is related to an issue/ticket creation API, a developer would still need to infer how to make the call and what endpoint to target, making practical implementation difficult.",""
2025-10-09T12:38:29.523Z,linear-api,"Linear API","How do I get a list of all issues?","list issues API endpoint parameters response structure",10,"es title.";"type":{"kind":"INPUT_OBJECT";"name":"StringComparator";"ofType":null};"defaultValue":null};{"name":"description";"description":"Comparator for the issues description.";"type":{"kind":"INPUT_OBJECT";"name":"NullableStringComparator";"ofType":null};"defaultValue":null};{"name":"priority";"description":"Comparator for the issues priority. 0 = No priority; 1 = Urgent; 2 = High; 3 = Normal; 4 = Low.";"type":{"kind":"INPUT_OBJECT";"name":"NullableNumberComparator";"ofType":null};"defaultValue":null};{"name":"estimate";"description":"Comparator for the issues estimate.";"type":{"kind":"INPUT_OBJECT";"name":"EstimateComparator";"ofType":null};"defaultValue":null};{"name":"startedAt";"description":"Comparator for the issues started at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"triagedAt";"description":"Comparator for the issues triaged at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"completedAt";"description":"Comparator for the issues completed at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"canceledAt";"description":"Comparator for the issues canceled at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"archivedAt";"description":"Comparator for the issues archived at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"autoClosedAt";"description":"Comparator for the issues auto closed at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"autoArchivedAt";"description":"Comparator for the issues auto archived at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"addedToCycleAt";"description":"Comparator for the ",true,40,10,25,"The retrieved documentation only provides fragments of parameter descriptions and comparators relevant to filtering issues, but it does not clearly specify what endpoint to use to list all issues. There is no mention of the HTTP method, path, or example request/response. The parameters are detailed (albeit in a raw/fragmented form), but without context about how to call the API, what the endpoint is, or how the request and response should be structured, the usefulness for a developer is limited. Overall, the core detail about 'how to get a list of all issues' is largely missing.",""
2025-10-09T12:38:36.320Z,claude-api,"Claude API","How does Claude handle Rate Limiting?","Claude API rate limiting endpoints parameters documentation",10,"-data-retention-period%3F) * [Which Claude Code deployments are supported?](#which-claude-code-deployments-are-supported%3F) * [What does it cost to use this API?](#what-does-it-cost-to-use-this-api%3F) * [How do I calculate tool acceptance rates?](#how-do-i-calculate-tool-acceptance-rates%3F) * [What time zone is used for the date parameter?](#what-time-zone-is-used-for-the-date-parameter%3F) * [See also](#see-also)  **The Admin API is unavailable for individual accounts.** To collaborate with teammates and add members; set up your organization in **Console → Settings → Organization**.  The Claude Code Analytics Admin API provides programmatic access to daily aggregated usage metrics for Claude Code users; enabling organizations to analyze developer productivity and build custom dashboards. This API bridges the gap between our basic [Analytics dashboard](https://console.anthropic.com/claude-code) and the complex OpenTelemetry integration. This API enables you to better monitor; analyze; and optimize your Claude Code adoption:  * **Developer Productivity Analysis:** Track sessions; lines of code added/removed; commits; and pull requests created using Claude Code * **Tool Usage Metrics:** Monitor acceptance and rejection rates for different Claude Code tools (Edit; MultiEdit; Write; NotebookEdit) * **Cost Analysis:** View estimated costs and token usage broken down by Claude model * **Custom Reporting:** Export data to build executive dashboards and reports for management teams * **Usage Justification:** Provide metrics to justify and expand Claude Code adoption internally  **Admin API key required**This API is part of the [Admin API](/en/api/administration-api). These endpoints require an Admin API key (starting with `sk-ant-admin...`) that differs from standard API keys. Only organization members with the admin role can provision Admin API keys through the [Claude Console](https://console.anthropic.com/settings/admin-keys).  ##   [​](#quick-start)  Quick start  Get",true,40,10,10,"The retrieved documentation does not directly answer the user's question about 'how Claude handles rate limiting.' The most relevant section is a table of contents link to [Rate limits], but no actual rate limit values, error responses, retry guidance, or explicit endpoint details about rate limiting are present in the content shown. There is no information describing specific endpoints designed for querying rate limits, how rate limiting errors are surfaced, or what headers to watch. There is no mention of required or optional parameters related to rate limiting. Overall, the documentation surfaced is generic and lacks explicit, actionable rate limiting information, making it insufficient for developers looking to understand or handle Claude API rate limits.",""
2025-10-09T12:38:41.077Z,claude-api,"Claude API","How do I create a new message in a conversation?","API create message endpoint conversation parameters request body",10,"2` or specify the header multiple times for each beta.  [​](#parameter-anthropic-version)  anthropic-version  string  required  The version of the Claude API you want to use.  Read more about versioning and our version history [here](https://docs.claude.com/en/api/versioning).  [​](#parameter-x-api-key)  x-api-key  string  required  Your unique API key for authentication.  This key is required in the header of all API requests; to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.  #### Body  application/json  [​](#body-messages)  messages  InputMessage · object\[\]  required  Input messages.  Our models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`; you specify the prior conversational turns with the `messages` parameter; and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.  Each input message must be an object with a `role` and `content`. You can specify a single `user`\-role message; or you can include multiple `user` and `assistant` messages.  If the final message uses the `assistant` role; the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.  Example with a single `user` message:  ``` [{"role": "user"; "content": "Hello; Claude"}] ```  Example with multiple conversational turns:  ``` [   {"role": "user"; "content": "Hello there."};   {"role": "assistant"; "content": "Hi; I'm Claude. How can I help you?"};   {"role": "user"; "content": "Can you explain LLMs in plain English?"}; ] ```  Example with a partially-filled response from Claude:  ``` [   {"role": "user"; "content": "What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun"};   {"role": "assistant"; "content": "The bes",true,75,40,85,"The documentation provides detailed information about the required request body contents (such as the 'messages', 'model', and 'max_tokens' parameters) and includes examples of input structure for creating new messages in a conversation. However, the actual HTTP method and endpoint path (e.g., POST /v1/messages or similar) are not clearly identified in this excerpt, which makes it difficult for a developer to know exactly which URL to call. Authentication and required headers are covered, and there is sufficient information to construct a valid request body, but the lack of explicit endpoint documentation lowers the endpoint score.",""
2025-10-09T12:38:48.160Z,pokeapi-api,"PokeAPI API","How do I get a list of gen2 pokemons?","gen2 pokemon list API endpoint generation-ii parameters documentation",10,"Level up"                     * ▶                     language:{} 2 keys                                 * name:"en"                                 * url:"https://pokeapi.co/api/v2/language/9/"      * ▶      pokemon\_species:\[\] 1 item            * ▶            0:{} 2 keys                     * name:"ivysaur"                     * url:"https://pokeapi.co/api/v2/pokemon-species/2/"   View raw JSON (0.321 kB; 19 lines)  #### EvolutionTrigger (type)  | Name             | Description                                                        | Type                                                                              | | ---------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------------------- | | id               | The identifier for this resource.                                  | _integer_                                                                         | | name             | The name for this resource.                                        | _string_                                                                          | | names            | The name of this resource listed in different languages.           | list _[Name](#name)_                                                              | | pokemon\_species | A list of pokemon species that result from this evolution trigger. | list __[NamedAPIResource](#namedapiresource) ([PokemonSpecies](#pokemonspecies))_ |  ## Games (group)  ### Generations (endpoint)  A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation; a new set of Pokémon; Moves; Abilities and Types that did not exist in the previous generation are released.  GET https://pokeapi.co/api/v2/generation/{id or name}/  * * id:1      * name:"generation-i"      * abilities:\[\] 0 items      * ▶      main\_region:{} 2 keys            * name:"kanto"            * url:"https://pokeapi.co/",true,85,90,60,"The documentation correctly surfaces the relevant endpoint ('GET https://pokeapi.co/api/v2/generation/{id or name}/') for listing Pokémon from a specific generation, which is how gen2 Pokémon can be retrieved. It explains that each generation resource includes a pokemon_species list with all Pokémon introduced in that generation. However, while it identifies the right endpoint and describes the key response property, it lacks parameter details (such as the correct id/name for gen2, which would be '2' or 'generation-ii') and does not provide sample request/response data or explicit parameter usage instructions. Thus, identification of the endpoint is strong, but full call assembly and usage details are limited.",""
2025-10-09T12:38:53.957Z,pokeapi-api,"PokeAPI API","How do find information about a specific berry?","berry endpoint get specific berry API documentation parameters",10,".                 | _string_                           | | previous | The URL for the previous page in the list.             | _string_                           | | results  | A list of unnamed API resources.                       | list _[APIResource](#apiresource)_ |  ## Berries (group)  ### Berries (endpoint)  Berries are small fruits that can provide HP and status condition restoration; stat enhancement; and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.  GET https://pokeapi.co/api/v2/berry/{id or name}/  * * id:1      * name:"cheri"      * growth\_time:3      * max\_harvest:5      * natural\_gift\_power:60      * size:20      * smoothness:25      * soil\_dryness:15      * ▶      firmness:{} 2 keys            * name:"soft"            * url:"https://pokeapi.co/api/v2/berry-firmness/2/"      * ▶      flavors:\[\] 1 item            * ▶            0:{} 2 keys                     * potency:10                     * ▶                     flavor:{} 2 keys                                 * name:"spicy"                                 * url:"https://pokeapi.co/api/v2/berry-flavor/1/"      * ▶      item:{} 2 keys            * name:"cheri-berry"            * url:"https://pokeapi.co/api/v2/item/126/"      * ▶      natural\_gift\_type:{} 2 keys            * name:"fire"            * url:"https://pokeapi.co/api/v2/type/10/"   View raw JSON (0.608 kB; 31 lines)  #### Berry (type)  | Name                 | Description                                                                                                                       | Type                                                                        | | -------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- | | id                   | The identifier for this res",true,95,100,85,"The documentation clearly retrieves and outlines the correct endpoint (GET https://pokeapi.co/api/v2/berry/{id or name}/) for retrieving information about a specific berry, which directly answers the user's question. It demonstrates input parameter options (id or name) and provides a detailed table of the fields returned by the endpoint, as well as example structure. However, while there is sample field data, the documentation could be improved with a concrete request/response example and explicit mention that no authentication or query parameters are needed. Overall, it fully enables a developer to make a correct API call to get information about a specific berry.",""
2025-10-09T12:39:00.788Z,jira-api,"JIRA API","Get all issues from the current active sprint, categorize them by status","Jira API get issues current active sprint categorize by status endpoint parameters",10,"ents](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-events-get)      * [POSTCreate issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post)      * [PUTArchive issue(s) by issue ID/key](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-archive-put)      * [POSTArchive issue(s) by JQL](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-archive-post)      * [POSTBulk create issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-bulk-post)      * [POSTBulk fetch issues](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-bulkfetch-post)      * [GETGet create issue metadata](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-createmeta-get)      * [GETGet create metadata issue types for a project](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-createmeta-projectidorkey-issuetypes-get)      * [GETGet create field metadata for a project and issue type id](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-createmeta-projectidorkey-issuetypes-issuetypeid-get)      * [GETGet issue limit report](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-limit-report-get)      * [PUTUnarchive issue(s) by issue keys/ID](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-unarchive-put)      * [GETGet issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-get)      * [PUTEdit issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-put)      * [DELDelete issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-delete)      * [PUTAssign issue](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-assignee-put)      * [GETGet changelogs](/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-changelog-get)      * [POSTGet changelogs by IDs](/cloud/",true,30,10,10,"The retrieved documentation consists mostly of high-level listings of issue-related Jira Cloud API endpoints with links, but does not provide specific details about retrieving issues from the current active sprint, nor clear instructions about the relevant endpoint (such as one from the Board/Sprint API, like /rest/agile/1.0/board/{boardId}/sprint/{sprintId}/issue or a JQL-based search using /rest/api/3/search). No parameter information or usage examples are provided, and 'categorize by status' is not addressed at all. There is too much noise about unrelated endpoints (workflow, expression evaluation, etc.), so developers would still have to search further to answer the user's request effectively.",""
2025-10-09T12:39:06.290Z,jira-api,"JIRA API","Get all issues marked as Blocked or High Priority that are still in progress?","GET issues endpoint filter blocked high_priority status in_progress parameters",10,"oud  Jira Cloud platform / Reference / REST API v3  # Issue priorities  [Postman Collection](/cloud/jira/platform/jiracloud.3.postman.json)  [OpenAPI](https://dac-static.atlassian.com/cloud/jira/platform/swagger-v3.v3.json?%5Fv=1.8197.0)  This resource represents issue priorities. Use it to get; create and update issue priorities and details for individual issue priorities.  Operations  [GET/rest/api/3/priority](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-get)[POST/rest/api/3/priority](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-post)[PUT/rest/api/3/priority/default](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-default-put)[PUT/rest/api/3/priority/move](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-move-put)[GET/rest/api/3/priority/search](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-search-get)[GET/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-get)[PUT/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-put)[DEL/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-delete)  GET  ## Get prioritiesDeprecated  Returns the list of all issue priorities.  **[Permissions](/cloud/jira/platform/rest/v3/intro/#permissions) required:** Permission to access Jira.  **[Data Security Policy](/cloud/confluence/data-security-developer-guide)**: Exempt from app access rules  ##### Scopes  **[OAuth 2.0 scopes](/cloud/jira/platform/scopes-for-oauth-2-3LO-and-forge-apps/) required:**  **Classic**RECOMMENDED:`read:jira-work`  **Granular**:`read:priority:jira`  **[Connect app scope](/cloud/jira/platform/scopes) required**: `READ`  ### Request  This request has no parameters.  ### Responses  Returned if the request is successful.  #### ",true,25,10,10,"The retrieved documentation focuses on issue priorities, filter sharing, workflow capabilities, and a property update endpoint, but does NOT provide details about the correct endpoint to fetch issues (such as /rest/api/3/search or GET /issues). There is no documentation about filtering issues by blocked or high priority status, nor guidance on using query parameters for status or priority. The endpoints shown are not directly related to retrieving issues based on the query. No examples or parameter details for the required functionality are given. In summary, the retrieval does not effectively help a developer perform the requested task.",""
2025-10-09T12:39:12.148Z,attio-api,"Attio API","Get all people with a non-empty email address","GET people endpoint filter non-empty email address",10,"des/creating-an-app)[REST API](/rest-api/overview)  * [Developer dashboard](https://build.attio.com/) * [Support](https://attio.com/help)  ##### Introduction  * [Overview](/rest-api/overview)  ##### How-to guides  * [How to authenticate requests](/rest-api/how-to/authentication) * [How to handle rate limits](/rest-api/how-to/rate-limiting) * [How to apply filters and sorts](/rest-api/how-to/filtering-and-sorting) * [How to paginate API results](/rest-api/how-to/pagination) * [How to configure webhooks](/rest-api/how-to/webhooks)  ##### Tutorials  * [Connect an app to Attio through OAuth](/rest-api/tutorials/connect-an-app-through-oauth)  ##### Endpoint reference  * [OpenAPI](/rest-api/endpoint-reference/openapi) * * * [GETList attributes](/rest-api/endpoint-reference/attributes/list-attributes)            * [POSTCreate an attribute](/rest-api/endpoint-reference/attributes/create-an-attribute)            * [GETGet an attribute](/rest-api/endpoint-reference/attributes/get-an-attribute)            * [PATCHUpdate an attribute](/rest-api/endpoint-reference/attributes/update-an-attribute)            * [GETList select options](/rest-api/endpoint-reference/attributes/list-select-options)            * [POSTCreate a select option](/rest-api/endpoint-reference/attributes/create-a-select-option)            * [PATCHUpdate a select option](/rest-api/endpoint-reference/attributes/update-a-select-option)            * [GETList statuses](/rest-api/endpoint-reference/attributes/list-statuses)            * [POSTCreate a status](/rest-api/endpoint-reference/attributes/create-a-status)            * [PATCHUpdate a status](/rest-api/endpoint-reference/attributes/update-a-status)  ##### Webhook reference  Get an attribute  Copy  Ask AI  ``` curl --request GET \   --url https://api.attio.com/v2/{target}/{identifier}/attributes/{attribute} \   --header 'Authorization: Bearer <token>' ```  Copy  Ask AI  ``` {   "data": {     "id": {       "workspace_id": "14beef7a-99f7-4534-a87e-70b564330a4c";",true,50,40,30,"The retrieved documentation references several records-related endpoints (like POST /v2/objects/records/search and basic object operations), but it does not clearly show a 'GET people' endpoint or specify how to apply a filter for non-empty email addresses. There are hints that searching/filtering is possible (see the 'filtering-and-sorting' guide and search endpoint) but no concrete example of fetching all people with a non-empty email in a single API call. Required parameters or filters for this specific use case (such as the field name for emails or how to express 'non-empty') are missing. The documentation is fragmented and does not guide the developer directly to the correct endpoint or provide a ready-to-use API request.",""
2025-10-09T12:39:18.123Z,attio-api,"Attio API","Get all members of a workspace","workspace API get all members endpoint list users",8,"des/creating-an-app)[REST API](/rest-api/overview)  * [Developer dashboard](https://build.attio.com/) * [Support](https://attio.com/help)  ##### Introduction  * [Overview](/rest-api/overview)  ##### How-to guides  * [How to authenticate requests](/rest-api/how-to/authentication) * [How to handle rate limits](/rest-api/how-to/rate-limiting) * [How to apply filters and sorts](/rest-api/how-to/filtering-and-sorting) * [How to paginate API results](/rest-api/how-to/pagination) * [How to configure webhooks](/rest-api/how-to/webhooks)  ##### Tutorials  * [Connect an app to Attio through OAuth](/rest-api/tutorials/connect-an-app-through-oauth)  ##### Endpoint reference  * [OpenAPI](/rest-api/endpoint-reference/openapi) * * * [GETList attributes](/rest-api/endpoint-reference/attributes/list-attributes)            * [POSTCreate an attribute](/rest-api/endpoint-reference/attributes/create-an-attribute)            * [GETGet an attribute](/rest-api/endpoint-reference/attributes/get-an-attribute)            * [PATCHUpdate an attribute](/rest-api/endpoint-reference/attributes/update-an-attribute)            * [GETList select options](/rest-api/endpoint-reference/attributes/list-select-options)            * [POSTCreate a select option](/rest-api/endpoint-reference/attributes/create-a-select-option)            * [PATCHUpdate a select option](/rest-api/endpoint-reference/attributes/update-a-select-option)            * [GETList statuses](/rest-api/endpoint-reference/attributes/list-statuses)            * [POSTCreate a status](/rest-api/endpoint-reference/attributes/create-a-status)            * [PATCHUpdate a status](/rest-api/endpoint-reference/attributes/update-a-status)  ##### Webhook reference  Get an attribute  Copy  Ask AI  ``` curl --request GET \   --url https://api.attio.com/v2/{target}/{identifier}/attributes/{attribute} \   --header 'Authorization: Bearer <token>' ```  Copy  Ask AI  ``` {   "data": {     "id": {       "workspace_id": "14beef7a-99f7-4534-a87e-70b564330a4c";",true,85,90,65,"The retrieved documentation includes the correct endpoint (`GET /v2/workspace_members`) and a relevant summary description indicating it lists all workspace members, directly matching the user's question. However, it falls short on overall completeness: while the endpoint and required scope (`user_management:read`) are stated, there is no example request, no sample response body, and no information about possible parameters (such as pagination or filtering) if supported. Endpoint documentation is clear, but practical implementation details that developers rely on are missing.",""
2025-10-09T12:39:24.517Z,posthog-api,"PostHog API","Get the project IDs of all projects in my posthog account.","posthog API list projects endpoint project IDs authentication",10,"# API overview  ###   #### Contents  PostHog has a powerful API that enables you to capture; evaluate; create; update; and delete nearly all of your information in PostHog. You can use it to [pull information into your app](/tutorials/embedded-analytics); update metadata programmatically; [capture events from any language that can send HTTP requests](/tutorials/api-capture-events); and more.  The API is available for all users and instances. It contains two types of endpoints:  1. **Public POST-only endpoints** such as [/i/v0/e](/docs/api/capture) and [/flags](/docs/api/flags) are used for capturing events; batching events; updating person or group information; and evaluating feature flags. These don't require authentication; but use [your project API key](https://app.posthog.com/project/settings) to handle the request. 2. **Private `GET`; `POST`; `PATCH`; `DELETE` endpoints** are used for [querying](/docs/api/queries); creating; updating; or deleting nearly all data in PostHog. They give the same access as if you were logged into your PostHog instance; but require authentication with your personal API key.  > You must make API requests to the correct domain. On US Cloud; these are `https://us.i.posthog.com` for public endpoints and `https://us.posthog.com` for private ones. On EU Cloud; these are `https://eu.i.posthog.com` for public endpoints and `https://eu.posthog.com` for private ones. For self-hosted instances; use your self-hosted domain. Confirm yours by checking your PostHog instance URL.  ## Private endpoint authentication  Personal API keys can enable full access to your account; like logging in with your email and password. You can create multiple; give them different scopes; and each can be invalidated individually. This improves the security of your PostHog account. Personal API keys need to be kept private and shouldn't be used in the frontend.  #### How to obtain a personal API key  1. Go to the [Personal API keys](https://us.posthog.com/settings/use",true,60,50,40,"The retrieved documentation partially helps answer the user's question. It references that the project ID can be found by making a call to /api/projects/, suggesting this is the correct endpoint, but it does not provide any dedicated section, explicit endpoint description, request/response format, or example for listing all projects nor for retrieving their IDs. The details about authentication using a personal API key are mentioned and some curl usage is clear for other endpoints, but there is a lack of a complete example or explicit output for /api/projects/, which is what the user needs. Overall, basic clues are present, but the actual instructions and endpoint usage are incomplete.",""
2025-10-09T12:39:29.249Z,posthog-api,"PostHog API","Get all events in the last 30 days for a project","GET events endpoint filter project last 30 days API documentation",10,"ying this insight. * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/projects/.  ---  #### Query parameters  * format   string   One of: `"csv"` `"json"`  ---  #### Example request  `DELETE ` `/api/projects/:project_id/insights/:id`  `export POSTHOG_PERSONAL_API_KEY=[your personal api key]  curl  -X DELETE \      -H "Authorization: Bearer $POSTHOG_PERSONAL_API_KEY" \      <ph_app_host>/api/projects/:project_id/insights/:id/  `  #### Example response  ##### Status 405 No response body  ---  ## Retrieve insights activity retrieve  #### Required API key scopes  `activity_log:read`  ---  #### Path parameters  * id   integer   A unique integer value identifying this insight. * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/projects/.  ---  #### Query parameters  * format   string   One of: `"csv"` `"json"`  ---  #### Example request  `GET ` `/api/projects/:project_id/insights/:id/activity`  `export POSTHOG_PERSONAL_API_KEY=[your personal api key]  curl \      -H "Authorization: Bearer $POSTHOG_PERSONAL_API_KEY" \      <ph_app_host>/api/projects/:project_id/insights/:id/activity/  `  #### Example response  ##### Status 200 No response body  ---  ## Retrieve insights activity  #### Required API key scopes  `activity_log:read`  ---  #### Path parameters  * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/projects/.  ---  #### Query parameters  * format   string   One of: `"csv"` `"json"`  ---  #### Example request  `GET ` `/api/projects/:project_id/insights/activity`  `export POSTHOG_PERSONAL_API_KEY=[your personal api key]  curl \      -H "Authorization: Bearer $POSTHOG_PERSONAL_API_KEY" \      <ph_app_host>/api/projects/:project_id/insights/activity/  `  #### Example response  ##### Status 200 No response body  ---  ## Create insights cancel  ##",true,35,10,15,"The retrieved documentation does not directly provide an endpoint for listing 'events' for a project, particularly filtered by the last 30 days. Most of the content covers endpoints related to 'insights', 'groups', and 'dashboards', rather than events themselves. There is some mention of filtering by days in a behavioral table, but there is no example, description, or clear endpoint for fetching events in a time range. Parameter details or usage for event retrieval are missing. Overall, the documentation lacks both endpoint identification and the necessary parameters or examples for the user's specific use case.",""
2025-10-09T12:39:37.371Z,github-api,"GitHub API","List all repositories in my GitHub account.","GitHub API list user repositories endpoint parameters authentication",10,"e information; see [Keeping your API credentials secure](/en/rest/overview/keeping-your-api-credentials-secure).  ### [Parameters](#parameters)  Many API methods require or allow you to send additional information in parameters in your request. There are a few different types of parameters: Path parameters; body parameters; and query parameters.  #### [Path parameters](#path-parameters)  Path parameters modify the endpoint path. These parameters are required in your request. For more information; see [Path](#path).  #### [Body parameters](#body-parameters)  Body parameters allow you to pass additional data to the API. These parameters can be optional or required; depending on the endpoint. For example; a body parameter may allow you to specify an issue title when creating a new issue; or specify certain settings when enabling or disabling a feature. The documentation for each GitHub REST API endpoint will describe the body parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["Create an issue" endpoint](/en/rest/issues/issues#create-an-issue) requires that you specify a title for the new issue in your request. It also allows you to optionally specify other information; such as text to put in the issue body; users to assign to the new issue; or labels to apply to the new issue. For an example of a request that uses body parameters; see [Making a request](#making-a-request).  You must authenticate your request to pass body parameters. For more information; see [Authenticating](#authenticating).  #### [Query parameters](#query-parameters)  Query parameters allow you to control what data is returned for a request. These parameters are usually optional. The documentation for each GitHub REST API endpoint will describe any query parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["List public events" endpoint](/en/rest/activity/events#lis",true,35,0,15,"The retrieved documentation does not mention the correct API endpoint needed to list all repositories for a user's GitHub account (which would typically be GET /user/repos or GET /users/{username}/repos). Instead, the results focus on parameters in general, collaboration, and pull requests, none of which address the user's request. There is no clear pointer to the necessary endpoint, parameters, required authentication, or usage example for listing repositories. While there is generic advice on parameters and security, there is minimal actionable information for the specific task.",""
2025-10-09T12:39:42.669Z,github-api,"GitHub API","Get all issues for a specific repository","GitHub API list issues endpoint repository parameters",10,"e information; see [Keeping your API credentials secure](/en/rest/overview/keeping-your-api-credentials-secure).  ### [Parameters](#parameters)  Many API methods require or allow you to send additional information in parameters in your request. There are a few different types of parameters: Path parameters; body parameters; and query parameters.  #### [Path parameters](#path-parameters)  Path parameters modify the endpoint path. These parameters are required in your request. For more information; see [Path](#path).  #### [Body parameters](#body-parameters)  Body parameters allow you to pass additional data to the API. These parameters can be optional or required; depending on the endpoint. For example; a body parameter may allow you to specify an issue title when creating a new issue; or specify certain settings when enabling or disabling a feature. The documentation for each GitHub REST API endpoint will describe the body parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["Create an issue" endpoint](/en/rest/issues/issues#create-an-issue) requires that you specify a title for the new issue in your request. It also allows you to optionally specify other information; such as text to put in the issue body; users to assign to the new issue; or labels to apply to the new issue. For an example of a request that uses body parameters; see [Making a request](#making-a-request).  You must authenticate your request to pass body parameters. For more information; see [Authenticating](#authenticating).  #### [Query parameters](#query-parameters)  Query parameters allow you to control what data is returned for a request. These parameters are usually optional. The documentation for each GitHub REST API endpoint will describe any query parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["List public events" endpoint](/en/rest/activity/events#lis",true,30,0,10,"The retrieved documentation does not directly provide the correct endpoint for listing issues in a repository, which should be GET /repos/{owner}/{repo}/issues. Instead, it supplies generic information on path, body, and query parameters alongside example endpoints unrelated to listing issues (such as collaborators, pull requests, or repository content). There is no specific guidance, URL, parameter details, or example relevant to fetching all issues for a specific repository. Therefore, the documentation is mostly irrelevant to the user's question.",""
2025-10-09T12:39:49.276Z,snowflake-api,"Snowflake API","List all warehouses in my Snowflake account.","Snowflake API list warehouses endpoint documentation",10,"tabases/_database_/schemas/._schema_/tasks/_name_/complete\_graphs | _Deprecated. Use the replacement endpoint below._                                     | | GET /api/v2/databases/_database_/schemas/._schema_/tasks/_name_/complete-graphs  | Gets the graph runs that are completed for the task.                                  |  For reference documentation; see [Snowflake Task API reference](/developer-guide/snowflake-rest-api/reference/task.html).  # Manage users[¶](#manage-users "Link to this heading")  The Snowflake REST [User API](/developer-guide/snowflake-rest-api/reference/user.html) provides the following endpoints to manage Snowflake users:  __Snowflake REST User API endpoints[¶](#id1 "Link to this table")__ | Endpoint                                | Description                                                        | | --------------------------------------- | ------------------------------------------------------------------ | | POST /api/v2/users                      | Creates a Snowflake user.                                          | | GET /api/v2/users                       | Lists the users in the system.                                     | | GET /api/v2/users/{name}                | Fetches user information using the result of the DESCRIBE command. | | DELETE /api/v2/users/{name}             | Deletes a user with the given name.                                | | PUT /api/v2/users/{name}                | Creates a new; or alters an existing; user.                        | | GET /api/v2/users/{name}/grants         | List all grants to the user.                                       | | POST /api/v2/users/{name}/grants        | Grants a role to the specified user.                               | | POST /api/v2/users/{name}/grants:revoke | Revokes grants from the specified user.                            |  For reference documentation; see [Snowflake User API reference](/developer-guide/snowflake-rest-api/reference/user.html)  # Manage stages[¶](#",true,92,100,75,"The documentation contains the correct section for managing warehouses and clearly lists the required endpoint (GET /api/v2/warehouses) for listing all warehouses in a Snowflake account. It also notes this endpoint 'Returns a list of available warehouses,' which directly answers the user's question. However, the completeness is somewhat lacking as there are no details about authentication, required or optional parameters, response format, or example requests and responses—all important for a developer to successfully construct and use the API call. The documentation is very discoverable and points in the right direction, but would need to be supplemented with more specificity to be fully actionable.",""
2025-10-09T12:39:54.945Z,snowflake-api,"Snowflake API","Get all tables in the TESTING_SCHEMA in the snowflake SUPERGLUE_DATA database.","snowflake api list tables in schema SUPERGLUE_DATA TESTING_SCHEMA",10,"# Manage database schemas[¶](#manage-database-schemas "Link to this heading")  The Snowflake REST [Schema API](/developer-guide/snowflake-rest-api/reference/schema.html) provides the following endpoints to manage Snowflake schemas:  __Snowflake REST Schemas API endpoints[¶](#id1 "Link to this table")__ | Endpoint                                                | Description                                 | | ------------------------------------------------------- | ------------------------------------------- | | GET /api/v2/databases/_database_/schemas                | Lists the available schemas.                | | POST /api/v2/databases/_database_/schemas               | Creates a schema.                           | | POST /api/v2/databases/_database_/schemas/_name_/clone  | Clones a schema.                            | | POST /api/v2/databases/_database_/schemas/_name_/clone  | Undrop a schema.                            | | POST /api/v2/databases/_database_/schemas/_name_:undrop | Fetches a schema.                           | | PUT /api/v2/databases/_database_/schemas/_name_         | Creates a new or alters an existing schema. | | DELETE /api/v2/databases/_database_/schemas/_name_      | Deletes a schema.                           |  For reference documentation; see [Snowflake Schema API reference](/developer-guide/snowflake-rest-api/reference/schema.html).  # Manage roles[¶](#manage-roles "Link to this heading")  The Snowflake REST [Role API](/developer-guide/snowflake-rest-api/reference/role.html) provides the following endpoints to manage Snowflake roles:  __Snowflake REST Sessions API endpoints[¶](#id1 "Link to this table")__ | Endpoint                                                        | Description                                           | | --------------------------------------------------------------- | ----------------------------------------------------- | | POST /api/v2/roles                                              | Creates a role accord",true,40,20,10,"The retrieved documentation gives some context about managing schemas and tables with the Snowflake REST API and mentions several endpoints, but it does NOT clearly provide an endpoint for listing tables within a specific schema (i.e., there is no clear GET /api/v2/databases/{database}/schemas/{schema}/tables or similar listed). Endpoints for managing (creating, undropping, swapping) tables are partially visible but not for listing. There's no detail on required/optional parameters, path variables, or query structure needed to list tables in a schema. Most of the table-related endpoints shown are POST actions related to creating or modifying tables, not querying or listing them. The documentation is fragmented, lacks direct relevance to the user's 'list tables' request, and does not provide an actionable complete guide to make the desired API call.",""
2025-10-09T12:40:00.909Z,finwise-api,"Finwise API","Can you create a new account for me?","create account endpoint user registration API parameters",10,"                                                                                                               | | institutionUserIdnullable stringThe unique identifier of the data connection to the financial institution that the account is linked to.                                                                                                                                                                                                                                                                                                              | | datanullable objectAdditional data and configuration for the account.excludeFromBudgetbooleanWhether or not the account transactions should be excluded from the budget.excludeFromNetWorthbooleanWhether or not the account should be excluded from the net-worth.excludeTransactionsbooleanWhether or not the account transactions should completely ignored by FinWise.invertAmountsbooleanWhether or not the account balances should be inverted. |  THE ACCOUNT OBJECT  {    "id": "94d2f962-d4e3-4c99-ab47-8c941cea012a";    "createdAt": "2024-05-01T09:15:46.724Z";    "updatedAt": "2024-05-01T09:15:46.724Z";    "userId": "f472696c-47ac-4873-98cf-2a1069a1cf45";    "name": "My Credit Card Account";    "displayName": null;    "friendlyName": null;    "accountNumber": "275417291";    "currentBalance": {      "amount": -3432;      "currencyCode": "USD"    };    "availableBalance": null;    "accountType": null;    "archivedAt": null;    "isLinked": true;    "institutionId": "b8cb6f04-2f2b-440a-a55f-6708ebb57130";    "type": "credit";    "subType": "credit card";    "logoBase64": null;    "data": null;    "interestRate": null;    "interestRateType": null;    "lastPaymentDate": null;    "lastPaymentAmount": null;    "minimumAmountDue": null;    "originationDate": null;    "amountDue": null;    "originalLoanAmount": null;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Create an account  ### Request Body Attributes",true,60,65,55,"The retrieved documentation does mention a 'Create an account' section and includes a JSON object for the account resource. However, there is no clear API endpoint provided for creating an account; the only explicit POST endpoint shown is for creating an account balance, not for user registration or creating a new account. Also, the documentation does not cleanly list all required parameters, payload structure, or give a concrete code example for the user registration/account creation call. While there is some information on the account object fields, the essential step-by-step guidance and endpoint for account creation is missing or unclear, affecting both endpoint discovery and completeness.",""
2025-10-09T12:40:05.140Z,finwise-api,"Finwise API","What is my aggregated account balance?","aggregated account balance API endpoint parameters response structure",10,"ll;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Archive an account  Archive an account.  POST /accounts/:id/archive  import axios from 'axios'   const response = await axios({    method: 'post';    url: 'https://api.finwiseapp.io/accounts/94d2f962-d4e3-4c99-ab47-8c941cea012a/archive';    headers: {      'Content-Type': 'application/json';      Authorization: '<YOUR_API_KEY>';    };  })  RESPONSE  {    "id": "94d2f962-d4e3-4c99-ab47-8c941cea012a";    "createdAt": "2024-05-01T09:15:46.724Z";    "updatedAt": "2024-05-01T09:15:46.724Z";    "userId": "f472696c-47ac-4873-98cf-2a1069a1cf45";    "name": "My Credit Card Account";    "displayName": null;    "friendlyName": null;    "accountNumber": "275417291";    "currentBalance": {      "amount": -3432;      "currencyCode": "USD"    };    "availableBalance": null;    "accountType": null;    "archivedAt": "2024-04-29T00:03:34";    "isLinked": true;    "institutionId": "b8cb6f04-2f2b-440a-a55f-6708ebb57130";    "type": "credit";    "subType": "credit card";    "logoBase64": null;    "data": null;    "interestRate": null;    "interestRateType": null;    "lastPaymentDate": null;    "lastPaymentAmount": null;    "minimumAmountDue": null;    "originationDate": null;    "amountDue": null;    "originalLoanAmount": null;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Account Balances  This object represents an account balance; which is a snapshot of the balance of an account on a particular date.  ENDPOINTS  | POST | /account-balances             | Create an account balance      | | ---- | ----------------------------- | ------------------------------ | | GET  | /account-balances             | Get a list of account balances | | GET  | /account-balances/aggregated2 | Get aggregate account balances | | POST | /account-balances/:id/archive | Archive an account balance     |  ## The account balance object  ### Attributes  | idstringUnique identifier for the account balance",true,90,95,85,"The documentation clearly surfaces the relevant endpoint (GET /account-balances/aggregated2) for retrieving aggregated account balances. It provides example request syntax and describes its usage for aggregation, including filter parameters such as userId. The response structure is shown with example data making it practical for developers. Required/optional parameters for filtering are largely included. There is minor formatting noise and some redundancy with other endpoints (e.g., archive, create), but the key information needed to answer the user's question and implement the solution is present and easy to identify.",""

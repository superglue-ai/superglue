{
  "integrations": [
    {
      "id": "clickup",
      "name": "ClickUp",
      "urlHost": "https://api.clickup.com",
      "urlPath": "/api",
      "documentationUrl": "https://developer.clickup.com/reference/getauthorizeduser",
      "openApiUrl": "https://developer.clickup.com/openapi/clickup-api-v2-reference.json",
      "credentials": {
        "api_token": ""
      },
      "description": "Project management Software",
      "keywords": []
    },
    {
      "id": "stripe",
      "name": "Stripe",
      "urlHost": "https://api.stripe.com",
      "urlPath": "/v1",
      "documentationUrl": "https://stripe.com/docs/api",
      "credentials": {
        "secret_key": "",
        "publishable_key": ""
      },
      "description": "Payment processing and subscription management",
      "keywords": [
        "customers",
        "charges",
        "payment_intents",
        "products",
        "prices",
        "subscriptions",
        "invoices",
        "balance_transactions",
        "refunds",
        "checkout_sessions",
        "line_items",
        "payment_methods",
        "issuers",
        "plans",
        "setup_intents",
        "payouts",
        "transfers",
        "balance",
        "users",
        "emails"
      ]
    },
    {
      "id": "airtable",
      "name": "Airtable",
      "urlHost": "https://api.airtable.com",
      "urlPath": "/v0",
      "documentationUrl": "https://airtable.com/developers/web/api/introduction",
      "credentials": {
        "api_key": ""
      },
      "description": "Airtable API",
      "keywords": [
        "bases",
        "tables",
        "records",
        "fields",
        "views",
        "formulas",
        "attachments",
        "comments",
        "collaborators",
        "metadata",
        "schemas",
        "api key",
        "key"
      ]
    },
    {
      "id": "clockify",
      "name": "Clockify",
      "urlHost": "https://api.clockify.me",
      "urlPath": "/api/v1",
      "documentationUrl": "https://docs.clockify.me/",
      "credentials": {
        "api_key": ""
      },
      "description": "Clockify API",
      "keywords": [
        "time entries",
        "projects",
        "workspaces",
        "users",
        "tags",
        "clients",
        "estimates",
        "invoices",
        "payments"
      ]
    },
    {
      "id": "typeform",
      "name": "Typeform",
      "urlHost": "https://api.typeform.com/",
      "urlPath": "",
      "documentationUrl": "https://www.typeform.com/developers/get-started/",
      "credentials": {
        "personal_access_token": ""
      },
      "description": "Typeform API",
      "keywords": [
        "forms",
        "responses",
        "questions",
        "fields",
        "themes",
        "images",
        "workspaces",
        "logic jumps",
        "hidden fields",
        "variables",
        "calculations",
        "insights",
        "reports",
        "oauth"
      ]
    },
    {
      "id": "confluence",
      "name": "Confluence",
      "urlHost": "https://superglue-evals.atlassian.net",
      "urlPath": "/wiki/rest/api",
      "documentationUrl": "https://docs.atlassian.com/atlassian-confluence/REST/6.6.0/",
      "credentials": {
        "email": "",
        "api_token": ""
      },
      "description": "Confluence API",
      "keywords": [
        "spaces",
        "pages",
        "content",
        "attachments",
        "comments",
        "labels",
        "templates",
        "blueprints",
        "macros",
        "restrictions",
        "versions",
        "ancestors",
        "descendants",
        "children",
        "oauth"
      ]
    },
    {
      "id": "github",
      "name": "GitHub",
      "urlHost": "https://api.github.com",
      "urlPath": "",
      "documentationUrl": "https://docs.github.com/en/rest",
      "credentials": {
        "api_token": ""
      },
      "description": "Github API",
      "keywords": [
        "repositories",
        "issues",
        "pull_requests",
        "commits",
        "branches",
        "tags",
        "releases",
        "deployments",
        "check_runs",
        "actions_artifacts",
        "organizations",
        "packages",
        "collaborators",
        "gists",
        "milestones"
      ]
    },
    {
      "id": "linear",
      "name": "Linear",
      "urlHost": "https://api.linear.app/graphql",
      "urlPath": "",
      "documentationUrl": "https://linear.app/developers",
      "credentials": {
        "access_token": ""
      },
      "description": "Linear API",
      "keywords": [
        "issues",
        "projects",
        "cycles",
        "teams",
        "users",
        "comments",
        "labels",
        "milestones",
        "roadmaps",
        "workflows",
        "states",
        "graphql",
        "mutations",
        "queries",
        "api key"
      ]
    },
    {
      "id": "jira",
      "name": "JIRA",
      "urlHost": "https://superglue-team-test.atlassian.net",
      "urlPath": "rest/api/3",
      "documentationUrl": "https://developer.atlassian.com/cloud/jira/platform/rest/v3",
      "credentials": {
        "email": "",
        "api_token": ""
      },
      "description": "JIRA project management API",
      "keywords": [
        "issues",
        "projects",
        "boards",
        "sprints",
        "epics",
        "users",
        "workflows",
        "fields",
        "components",
        "versions",
        "priorities",
        "statuses",
        "comments",
        "attachments",
        "jql",
        "query",
        "search",
        "oauth"
      ]
    },
    {
      "id": "trello",
      "name": "Trello",
      "urlHost": "https://api.trello.com",
      "urlPath": "",
      "documentationUrl": "https://developer.atlassian.com/cloud/trello/rest",
      "openApiUrl": "https://developer.atlassian.com/cloud/trello/swagger.v3.json",
      "icon": "trello",
      "credentials": {
        "api_key": "",
        "api_token": ""
      },
      "description": "Trello API",
      "keywords": [
        "boards",
        "lists",
        "cards",
        "members",
        "labels",
        "checklists",
        "attachments",
        "comments",
        "actions",
        "organizations",
        "teams",
        "power-ups",
        "custom fields",
        "stickers",
        "api key"
      ]
    },
    {
      "id": "hubspot",
      "name": "HubSpot",
      "urlHost": "https://api.hubapi.com",
      "urlPath": "/crm/v3",
      "documentationUrl": "https://developers.hubspot.com/docs/api/overview",
      "credentials": {
        "private_app_token": ""
      },
      "description": "Customer relationship management API",
      "keywords": [
        "contacts",
        "companies",
        "deals",
        "tickets",
        "line_items",
        "products",
        "associations",
        "memberships"
      ]
    },
    {
      "id": "attio",
      "name": "Attio",
      "urlHost": "https://api.attio.com/v2",
      "urlPath": "",
      "documentationUrl": "https://docs.attio.com/rest-api/overview",
      "credentials": {
        "api_token": ""
      },
      "description": "Modern CRM with OpenAPI specification",
      "keywords": [
        "people",
        "objects",
        "records",
        "lists",
        "entries",
        "workspace_members",
        "notes",
        "tasks",
        "threads",
        "comments",
        "sorts",
        "api_slug",
        "attribute_type",
        "record_id",
        "workspace_id",
        "object_id"
      ]
    },
    {
      "id": "slack",
      "name": "Slack",
      "urlHost": "https://api.slack.com",
      "urlPath": "",
      "documentationUrl": "https://api.slack.com/docs",
      "credentials": {
        "bot_token": ""
      },
      "description": "Slack API",
      "keywords": [
        "channel",
        "conversation",
        "user",
        "file",
        "event",
        "message",
        "workflow_step",
        "workflow_published",
        "workflow_step_execute",
        "usergroup",
        "im",
        "mpim",
        "group",
        "check_run",
        "apps_permissions_resource"
      ]
    },
    {
      "id": "postgres-lego",
      "name": "LEGO Database",
      "urlHost": "placeholder",
      "urlPath": "placeholder",
      "documentationUrl": "",
      "credentials": {
        "connection_string": ""
      },
      "description": "PostgreSQL LEGO database for testing",
      "keywords": [
        "database",
        "sql",
        "postgres",
        "postgresql",
        "api key",
        "tables"
      ]
    },
    {
      "id": "timbuk2-shopify",
      "name": "Timbuk2-shopify",
      "urlHost": "https://www.timbuk2.com",
      "urlPath": "/products.json",
      "documentationUrl": "https://shopify.dev/docs/api/ajax/reference/product",
      "credentials": {},
      "description": "Public Shopify API demo",
      "keywords": [
        "products",
        "variants",
        "collections",
        "customers",
        "orders",
        "fulfillments",
        "inventory_items",
        "inventory_levels",
        "metafields",
        "price_rules",
        "discount_codes",
        "shipping_zones",
        "locations",
        "gift_cards",
        "product_images"
      ]
    },
    {
      "id": "asana",
      "name": "Asana",
      "urlHost": "https://app.asana.com/api",
      "urlPath": "",
      "documentationUrl": "https://developers.asana.com/docs",
      "credentials": {
        "personal_access_token": ""
      },
      "description": "Asana API",
      "keywords": [
        "tasks",
        "projects",
        "workspaces",
        "teams",
        "portfolios",
        "goals",
        "sections",
        "tags",
        "custom fields",
        "stories",
        "attachments",
        "followers",
        "assignee",
        "due dates",
        "query",
        "search",
        "api key"
      ]
    }
  ],
  "workflows": [
    {
      "id": "clickup-task-list",
      "name": "ClickUp Task List",
      "type": "retrieval",
      "instruction": "Get all tasks from the ClickUp task list. I want the final output to be a JSON object with the following structure: { \"tasks\": [ { \"name\": \"Task 1\", \"description\": \"Task 1 description\" } ]",
      "integrationIds": ["clickup"],
      "payload": {
        "listId": "901516361522"
      },
      "expectedData": {
        "tasks": [
          {
            "name": "First Task",
            "description": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua."
          }
        ]
      }
    },
    {
      "id": "clickup-all-lists",
      "name": "ClickUp All Lists",
      "type": "retrieval",
      "instruction": "Get all lists of all workspaces in ClickUp. Including Lists located in Folders and in Spaces. Return an object of this shape: { lists: Array<{ id: string, name: string, content: string, due_date: string | null, start_date: string | null }> }. Dates should have the format YYYY-MM-DD.",
      "integrationIds": ["clickup"],
      "payload": {},
      "expectedData": {
        "lists": [
          {
            "id": "901516249723",
            "name": "Projekt 1",
            "content": "Project one's text",
            "due_date": "2025-11-06",
            "start_date": "2025-10-15"
          },
          {
            "id": "901516249722",
            "name": "Projekt 2",
            "content": "",
            "due_date": null,
            "start_date": null
          },
          {
            "id": "901516361522",
            "name": "Test",
            "content": "",
            "due_date": null,
            "start_date": null
          }
        ]
      }
    },
    {
      "id": "clickup-all-comments-and-replies",
      "name": "ClickUp All Comments and Replies",
      "type": "retrieval",
      "instruction": "Get all comments and and for each comment its sub-comments for the task with the given taskId. Be aware that you need to iterate over the comments and get the sub-comments for each comment using another API call. Return an object of this shape: { comments: Array<{ id: string, authorId: string, authorName: string, text: string, parentCommentId: string | null, createdAt: string }> }. Convert the create date to YYYY-MM-DD.",
      "integrationIds": ["clickup"],
      "payload": {
        "taskId": "86c5y6t56"
      },
      "expectedData": {
        "comments": [
          {
            "id": "90150163803004",
            "authorId": "242688065",
            "authorName": "Max Mustermann",
            "text": "Second comment without replies\n",
            "parentCommentId": null,
            "createdAt": "2025-10-14"
          },
          {
            "id": "90150163802974",
            "authorId": "242688065",
            "authorName": "Max Mustermann",
            "text": "One comment\n",
            "parentCommentId": null,
            "createdAt": "2025-10-14"
          },
          {
            "id": "90150163802992",
            "authorId": "242688065",
            "authorName": "Max Mustermann",
            "text": "Sub comment\n",
            "parentCommentId": "90150163802974",
            "createdAt": "2025-10-14"
          }
        ]
      }
    },
    {
      "id": "clockify-time-entries",
      "name": "Clockify Time Entries",
      "type": "retrieval",
      "instruction": "Get all time entries for the authenticated user. I want the final output to be a JSON object with the following structure: { timeEntries: [{id: string,description: string, duration: number, // duration in MS }]}",
      "integrationIds": ["clockify"],
      "payload": {},
      "expectedData": {
        "timeEntries": [
          {
            "id": "68eaecf2a76c246ccca9f7ff",
            "description": "Buchhaltung",
            "duration": 3300000
          },
          {
            "id": "68eaed76c0a1d045ac1d72b1",
            "description": "Beratungsgespräch",
            "duration": 3600000
          },
          {
            "id": "68eaed55a76c246ccca9f9b7",
            "description": "Beratungsgespräch",
            "duration": 3600000
          }
        ]
      }
    },
    {
      "id": "clockify-projects",
      "name": "Clockify Projects",
      "type": "retrieval",
      "instruction": "Get all projects for the authenticated user's active workspace. I want the final output to be a JSON object with the following structure: { projects: [{id: string, name: string, note: string, billable: boolean, hourlyRate?: number, hourlyRateCurrency?: string }]}. ",
      "integrationIds": ["clockify"],
      "payload": {},
      "expectedData": {
        "projects": [
          {
            "id": "68eaed6cf78d45743dec5b43",
            "name": "Buchhaltung 2025",
            "note": "Some notes",
            "billable": false,
            "hourlyRate": 0,
            "hourlyRateCurrency": "USD"
          },
          {
            "id": "68eaed36c0a1d045ac1d6fbc",
            "name": "Marketing Project X",
            "note": "",
            "billable": true,
            "hourlyRate": 8000,
            "hourlyRateCurrency": "USD"
          }
        ]
      }
    },
    {
      "id": "clockify-projects-all-workspaces",
      "name": "Clockify Projects All Workspaces",
      "type": "retrieval",
      "instruction": "Get all projects the authenticated user has access to. I want the final output to be a JSON object with the following structure: { projects: [{id: string, name: string, note: string, billable: boolean, hourlyRate?: number, hourlyRateCurrency?: string }]}. ",
      "integrationIds": ["clockify"],
      "payload": {},
      "expectedData": {
        "projects": [
          {
            "id": "68eaed6cf78d45743dec5b43",
            "name": "Buchhaltung 2025",
            "note": "Some notes",
            "billable": false,
            "hourlyRate": 0,
            "hourlyRateCurrency": "USD"
          },
          {
            "id": "68eaed36c0a1d045ac1d6fbc",
            "name": "Marketing Project X",
            "note": "",
            "billable": true,
            "hourlyRate": 8000,
            "hourlyRateCurrency": "USD"
          }
        ]
      }
    },
    {
      "id": "typeform-get-all-forms",
      "name": "Typeform Get All Forms",
      "type": "retrieval",
      "instruction": "Get all forms with responses (question and answer) for the authenticated user. I want the final output to be a JSON object with the following structure: { forms: [{id: string, name: string, responses: Array<{id: string, answers: Array<{question: string, answer: string}>, submittedAt: number // unix timestamp}>, createdAt: number // unix timestamp }], total: number}. Please make sure to include the questions and answers for each response.",
      "integrationIds": ["typeform"],
      "payload": {},
      "expectedData": {
        "forms": [
          {
            "id": "lyyDJUcC",
            "name": "Coffee Shop Applications",
            "responses": [
              {
                "id": "zrf8owa8sa9aq94pd6rmdzrf8ow4jewu",
                "answers": [
                  {
                    "question": "What is your full name?",
                    "answer": "Peter Mustermann"
                  },
                  {
                    "question": "Which position are you applying for?",
                    "answer": "Cashier"
                  },
                  {
                    "question": "Please share a brief overview of your work experience.",
                    "answer": "Peter's text"
                  },
                  {
                    "question": "Why would you like to work at our coffee shop?",
                    "answer": "Random text"
                  }
                ],
                "submittedAt": 1760610533
              },
              {
                "id": "gpau4osqcuahhim7hngpauukv3090uf6",
                "answers": [
                  {
                    "question": "What is your full name?",
                    "answer": "Max Mustermann"
                  },
                  {
                    "question": "What is your email address?",
                    "answer": "evals@superglue.ai"
                  },
                  {
                    "question": "Which position are you applying for?",
                    "answer": "Barista"
                  },
                  {
                    "question": "Please share a brief overview of your work experience.",
                    "answer": "Test Text here"
                  },
                  {
                    "question": "Why would you like to work at our coffee shop?",
                    "answer": "Some text here"
                  }
                ],
                "submittedAt": 1760610498
              }
            ],
            "createdAt": 1760610392
          },
          {
            "id": "OB4nenxi",
            "name": "Just empty",
            "responses": [],
            "createdAt": 1760229402
          }
        ],
        "total": 2
      }
    },
    {
      "id": "typeform-get-form-by-id",
      "name": "Typeform Get Form By Id",
      "type": "retrieval",
      "instruction": "Get the form with the given id. I want the final output to be a JSON object with the following structure: {id: string, name: string, responses: Array<{id: string, answers: Array<{question: string, answer: string}>, submittedAt: number // unix timestamp}>, createdAt: number // unix timestamp }. Please make sure to include the questions and answers for each response.",
      "integrationIds": ["typeform"],
      "payload": {
        "formId": "lyyDJUcC"
      },
      "expectedData": {
        "id": "lyyDJUcC",
        "name": "Coffee Shop Applications",
        "responses": [
          {
            "id": "zrf8owa8sa9aq94pd6rmdzrf8ow4jewu",
            "answers": [
              {
                "question": "What is your full name?",
                "answer": "Peter Mustermann"
              },
              {
                "question": "Which position are you applying for?",
                "answer": "Cashier"
              },
              {
                "question": "Please share a brief overview of your work experience.",
                "answer": "Peter's text"
              },
              {
                "question": "Why would you like to work at our coffee shop?",
                "answer": "Random text"
              }
            ],
            "submittedAt": 1760610533
          }
        ],
        "createdAt": 1760610392
      }
    },
    {
      "id": "typeform-get-all-workspaces",
      "name": "Typeform Get All Workspaces",
      "type": "retrieval",
      "instruction": "Get all workspaces for the authenticated user. I want the final output to be a JSON object with the following structure: { workspaces: [{id: string, name: string, numberOfForms: number}] }.",
      "integrationIds": ["typeform"],
      "payload": {},
      "expectedData": {
        "workspaces": [
          {
            "id": "QDctaF",
            "name": "My workspace",
            "numberOfForms": 2
          }
        ]
      }
    },
    {
      "id": "confluence-get-all-spaces",
      "name": "Confluence Get All Spaces",
      "type": "retrieval",
      "instruction": "Get all spaces for the authenticated user. I want the final output to be a JSON object with the following structure: { spaces: [{id: number, type: string, name: string, archived: boolean}] }. Please use /wiki/rest/api/... not  rest/api/v2/...",
      "integrationIds": ["confluence"],
      "payload": {},
      "expectedData": {
        "spaces": [
          {
            "id": 294916,
            "type": "knowledge_base",
            "name": "Docs",
            "archived": false
          },
          {
            "id": 196611,
            "type": "personal",
            "name": "Max Mustermann",
            "archived": false
          },
          {
            "id": 98312,
            "type": "onboarding",
            "name": "Projektmanagement",
            "archived": true
          }
        ]
      }
    },
    {
      "id": "confluence-get-page-content",
      "name": "Confluence Get Page Content",
      "type": "retrieval",
      "instruction": "Get the content of the page with the given id. I want the final output to be a JSON object with the following structure: { content: string }. ",
      "integrationIds": ["confluence"],
      "payload": {
        "pageId": "163855"
      },
      "expectedData": {
        "content": "<p>Intern Onboarding …</p>"
      }
    },
    {
      "id": "confluence-get-all-pages-of-space",
      "name": "Confluence Get All Pages Of Space",
      "type": "retrieval",
      "instruction": "Get all pages for the given space id. I want the final output to be a JSON object with the following structure: { pages: [{id: string, title: string, content: string}] }. ",
      "integrationIds": ["confluence"],
      "payload": {
        "spaceId": "294916"
      },
      "expectedData": {
        "pages": [
          {
            "id": "163848",
            "title": "Company Guidelines",
            "content": "<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut</p>"
          },
          {
            "id": "295032",
            "title": "Docs",
            "content": "<p>Overview Page</p>"
          },
          {
            "id": "163855",
            "title": "Interns",
            "content": "<p>Intern Onboarding …</p>"
          },
          {
            "id": "295094",
            "title": "IT Service Desk",
            "content": "<p>Text about the IT Service Desk</p>"
          }
        ]
      }
    },
    {
      "id": "github-list-repos",
      "name": "GitHub List Repositories",
      "type": "retrieval",
      "instruction": "List all repositories for the authenticated user. I want the final output to be a JSON object with the following structure: { repositories: [{id: number, name: string, isPublic: boolean}] }. ",
      "integrationIds": ["github"],
      "payload": {},
      "expectedData": {
        "repositories": [
          {
            "id": 1074517465,
            "name": "congenial-tribble",
            "isPublic": false
          },
          {
            "id": 1074517568,
            "name": "expert-octo-doodle",
            "isPublic": false
          },
          {
            "id": 1074520812,
            "name": "strapi-cloud-template-blog-4b5423dbba",
            "isPublic": true
          },
          {
            "id": 1074517305,
            "name": "Test1",
            "isPublic": false
          },
          {
            "id": 1074517689,
            "name": "vigilant-octo-lamp",
            "isPublic": false
          }
        ]
      }
    },
    {
      "id": "github-get-user",
      "name": "GitHub Get User",
      "type": "retrieval",
      "instruction": "Get the user information for the authenticated user. I want the final output to be a JSON object with the following structure: { user: {id: number, username: string, profilePictureUrl: string | null, url: string, createdAt: string } }. ",
      "integrationIds": ["github"],
      "payload": {},
      "expectedData": {
        "user": {
          "id": 237506962,
          "username": "Evals304",
          "profilePictureUrl": "https://avatars.githubusercontent.com/u/237506962?v=4",
          "url": "https://github.com/Evals304",
          "createdAt": "2025-10-12T00:13:19Z"
        }
      }
    },
    {
      "id": "github-get-user-pull-requests",
      "name": "GitHub Get User's Pull Requests",
      "type": "retrieval",
      "instruction": "Get all pull requests for the authenticated user. I want the final output to be a JSON object with the following structure: { pullRequests: [{id: number, title: string, url: string, updatedAt: string, createdAt: string }] }. ",
      "integrationIds": ["github"],
      "payload": {},
      "expectedData": {
        "pullRequests": [
          {
            "id": 3527944071,
            "title": "Test something",
            "url": "https://github.com/Evals304/congenial-tribble/pull/1",
            "updatedAt": "2025-10-18T01:46:27Z",
            "createdAt": "2025-10-18T01:46:27Z"
          },
          {
            "id": 3527943775,
            "title": "Update README.md",
            "url": "https://github.com/Evals304/vigilant-octo-lamp/pull/1",
            "updatedAt": "2025-10-18T01:45:59Z",
            "createdAt": "2025-10-18T01:45:59Z"
          }
        ]
      }
    },
    {
      "id": "linear-get-all-issues",
      "name": "Linear Get All Issues",
      "type": "retrieval",
      "instruction": "Get all issues. I want the final output to be a JSON object with the following structure: { issues: [{id: string, title: string }] }. ",
      "integrationIds": ["linear"],
      "payload": {},
      "expectedData": {
        "issues": [
          {
            "id": "91d119b6-8c91-436e-9986-0198cf30cd8e",
            "title": "Third"
          },
          {
            "id": "4ba8526b-40b1-42cb-9cd4-9b273ed82eb7",
            "title": "Second"
          },
          {
            "id": "ba4a3f19-45af-4597-b165-bb2cd37aa0ec",
            "title": "First"
          }
        ]
      }
    },
    {
      "id": "linear-get-issue-by-id",
      "name": "Linear Get Issue By Id",
      "type": "retrieval",
      "instruction": "Get the issue with the given id. I want the final output to be a JSON object with the following structure: { issue: {id: string, title: string }] }. ",
      "integrationIds": ["linear"],
      "payload": {
        "issueId": "91d119b6-8c91-436e-9986-0198cf30cd8e"
      },
      "expectedData": {
        "issue": {
          "id": "91d119b6-8c91-436e-9986-0198cf30cd8e",
          "title": "Third"
        }
      }
    },
    {
      "id": "linear-get-all-projects",
      "name": "Linear Get All Projects",
      "type": "retrieval",
      "instruction": "Get all projects. I want the final output to be a JSON object with the following structure: { projects: [{id: string, name: string }] }. ",
      "integrationIds": ["linear"],
      "payload": {},
      "expectedData": {
        "projects": [
          {
            "id": "7c811f73-677a-4040-80be-0ff374f951b2",
            "name": "Empty 2"
          },
          {
            "id": "fb067dcf-0867-4fbb-b409-4565411015f2",
            "name": "Empty1"
          }
        ]
      }
    },
    {
      "id": "lego-inventory-analysis",
      "name": "LEGO Database Inventory Analysis",
      "type": "retrieval",
      "instruction": "Query the LEGO database to find all LEGO themes. Please use the pagination payload to get the next page of results. I want the final output to be a JSON object with the following structure: { themes: [{id: string, name: string}]}. ",
      "integrationIds": ["postgres-lego"],
      "payload": {
        "page": 2,
        "pageSize": 10
      },
      "expectedData": {
        "themes": [
          {
            "id": "11",
            "name": "Off-Road"
          },
          {
            "id": "12",
            "name": "Race"
          },
          {
            "id": "13",
            "name": "Riding Cycle"
          },
          {
            "id": "14",
            "name": "Robot"
          },
          {
            "id": "15",
            "name": "Traffic"
          },
          {
            "id": "16",
            "name": "RoboRiders"
          },
          {
            "id": "17",
            "name": "Speed Slammers"
          },
          {
            "id": "18",
            "name": "Star Wars"
          },
          {
            "id": "19",
            "name": "Supplemental"
          },
          {
            "id": "20",
            "name": "Throwbot Slizer"
          }
        ]
      }
    },
    {
      "id": "timbuk2-product-analysis",
      "name": "Timbuk2 Product Analysis",
      "type": "retrieval",
      "instruction": "Get all products from Timbuk2. Please make sure you get all products by using page and limit. I want the final output to be a JSON object with the following structure: { products: string[] }. ",
      "integrationIds": ["timbuk2-shopify"],
      "payload": {},
      "expectedData": {
        "products": [
          "Non-Repairable Return",
          "Non-Repairable Recycle",
          "Non-Payment Return",
          "Non-Payment Recycle",
          "Flight Crossbody Sling Bag",
          "Flight Crossbody Satchel",
          "Flight Convertible Tote Backpack",
          "Flight Backpack",
          "Flight Classic Messenger Bag",
          "Miles Chest Pack",
          "Water Resistant Tuck Backpack",
          "Water Resistant Prospect Backpack",
          "Water Resistant Mini Prospect Backpack",
          "Water Resistant Division Backpack",
          "Castle Crossbody Sling",
          "Stark Messenger Bag",
          "Spirit Laptop Backpack",
          "Spark Mini Pack",
          "Flight Classic Messenger Bag",
          "Replacement Product",
          "Water-Resistant Alcatraz Backpack",
          "Reflective Alcatraz Backpack",
          "Eco Ripstop Alcatraz Backpack",
          "Eco Cordura Alcatraz Backpack",
          "Flight Crossbody Sling Bag",
          "Flight Crossbody Satchel",
          "Flight Convertible Tote Backpack",
          "Flight Backpack",
          "Custom Classic Messenger Bag",
          "Classic Messenger Bag",
          "Wingman Travel Backpack Duffel",
          "Custom Strap Pad",
          "Classic Messenger Bag",
          "Custom Classic Messenger Bag",
          "Warranty Recycle",
          "Luggage Roller Skate Wheel Assembly",
          "Luggage Roller Skate Wheel",
          "Quick Attach Thin SR Buckle",
          "Quick Attach Tensionlock",
          "Quick Attach Nemo Buckle Male",
          "Canvas Shop Tote Bag",
          "Canvas Shop Tote Bag",
          "Utility Organization Pouch",
          "Utility Laptop Sleeve",
          "Closer Laptop Briefcase",
          "Stealth Folio Organizer",
          "Scholar Convertible Tote Backpack",
          "Parkside Laptop Backpack 2.0",
          "Custom Alcatraz Laptop Backpack",
          "Packable Travel Tote",
          "Custom Prospect Laptop Backpack",
          "Custom Mini Prospect Backpack",
          "Custom Division Laptop Backpack",
          "Custom Tuck Backpack",
          "Catapult Sling",
          "Custom Tuck Backpack",
          "Authority Laptop Backpack Deluxe",
          "Transit Dopp Kit",
          "Commute Messenger Bag 2.0",
          "Spirit Laptop Backpack",
          "Tuck Laptop Backpack",
          "Tuck Laptop Backpack",
          "Tandem Pannier",
          "Transit Dopp Kit",
          "Slacker Chest Pack",
          "Vapor Sling Crossbody Bag",
          "Muttmover Luxe Backpack",
          "Wingman Travel Backpack Duffel",
          "Agent Crossbody Bag",
          "Packable Travel Tote",
          "Vapor Convertible Tote Backpack",
          "Hero Laptop Backpack",
          "Scholar Convertible Tote Backpack",
          "Stealth Folio Organizer",
          "Tuck Laptop Backpack",
          "Scheme Convertible Briefcase Backpack",
          "Scheme Convertible Briefcase Backpack",
          "Lane Commuter Backpack",
          "Slacker Chest Pack",
          "Player Duffel Bag",
          "Player Duffel Bag",
          "Closer Laptop Briefcase",
          "Commute Messenger Bag 2.0",
          "Never Check Expandable Backpack",
          "Magnetic Clip Set",
          "Never Check Expandable Backpack",
          "Division Laptop Backpack Deluxe",
          "Rogue Laptop Backpack 2.0",
          "Quik Attach Stealth Male Clip",
          "Spire Laptop Backpack 2.0",
          "Division Laptop Backpack Deluxe",
          "Spark Micro Pack",
          "Parkside Laptop Backpack 2.0",
          "Foundry Pack",
          "Rascal Belt Bag",
          "Custom Division Laptop Backpack",
          "Impulse Travel Backpack",
          "Q Laptop Backpack 2.0",
          "Q Laptop Backpack 2.0",
          "Especial Stash Messenger Bag",
          "Especial Scope Expandable Backpack",
          "$35 Repair Fee",
          "Repair Fee Waived",
          "$25 Repair Fee",
          "3 Way Accessory Case",
          "Reflector Tail",
          "Standard Pannier Bracket",
          "Standard Cam Buckle Female",
          "Authority Laptop Backpack Deluxe",
          "Foundry Pack",
          "Copilot Luggage Roller",
          "Custom Alcatraz Laptop Backpack",
          "Custom Prospect Laptop Backpack",
          "Custom Mini Prospect Backpack",
          "eGift Card",
          "Parker Commuter Backpack",
          "Clark Commuter Backpack",
          "Robin Commuter Backpack",
          "Pannier System Type T",
          "Roller Extending Handle",
          "Standard CAM Buckle Male",
          "Single Gate Keeper",
          "Day Pack Puller",
          "Universal Shoulder Strap",
          "Sternum Straps for Backpacks",
          "Bag Silencer Strips",
          "Cross Strap Without Clips",
          "Cross Strap With Clips",
          "Male Stealth",
          "Male Clip",
          "Female Clip",
          "Quick Attach Stealth Female",
          "Triangle Hook",
          "Classic Cam Buckle Male",
          "Super Strap Pad",
          "Copilot Luggage Roller",
          "Stealth Folio Organizer"
        ]
      }
    }
  ],
  "enabledWorkflows": "all",
  "settings": {
    "runOneShotMode": true,
    "runSelfHealingMode": true,
    "attemptsEachMode": 2
  }
}

{
    "integrations": {
        "hubspot": {
            "id": "hubspot",
            "name": "HubSpot",
            "urlHost": "https://api.hubapi.com",
            "urlPath": "/crm/v3",
            "documentationUrl": "https://developers.hubspot.com/docs/api/overview",
            "credentials": {
                "private_app_token": ""
            },
            "description": "Customer relationship management API"
        },
        "stripe": {
            "id": "stripe",
            "name": "stripe",
            "urlHost": "https://api.stripe.com",
            "urlPath": "/v1",
            "documentationUrl": "https://stripe.com/docs/api",
            "credentials": {
                "secret_key": "",
                "publishable_key": ""
            },
            "description": "Payment processing and subscription management"
        },
        "shopify": {
            "id": "shopify",
            "name": "Shopify",
            "urlHost": "https://www.timbuk2.com",
            "urlPath": "/products.json",
            "documentationUrl": "https://shopify.dev/docs/api/ajax/reference/product",
            "credentials": {},
            "description": "Public Shopify API demo"
        },
        "jira": {
            "id": "jira",
            "name": "JIRA",
            "urlHost": "https://superglue-team-test.atlassian.net",
            "urlPath": "/rest/api/3",
            "documentationUrl": "https://developer.atlassian.com/cloud/jira/platform/rest/v3",
            "credentials": {
                "email": "michael@superglue.ai",
                "api_token": ""
            },
            "description": "JIRA project management API"
        },
        "attio": {
            "id": "attio",
            "name": "Attio",
            "urlHost": "https://api.attio.com/v2",
            "urlPath": "",
            "documentationUrl": "https://docs.attio.com/rest-api/overview",
            "credentials": {
                "api_token": ""
            },
            "description": "Modern CRM with OpenAPI specification"
        },
        "supabase": {
            "id": "supabase",
            "name": "Supabase",
            "urlHost": "https://fmcghdcrnnsdbtdriycm.supabase.co",
            "urlPath": "/rest/v1",
            "documentationUrl": "https://supabase.com/dashboard/project/fmcghdcrnnsdbtdriycm/api",
            "credentials": {
                "password": "",
                "public_api_key": "",
                "secret_key": ""
            },
            "description": "Backend database for multi-workflow setups"
        },
        "twilio": {
            "id": "twilio",
            "name": "Twilio",
            "urlHost": "https://api.twilio.com/",
            "urlPath": "",
            "documentationUrl": "https://www.twilio.com/docs/api",
            "credentials": {
                "account_sid": "",
                "auth_token": ""
            },
            "description": "Phone and SMS communications API"
        },
        "sendgrid": {
            "id": "sendgrid",
            "name": "SendGrid",
            "urlHost": "https://api.sendgrid.com/",
            "urlPath": "/v3",
            "documentationUrl": "https://docs.sendgrid.com/api-reference",
            "credentials": {
                "api_key": ""
            },
            "description": "Email delivery and marketing API"
        },
        "posthog": {
            "id": "posthog",
            "name": "PostHog",
            "urlHost": "https://us.posthog.com/",
            "urlPath": "",
            "documentationUrl": "https://posthog.com/docs/api",
            "credentials": {
                "api_key": ""
            },
            "description": "User Analytics API"
        },
        "github": {
            "id": "github",
            "name": "GitHub",
            "urlHost": "https://api.github.com",
            "urlPath": "",
            "documentationUrl": "https://docs.github.com/en/rest",
            "credentials": {
                "api_key": ""
            },
            "description": "GitHub API"
        },
        "gitlab": {
            "id": "gitlab",
            "name": "GitLab",
            "urlHost": "https://gitlab.com/api/v4",
            "urlPath": "",
            "documentationUrl": "https://docs.gitlab.com/ee/api/rest/index.html",
            "credentials": {
                "api_key": ""
            },
            "description": "GitLab API"
        },
        "slack": {
            "id": "slack",
            "name": "Slack",
            "urlHost": "https://api.slack.com",
            "urlPath": "",
            "documentationUrl": "https://api.slack.com/docs",
            "credentials": {
                "bot_token": ""
            },
            "description": "Slack API"
        },
        "bitbucket": {
            "id": "bitbucket",
            "name": "Bitbucket",
            "urlHost": "https://api.bitbucket.org",
            "urlPath": "/2.0",
            "documentationUrl": "https://developer.atlassian.com/cloud/bitbucket/rest",
            "credentials": {
                "api_token": "",
                "email": ""
            },
            "description": "Bitbucket API"
        },
        "discord": {
            "id": "discord",
            "name": "Discord",
            "urlHost": "https://discord.com/api",
            "urlPath": "",
            "documentationUrl": "https://discord.com/developers/docs/reference",
            "credentials": {
                "bot_token": "",
                "guild_id": ""
            },
            "description": "Discord API"
        },
        "asana": {
            "id": "asana",
            "name": "Asana",
            "urlHost": "https://app.asana.com/api",
            "urlPath": "",
            "documentationUrl": "https://developers.asana.com/docs",
            "credentials": {
                "personal_access_token": ""
            },
            "description": "Asana API"
        },
        "notion": {
            "id": "notion",
            "name": "Notion",
            "urlHost": "https://api.notion.com",
            "urlPath": "",
            "documentationUrl": "https://developers.notion.com",
            "credentials": {
                "internal_integration_secret": ""
            },
            "description": "Notion API"
        },
        "huggingface": {
            "id": "huggingface",
            "name": "Huggingface",
            "urlHost": "https://huggingface.co",
            "urlPath": "",
            "documentationUrl": "https://huggingface.co/docs/hub/en/api",
            "credentials": {
                "access_token": ""
            },
            "description": "Huggingface API"
        },
        "square": {
            "id": "square",
            "name": "Square",
            "urlHost": "https://connect.squareup.com",
            "urlPath": "",
            "documentationUrl": "https://developer.squareup.com/docs",
            "credentials": {
                "sandbox_access_token": ""
            },
            "description": "Square API"
        },
        "airtable": {
            "id": "airtable",
            "name": "Airtable",
            "urlHost": "https://api.airtable.com",
            "urlPath": "/v0",
            "documentationUrl": "https://airtable.com/developers/web/api/introduction",
            "credentials": {
                "personal_access_token": ""
            },
            "description": "Airtable database and spreadsheet API"
        },
        "snowflake": {
            "id": "snowflake",
            "name": "Snowflake",
            "urlHost": "https://IUESJWF-HQ27033.snowflakecomputing.com",
            "urlPath": "/api/v2",
            "documentationUrl": "https://docs.snowflake.com/en/developer-guide/sql-api/index",
            "credentials": {
                "personal_access_token": ""
            },
            "description": "Snowflake cloud data platform SQL API"
        },
        "intercom": {
            "id": "intercom",
            "name": "Intercom",
            "urlHost": "https://api.intercom.io",
            "urlPath": "",
            "documentationUrl": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis",
            "credentials": {
                "access_token": ""
            },
            "description": "Intercom API"
        }
    },
    "workflows": {
        "hubspot-crm-workflow": {
            "id": "hubspot-crm-workflow",
            "name": "HubSpotCRM Workflow",
            "instruction": "Get all contacts with lifecycle stage: Marketing Qualified Lead from HubSpot. Filter them to only include contacts created between the input payload date and the payload date + 100 days. I want the final output to be a JSON object with the following structure: { \"contacts\": [ { \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" } ]",
            "integrationIds": [
                "hubspot"
            ],
            "payload": {
                "date": "2025-06-01"
            }
        },
        "stripe-revenue-analytics": {
            "id": "stripe-revenue-analytics",
            "name": "Stripe Revenue Analytics Dashboard",
            "instruction": "Fetch all Stripe subscriptions createdin the 3 months following the payload date, group by customer and calculate my monthly recurring revenue",
            "integrationIds": [
                "stripe"
            ],
            "payload": {
                "date": "2025-06-01"
            }
        },
        "jira-sprint-health": {
            "id": "jira-sprint-health",
            "name": "JIRA Sprint Health Check",
            "instruction": "Get all issues from the current active sprint, categorize them by status, calculate completion percentage, and identify any issues marked as Blocked or High Priority that are still in progress. Empty response indicates a failure.",
            "integrationIds": [
                "jira"
            ],
            "payload": {}
        },
        "attio-people-retrieval": {
            "id": "attio-people-retrieval",
            "name": "Attio People Retrieval",
            "instruction": "Retrieve all people records from Attio CRM that have a non-empty email address. Return their names, email addresses and descriptions. I want the final output to be a JSON object with the following structure: { \"people\": [ { \"name\": \"John Doe\", \"email\": \"john.doe@example.com\", \"description\": \"John Doe is a software engineer at Example Inc.\" } ]",
            "integrationIds": [
                "attio"
            ],
            "payload": {}
        },
        "timbuk2-product-analysis": {
            "id": "timbuk2-product-analysis",
            "name": "Timbuk2 Product Analysis",
            "instruction": "Get all products from Timbuk2 with automatic pagination. This is a public endpoint.",
            "integrationIds": [
                "shopify"
            ],
            "payload": {}
        },
        "posthog-analytics": {
            "id": "posthog-analytics",
            "name": "PostHog Analytics",
            "instruction": "Get the project IDs of all projects in my posthog account. For the first project, count the number of events in the last 30 days. Use the posthog query api. I want the final output to be a JSON object with the following structure: { \"project_id\": \"xxx\", \"event_count\": xxx }",
            "integrationIds": [
                "posthog"
            ],
            "payload": {}
        },
        "twilio-sms-analysis": {
            "id": "twilio-sms-analysis",
            "name": "Twilio SMS Communication Analysis",
            "instruction": "Make sure you add a proper authorization request header that includes my SID and auth token. Get all SMS messages sent from my Twilio account, count how many were delivered vs failed vs pending by analyzing the status field, and calculate the success rate percentage. Return the results as a JSON object with total_messages, delivered_count, failed_count, pending_count, and success_rate_percent",
            "integrationIds": [
                "twilio"
            ],
            "payload": {}
        },
        "sendgrid-test-email": {
            "id": "sendgrid-test-email",
            "name": "SendGrid Test Email Send",
            "instruction": "Send a test email via SendGrid to verify the integration is working. Use the email address, subject, and message content from the payload to send a personalized test email and return confirmation of successful delivery",
            "integrationIds": [
                "sendgrid"
            ],
            "payload": {
                "to_email": "michael@superglue.ai",
                "from_email": "michael@superglue.ai",
                "subject": "Testing Integrations with Sendgrid ABC",
                "message_content": "This is test email 1",
                "content_type": "text/plain"
            }
        },
        "github-list-repos": {
            "id": "github-list-repos",
            "name": "GitHub List Repos",
            "instruction": "List all repositories in my GitHub account. Return the results as a JSON object with the following structure: { \"repos\": [ { \"name\": \"repo1\", \"description\": \"description1\" } ]",
            "integrationIds": [
                "github"
            ],
            "payload": {}
        },
        "gitlab-list-projects": {
            "id": "gitlab-list-projects",
            "name": "GitLab List Projects",
            "instruction": "List all projects in my GitLab account. Return the results as a JSON object with the following structure: { \"projects\": [ { \"name\": \"project1\", \"description\": \"description1\" } ]",
            "integrationIds": [
                "gitlab"
            ],
            "payload": {}
        },
        "slack-dm-workflow": {
            "id": "slack-dm-workflow",
            "name": "Slack DM Test Workflow",
            "instruction": "Find the Slack user ID for the email address in the payload, then send them a direct message with the specified content.",
            "integrationIds": [
                "slack"
            ],
            "payload": {
                "email": "michael@superglue.ai",
                "message": "Hi, this is superglue-bot testing Slack workflows!"
            }
        },
        "bitbucket-repos": {
            "id": "bitbucket-repos",
            "name": "Bitbucket Repository Analysis",
            "instruction": "List all projects in my Bitbucket account. Return the results as a JSON object with the following structure: { \"projects\": [ { \"name\": \"project1\", \"description\": \"description1\" } ]",
            "integrationIds": [
                "bitbucket"
            ],
            "payload": {}
        },
        "discord-server-analysis-dm": {
            "id": "discord-server-analysis-dm",
            "name": "Discord Server Analysis and DM",
            "instruction": "Get all channels from my Discord server, analyze the channel structure, then find the user 'michaelfuest_89135' and send them a direct message with a summary of the server channels found. Return both the channel list and confirmation of the DM sent",
            "integrationIds": [
                "discord"
            ],
            "payload": {
                "guild_id": "1389218511934722080",
                "target_username": "michaelfuest_89135",
                "dm_message": "Hi! I just analyzed your Discord server and found the following channels. This is a test from the superglue Discord integration bot!"
            }
        },
        "asana-tasks": {
            "id": "asana-tasks",
            "name": "Asana Tasks",
            "instruction": "First, find the project ID by searching for the project name in the payload across all my workspaces. Then get all tasks assigned to me in that project, analyze my workload by completion status and return a summary of my current tasks including completion percentages.",
            "integrationIds": [
                "asana"
            ],
            "payload": {
                "project_name": "Product Feature Roadmap"
            }
        },
        "notion-duplicate-email-analysis": {
            "id": "notion-duplicate-email-analysis",
            "name": "Notion Duplicate Email Analysis",
            "instruction": "Query the superglue Database in Notion to retrieve all records with email data, analyze the email column to identify duplicate email addresses, count the total number of duplicates, and return a list of the duplicate emails along with how many times each appears",
            "integrationIds": [
                "notion"
            ],
            "payload": {
                "database_name": "superglue Database"
            }
        },
        "huggingface-model-metadata": {
            "id": "huggingface-model-metadata",
            "name": "Hugging Face Model Names",
            "instruction": "I want to retrieve popular public models from Hugging Face. Add a limit query parameter to limit the number of models to no more than 10. For each model, extract the model name and the list of file names available in that model. Return the results as a JSON object in the following format: { \"models\": [ { \"model_name\": \"...\", \"file_names\": [\"file1\", \"file2\", ...] }, ... ] }",
            "integrationIds": [
                "huggingface"
            ],
            "payload": {}
        },
        "square-customer-directory": {
            "id": "square-customer-directory",
            "name": "Square Customer Directory Export",
            "instruction": "Retrieve all customers from my Square customer directory. Extract their names and email addresses, and return a JSON object with only two properties: customerNames as an array of customer names and customer_emails as an array of corresponding email addresses",
            "integrationIds": [
                "square"
            ],
            "payload": {}
        },
        "airtable-test-data-retrieval": {
            "id": "airtable-test-data-retrieval",
            "name": "Airtable Test Data Management Records",
            "instruction": "Retrieve all tables in the Test Data Management workspace. Return the table names and their field names in a structured format.",
            "integrationIds": [
                "airtable"
            ],
            "payload": {
                "workspace_name": "Test Data Management"
            }
        },
        "snowflake-list-tables": {
            "id": "snowflake-list-tables",
            "name": "Snowflake List All Tables",
            "instruction": "List all tables from the TESTING_SCHEMA in the snowflake SUPERGLUE_DATA database. Return the results as a JSON object with table names, table column names and the first row of each table",
            "integrationIds": [
                "snowflake"
            ],
            "payload": {}
        },
        "supabase-list-table-schemas": {
            "id": "supabase-list-table-schemas",
            "name": "Supabase List Table Schemas",
            "instruction": "List all tables from my Supabase database along with their column names, data types, and constraints. Return the results as a JSON object with table names and their schema definitions including column names, types, nullable status, and any primary/foreign key relationships.",
            "integrationIds": [
                "supabase"
            ],
            "payload": {}
        }
    },
    "workflowsToRank": [
        "hubspot-crm-workflow",
        "stripe-revenue-analytics",
        "jira-sprint-health",
        "attio-people-retrieval",
        "timbuk2-product-analysis",
        "supabase-list-table-schemas",
        "posthog-analytics",
        "twilio-sms-analysis",
        "sendgrid-test-email",
        "github-list-repos",
        "gitlab-list-projects",
        "slack-dm-workflow",
        "bitbucket-repos",
        "discord-server-analysis-dm",
        "asana-tasks",
        "notion-duplicate-email-analysis",
        "huggingface-model-metadata",
        "square-customer-directory",
        "airtable-test-data-retrieval",
        "snowflake-list-tables"
    ],
    "settings": {
        "attemptsPerWorkflow": 3,
        "delayBetweenAttempts": 1000
    }
}
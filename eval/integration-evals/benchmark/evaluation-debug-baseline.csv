timestamp,siteId,siteName,question,searchQuery,searchResultsSizeKB,searchResultsPreview,success,retrievalScore,endpointScore,completenessScore,reasoning,error
2025-10-09T13:04:50.199Z,stripe-api,"Stripe API","How do I create a new customer in Stripe?","Stripe API create customer endpoint parameters",10,"/preview](/api/credit%5Fnotes/preview)[POST/v1/credit\_notes/:id/void](/api/credit%5Fnotes/void)  # [Customer Balance Transaction](/api/customer%5Fbalance%5Ftransactions)   Each customer has a [Balance](/api/customers/object#customer%5Fobject-balance) value; which denotes a debit or credit that’s automatically applied to their next invoice upon finalization. You may modify the value directly by using the [update customer API](/api/customers/update); or by creating a Customer Balance Transaction; which increments or decrements the customer’s `balance` by the specified `amount`.  Related guide: [Customer balance](/billing/customer/balance)  Endpoints  [POST/v1/customers/:id/balance\_transactions](/api/customer%5Fbalance%5Ftransactions/create)[POST/v1/customers/:id/balance\_transactions/:id](/api/customer%5Fbalance%5Ftransactions/update)[GET/v1/customers/:id/balance\_transactions/:id](/api/customer%5Fbalance%5Ftransactions/retrieve)[GET/v1/customers/:id/balance\_transactions](/api/customer%5Fbalance%5Ftransactions/list)  # [Customer Portal Session](/api/customer%5Fportal/sessions)   The Billing customer portal is a Stripe-hosted UI for subscription and billing management.  A portal configuration describes the functionality and features that you want to provide to your customers through the portal.  A portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL; the customer can manage their subscriptions and billing details. For security reasons; sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.  Related guide: [Customer management](/customer-management)  Endpoints  [POST/v1/billing\_portal/sessions](/api/customer%5Fportal/sessions/create)  # [Customer Portal Configuration](/api/customer%5Fportal/configurations)   A portal configuration describes the functionality and behavior of ",true,30,10,5,"The retrieved documentation does not directly address the user's question about creating a new customer in Stripe. There is no mention of the correct endpoint (POST /v1/customers) for customer creation. Instead, the documentation focuses on updating customers, customer balance transactions, and customer portal sessions, none of which are the correct or primary endpoint for creating a customer. The only tangentially related information is that the update customer endpoint accepts similar arguments to the creation call, but it does not specify what those are, nor does it provide a direct link or example for customer creation. As a result, the documentation is not sufficient for a developer to confidently make a customer creation API call.",""
2025-10-09T13:04:54.957Z,stripe-api,"Stripe API","What are the required fields for creating a payment intent?","payment intent creation required fields API endpoint parameters",10,"Payment Intents](/api/payment%5Fintents)   A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](/payments/payment-intents)  Endpoints  [POST/v1/payment\_intents](/api/payment%5Fintents/create)[POST/v1/payment\_intents/:id](/api/payment%5Fintents/update)[GET/v1/payment\_intents/:id](/api/payment%5Fintents/retrieve)[GET/v1/payment\_intents](/api/payment%5Fintents/list)[POST/v1/payment\_intents/:id/cancel](/api/payment%5Fintents/cancel)[POST/v1/payment\_intents/:id/capture](/api/payment%5Fintents/capture)[POST/v1/payment\_intents/:id/confirm](/api/payment%5Fintents/confirm)[POST/v1/payment\_intents/:id/increment\_authorization](/api/payment%5Fintents/increment%5Fauthorization)[POST/v1/payment\_intents/:id/apply\_customer\_balance](/api/payment%5Fintents/apply%5Fcustomer%5Fbalance)[GET/v1/payment\_intents/search](/api/payment%5Fintents/search)[POST/v1/payment\_intents/:id/verify\_microdeposits](/api/payment%5Fintents/verify%5Fmicrodeposits)  # [Setup Intents](/api/setup%5Fintents)   A SetupIntent guides you through the process of setting up and saving a customer’s payment credentials for future payments. For example; you can use a SetupIntent to set up and save your customer’s card without immediately collecting a payment. Later; you can use [PaymentIntents](#payment%5Fintents) to drive the payment flow.  Create a SetupIntent when you’re ready to collect your customer’s payment credentials. Don’t maintain long-lived; unconfirmed SetupIntents because they mi",true,85,95,70,"The retrieved documentation includes the correct endpoint (POST /v1/payment_intents) for creating a payment intent and provides a partial schema of the request body, including the 'amount' parameter and its requirements. However, it does not explicitly list all required fields in a clear, consolidated way, nor does it provide a full example payload. The presence of the endpoint and some parameter details is strong, but the lack of a clear, explicit list of required fields and a complete example reduces the completeness score.",""
2025-10-09T13:05:01.155Z,stripe-api,"Stripe API","What parameters are required to refund a payment?","refund payment API required parameters endpoint documentation",10,"Payment Intents](/api/payment%5Fintents)   A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](/payments/payment-intents)  Endpoints  [POST/v1/payment\_intents](/api/payment%5Fintents/create)[POST/v1/payment\_intents/:id](/api/payment%5Fintents/update)[GET/v1/payment\_intents/:id](/api/payment%5Fintents/retrieve)[GET/v1/payment\_intents](/api/payment%5Fintents/list)[POST/v1/payment\_intents/:id/cancel](/api/payment%5Fintents/cancel)[POST/v1/payment\_intents/:id/capture](/api/payment%5Fintents/capture)[POST/v1/payment\_intents/:id/confirm](/api/payment%5Fintents/confirm)[POST/v1/payment\_intents/:id/increment\_authorization](/api/payment%5Fintents/increment%5Fauthorization)[POST/v1/payment\_intents/:id/apply\_customer\_balance](/api/payment%5Fintents/apply%5Fcustomer%5Fbalance)[GET/v1/payment\_intents/search](/api/payment%5Fintents/search)[POST/v1/payment\_intents/:id/verify\_microdeposits](/api/payment%5Fintents/verify%5Fmicrodeposits)  # [Setup Intents](/api/setup%5Fintents)   A SetupIntent guides you through the process of setting up and saving a customer’s payment credentials for future payments. For example; you can use a SetupIntent to set up and save your customer’s card without immediately collecting a payment. Later; you can use [PaymentIntents](#payment%5Fintents) to drive the payment flow.  Create a SetupIntent when you’re ready to collect your customer’s payment credentials. Don’t maintain long-lived; unconfirmed SetupIntents because they mi",true,10,0,0,"The retrieved documentation does not address the user's question about refunding a payment. It focuses on PaymentIntents, SetupIntents, and payment method domains, but does not mention refunds or the relevant refund endpoint (such as POST /v1/refunds). There is no information about required parameters for refunding a payment, nor is the correct endpoint identified. The content is almost entirely unrelated to the refund use case, resulting in very low scores across all metrics.",""
2025-10-09T13:05:14.672Z,slack-api,"Slack API","How can I authenticate a bot using OAuth2?","OAuth2 bot authentication API endpoint documentation parameters",10,"  === SECURITY ===  {   "securityDefinitions": {     "slackAuth": {       "authorizationUrl": "https://slack.com/oauth/authorize";       "flow": "accessCode";       "scopes": {         "admin": "admin";         "admin.apps:read": "admin.apps:read";         "admin.apps:write": "admin.apps:write";         "admin.conversations:read": "admin.conversations:read";         "admin.conversations:write": "admin.conversations:write";         "admin.invites:read": "admin.invites:read";         "admin.invites:write": "admin.invites:write";         "admin.teams:read": "admin.teams:read";         "admin.teams:write": "admin.teams:write";         "admin.usergroups:read": "admin.usergroups:read";         "admin.usergroups:write": "admin.usergroups:write";         "admin.users:read": "admin.users:read";         "admin.users:write": "admin.users:write";         "authorizations:read": "authorizations:read";         "bot": "Bot user scope";         "calls:read": "calls:read";         "calls:write": "calls:write";         "channels:history": "channels:history";         "channels:manage": "channels:manage";         "channels:read": "channels:read";         "channels:write": "channels:write";         "chat:write": "chat:write";         "chat:write:bot": "Author messages as a bot";         "chat:write:user": "Author messages as a user";         "conversations:history": "conversations:history";         "conversations:read": "conversations:read";         "conversations:write": "conversations:write";         "dnd:read": "dnd:read";         "dnd:write": "dnd:write";         "emoji:read": "emoji:read";         "files:read": "files:read";         "files:write:user": "files:write:user";         "groups:history": "groups:history";         "groups:read": "groups:read";         "groups:write": "groups:write";         "identity.basic": "identity.basic";         "im:history": "im:history";         "im:read": "im:read";         "im:write": "im:write";         "links:write": "links:write";         "mpim:",true,65,60,55,"The retrieved documentation includes relevant information about OAuth2 authentication for bots, such as the authorization URL (https://slack.com/oauth/authorize), the OAuth2 flow (accessCode), and a list of available scopes including 'bot' and 'chat:write:bot'. However, it does not provide a step-by-step guide or a clear example of the full OAuth2 authentication process for a bot. While it mentions endpoints like /auth.test and describes how to pass tokens, it lacks a dedicated section or example for the initial OAuth2 token exchange (e.g., /oauth.access or /oauth.v2.access). Required parameters and error codes are partially present, but the documentation is fragmented and does not walk the developer through the complete authentication flow. Thus, while the right pieces are present, they are not organized or complete enough for a developer to confidently implement OAuth2 bot authentication end-to-end.",""
2025-10-09T13:05:21.020Z,slack-api,"Slack API","How do I send a message to a channel?","send message to channel API endpoint parameters",10," unexpected factors affect processing. Callers should always check the value of the `ok` parameter in the response.  Error  Description  `access_denied`  Access to a resource specified in the request is denied.  `accesslimited`  Access to this method is limited on the current network  `account_inactive`  Authentication token is for a deleted user or workspace when using a `bot` token.  `cannot_add_more_channels_to_group`  The maximum number of channels have already been linked to the group.  `cannot_add_more_groups_to_channel`  The maximum number of groups have already been linked to the channel.  `channel_is_not_private`  The channel is a public channel; a multi-party direct message; a direct message; or is externally-shared.  `channel_not_found`  `channel_id` can’t be found.  `default_channel_restricted`  The channel is a default channel on the workspace.  `deprecated_endpoint`  The endpoint has been deprecated.  `ekm_access_denied`  Administrators have suspended the ability to post a message.  `enterprise_is_restricted`  The method cannot be called from an Enterprise.  `fatal_error`  The server could not complete your operation(s) without encountering a catastrophic error. It's possible some aspect of the operation succeeded before the error was raised.  `feature_not_enabled`  Feature not enabled  `group_already_linked_to_channel`  The IDP group is already linked to the channel  `group_must_not_be_empty`  The IDP group is currently empty.  `group_not_found`  `group_id` can’t be found.  `internal_error`  The server could not complete your operation(s) without encountering an error; likely due to a transient issue on our end. It's possible some aspect of the operation succeeded before the error was raised.  `invalid_arg_name`  The method was passed an argument whose name falls outside the bounds of accepted or expected values. This includes very long names and names with non-alphanumeric characters other than `_`. If you get this error; it is typically an indicatio",true,90,95,80,"The retrieved documentation includes the correct endpoint for sending a message to a channel: POST /chat.postMessage. It lists required and optional parameters such as 'token', 'channel', 'text', and others, with descriptions and types. While there is some extra information about related endpoints (e.g., chat.postEphemeral, chat.meMessage), the main endpoint is clearly present and described. However, the documentation snippet does not include a full example request, and the 'text' parameter's description is cut off, which slightly reduces completeness. Overall, the documentation is highly relevant and actionable for a developer wanting to send a message to a channel.",""
2025-10-09T13:05:25.354Z,slack-api,"Slack API","How do I add a reaction to a message?","add reaction to message API endpoint documentation",10,"nifies the expiration time of the request; meaning that it shouldn't be trusted if it's not received by the expiration time. * `iat` signifies the time when the token was issued. * `auth_time` signifies the time when the end-user authenticated. * `nonce` is a state variable that you pass to the `/openid/connect/authorize` endpoint at the beginning of Sign in with Slack; and that Slack then returns to you at the end of the flow here. Verify that it matches the `nonce` you passed to `/authorize`.  ####   Successful token request during the Sign in with Slack flow  ``` {   "ok": true;   "access_token": "xoxp-1234";   "token_type": "Bearer";   "id_token": "eyJhbGcMjY5OTA2MzcWNrLmNvbVwvdGVhbV9p..." }  ```  ## Errors[​](#errors "Direct link to Errors")  This table lists the expected errors that this method could return. However; other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` parameter in the response.  Error  Description  `access_denied`  Access to a resource specified in the request is denied.  `accesslimited`  Access to this method is limited on the current network  `account_inactive`  Authentication token is for a deleted user or workspace when using a `bot` token.  `bad_client_secret`  The value passed for `client_secret` was invalid.  `bad_redirect_uri`  The value passed for `redirect_uri` did not match the `redirect_uri` in the original request.  `cannot_install_an_org_installed_app`  An org-installed app cannot be installed on a workspace.  `deprecated_endpoint`  The endpoint has been deprecated.  `ekm_access_denied`  Administrators have suspended the ability to post a message.  `enterprise_is_restricted`  The method cannot be called from an Enterprise.  `fatal_error`  The server could not complete your operation(s) without encountering a catastrophic error. It's possible some aspect of the operation succeeded before the error was raised.  `internal_",true,95,95,90,"The retrieved documentation includes the correct endpoint (POST /reactions.add) for adding a reaction to a message. It clearly lists the required parameters: 'channel' (the channel ID), 'name' (the emoji name), 'timestamp' (the message timestamp), and 'token' (authentication). The documentation also describes the expected responses and possible errors. While there is some extra information about unrelated endpoints, the relevant section is detailed and actionable, making it easy for a developer to construct the correct API call. The only minor shortcoming is the lack of a full example request, but all necessary details are present.",""
2025-10-09T13:05:32.634Z,gmail-api,"Gmail API","How do I list all messages in a user's mailbox?","list messages API endpoint user mailbox",9,"------ | | [batchDelete](/workspace/gmail/api/reference/rest/v1/users.messages/batchDelete) | POST /gmail/v1/users/{userId}/messages/batchDelete  Deletes many messages by message ID.                                                                                                                                                     | | [batchModify](/workspace/gmail/api/reference/rest/v1/users.messages/batchModify) | POST /gmail/v1/users/{userId}/messages/batchModify  Modifies the labels on the specified messages.                                                                                                                                           | | [delete](/workspace/gmail/api/reference/rest/v1/users.messages/delete)           | DELETE /gmail/v1/users/{userId}/messages/{id}  Immediately and permanently deletes the specified message.                                                                                                                                    | | [get](/workspace/gmail/api/reference/rest/v1/users.messages/get)                 | GET /gmail/v1/users/{userId}/messages/{id}  Gets the specified message.                                                                                                                                                                      | | [import](/workspace/gmail/api/reference/rest/v1/users.messages/import)           | POST /gmail/v1/users/{userId}/messages/import POST /upload/gmail/v1/users/{userId}/messages/import  Imports a message into only this user's mailbox; with standard email delivery scanning and classification similar to receiving via SMTP. | | [insert](/workspace/gmail/api/reference/rest/v1/users.messages/insert)           | POST /gmail/v1/users/{userId}/messages POST /upload/gmail/v1/users/{userId}/messages  Directly inserts a message into only this user's mailbox similar to IMAP APPEND; bypassing most scanning and classification.                           | | [list](/workspace/gmail/api/reference/rest/v1",true,95,95,85,"The retrieved documentation directly includes the correct endpoint for listing all messages in a user's mailbox: GET /gmail/v1/users/{userId}/messages. It also provides a summary of the endpoint's purpose, a list of relevant parameters (userId, maxResults, pageToken, q, labelIds, includeSpamTrash), their types, defaults, and descriptions. There is even a link to further usage examples. While the documentation is highly relevant and detailed, it does not include a full request/response example inline, which would make it perfect for immediate use. However, all necessary information to construct a valid API call is present.",""
2025-10-09T13:05:37.362Z,gmail-api,"Gmail API","How do I list all labels in a mailbox?","list labels mailbox API endpoint documentation",7,"ts in the user's mailbox.                                                                                                      | | [send](/workspace/gmail/api/reference/rest/v1/users.drafts/send)     | POST /gmail/v1/users/{userId}/drafts/send POST /upload/gmail/v1/users/{userId}/drafts/send  Sends the specified; existing draft to the recipients in the To; Cc; and Bcc headers. | | [update](/workspace/gmail/api/reference/rest/v1/users.drafts/update) | PUT /gmail/v1/users/{userId}/drafts/{id} PUT /upload/gmail/v1/users/{userId}/drafts/{id}  Replaces a draft's content.                                                             |  ## REST Resource: [v1.users.history](/workspace/gmail/api/reference/rest/v1/users.history)  | Methods                                                           |                                                                                              | | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | | [list](/workspace/gmail/api/reference/rest/v1/users.history/list) | GET /gmail/v1/users/{userId}/history  Lists the history of all changes to the given mailbox. |  ## REST Resource: [v1.users.labels](/workspace/gmail/api/reference/rest/v1/users.labels)  | Methods                                                              |                                                                                                                                                                          | | -------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | [create](/workspace/gmail/api/reference/rest/v1/users.labels/create) | POST /gmail/v1/users/{userId}/labels  Creates a new label.                                                                   ",true,95,95,80,"The retrieved documentation directly addresses the user's question by listing the correct endpoint (GET /gmail/v1/users/{userId}/labels) for listing all labels in a mailbox. It provides the HTTP method, path, and describes the purpose of the endpoint. Required parameters are shown (userId, with 'me' as a special value), and the relevant OAuth scopes are listed. However, while parameter details are present, there is no concrete example of a request or response, and the documentation does not show the full structure of the response object. This slightly reduces the completeness score, but overall, the documentation is highly effective for a developer needing to make this API call.",""
2025-10-09T13:05:42.112Z,gmail-api,"Gmail API","What's the rate limit per user for Gmail API requests?","Gmail API rate limit per user documentation",9,"il/api/reference/rest/v1/users/getProfile) | GET /gmail/v1/users/{userId}/profile  Gets the current user's Gmail profile.                               | | [stop](/workspace/gmail/api/reference/rest/v1/users/stop)             | POST /gmail/v1/users/{userId}/stop  Stop receiving push notifications for the given user mailbox.          | | [watch](/workspace/gmail/api/reference/rest/v1/users/watch)           | POST /gmail/v1/users/{userId}/watch  Set up or update a push notification watch on the given user mailbox. |  ## REST Resource: [v1.users.drafts](/workspace/gmail/api/reference/rest/v1/users.drafts)  | Methods                                                              |                                                                                                                                                                                   | | -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | [create](/workspace/gmail/api/reference/rest/v1/users.drafts/create) | POST /gmail/v1/users/{userId}/drafts POST /upload/gmail/v1/users/{userId}/drafts  Creates a new draft with the DRAFT label.                                                       | | [delete](/workspace/gmail/api/reference/rest/v1/users.drafts/delete) | DELETE /gmail/v1/users/{userId}/drafts/{id}  Immediately and permanently deletes the specified draft.                                                                             | | [get](/workspace/gmail/api/reference/rest/v1/users.drafts/get)       | GET /gmail/v1/users/{userId}/drafts/{id}  Gets the specified draft.                                                                                                               | | [list](/workspace/gmail/api/reference/rest/v1/users.drafts/list)     | GET /gmail/v1/users/{userId}/drafts  Lists the draf",true,10,10,10,"The retrieved documentation lists several Gmail API endpoints and their parameters, but it does not mention anything about rate limits per user. There is no information about quota, rate limiting, or usage restrictions, which is the core of the user's question. While the endpoints are relevant to Gmail API usage, none of the content addresses rate limits, so the documentation is not helpful for answering the user's specific question.",""
2025-10-09T13:05:51.293Z,openai-api,"OpenAI API","What parameter do I use to get structured output?","structured output parameter API endpoint documentation",10,"-2024-07-18";     "output": [];     "previous_response_id": null;     "reasoning_effort": null;     "store": false;     "temperature": 1;     "text": {       "format": {         "type": "text"       }     };     "tool_choice": "auto";     "tools": [];     "top_p": 1;     "truncation": "disabled";     "usage": null;     "user": null;     "metadata": {}   };   "sequence_number": 1 } ```  ##   response.output\_item.added  Emitted when a new output item is added.  [](#responses-streaming/response/output%5Fitem/added-item)  item  object  The output item that was added.  [](#responses-streaming/response/output%5Fitem/added-output%5Findex)  output\_index  integer  The index of the output item that was added.  [](#responses-streaming/response/output%5Fitem/added-sequence%5Fnumber)  sequence\_number  integer  The sequence number of this event.  [](#responses-streaming/response/output%5Fitem/added-type)  type  string  The type of the event. Always `response.output_item.added`.  OBJECT response.output\_item.added  ```JSON 1 2 3 4 5 6 7 8 9 10 11 12 {   "type": "response.output_item.added";   "output_index": 0;   "item": {     "id": "msg_123";     "status": "in_progress";     "type": "message";     "role": "assistant";     "content": []   };   "sequence_number": 1 } ```  ##   response.output\_item.done  Emitted when an output item is marked done.  [](#responses-streaming/response/output%5Fitem/done-item)  item  object  The output item that was marked done.  [](#responses-streaming/response/output%5Fitem/done-output%5Findex)  output\_index  integer  The index of the output item that was marked done.  [](#responses-streaming/response/output%5Fitem/done-sequence%5Fnumber)  sequence\_number  integer  The sequence number of this event.  [](#responses-streaming/response/output%5Fitem/done-type)  type  string  The type of the event. Always `response.output_item.done`.  OBJECT response.output\_item.done  ```JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {   "type": "response.output_",true,20,10,10,"The retrieved documentation does not directly address the user's question about which parameter to use for structured output. While it includes some event and response object schemas, and a few unrelated endpoints (uploads, fine-tuning checkpoints), there is no clear mention of a parameter that controls output structure, nor is there an endpoint that obviously relates to output formatting. No example or parameter list is provided that would help a developer achieve structured output. The documentation is mostly about event streaming and fine-tuning permissions, which are not relevant to the user's intent.",""
2025-10-09T13:05:56.065Z,openai-api,"OpenAI API","How can I retrieve files from my vector database?","vector database API retrieve files endpoint parameters data structures",10,"integer  The Unix timestamp (in seconds) for when the vector store was last active.  [](#vector-stores/object-metadata)  metadata  map  Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format; and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.  [](#vector-stores/object-name)  name  string  The name of the vector store.  [](#vector-stores/object-object)  object  string  The object type; which is always `vector_store`.  [](#vector-stores/object-status)  status  string  The status of the vector store; which can be either `expired`; `in_progress`; or `completed`. A status of `completed` indicates that the vector store is ready for use.  [](#vector-stores/object-usage%5Fbytes)  usage\_bytes  integer  The total number of bytes used by the files in the vector store.  OBJECT The vector store object  ```JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 {   "id": "vs_123";   "object": "vector_store";   "created_at": 1698107661;   "usage_bytes": 123456;   "last_active_at": 1698107661;   "name": "my_vector_store";   "status": "completed";   "file_counts": {     "in_progress": 0;     "completed": 100;     "cancelled": 0;     "failed": 0;     "total": 100   };   "last_used_at": 1698107661 } ```  ##   Vector store files  Vector store files represent files inside a vector store.  Related guide: [File Search](/docs/assistants/tools/file-search)  ##   Create vector store file  post https://api.openai.com/v1/vector\_stores/{vector\_store\_id}/files  Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).  #### Path parameters  [](#vector-stores-files-createfile-vector%5Fstore%5Fid)  vector\_store\_id  string  Required  The ID of the vector store for which to create a File.  #### Request body  ",true,95,95,90,"The retrieved documentation directly addresses the user's question about retrieving files from a vector database. It clearly identifies the correct endpoint (GET /vector_stores/{vector_store_id}/files/{file_id}/content) for retrieving file contents, provides required path parameters (vector_store_id and file_id), and includes example requests in curl, Python, and Node.js. The response structure is also shown. There is some extra information about related endpoints (create, update, delete), but the main retrieval endpoint is prominent and well-documented. The only minor gap is that it doesn't show how to list all files in a vector store, but for retrieving a specific file's content, the documentation is highly complete.",""
2025-10-09T13:06:06.661Z,openai-api,"OpenAI API","How do I include both text and images in the same input?","API endpoint multipart input text image parameters documentation",10,"image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-partial%5Fimage%5Findex)  partial\_image\_index  integer  0-based index for the partial image (streaming).  [](#images-streaming/image%5Fgeneration/partial%5Fimage-quality)  quality  string  The quality setting for the requested image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-size)  size  string  The size of the requested image.  [](#images-streaming/image%5Fgeneration/partial%5Fimage-type)  type  string  The type of the event. Always `image_generation.partial_image`.  OBJECT image\_generation.partial\_image  ```JSON 1 2 3 4 5 6 7 8 9 10 {   "type": "image_generation.partial_image";   "b64_json": "...";   "created_at": 1620000000;   "size": "1024x1024";   "quality": "high";   "background": "transparent";   "output_format": "png";   "partial_image_index": 0 } ```  ##   image\_generation.completed  Emitted when image generation has completed and the final image is available.  [](#images-streaming/image%5Fgeneration/completed-b64%5Fjson)  b64\_json  string  Base64-encoded image data; suitable for rendering as an image.  [](#images-streaming/image%5Fgeneration/completed-background)  background  string  The background setting for the generated image.  [](#images-streaming/image%5Fgeneration/completed-created%5Fat)  created\_at  integer  The Unix timestamp when the event was created.  [](#images-streaming/image%5Fgeneration/completed-output%5Fformat)  output\_format  string  The output format for the generated image.  [](#images-streaming/image%5Fgeneration/completed-quality)  quality  string  The quality setting for the generated image.  [](#images-streaming/image%5Fgeneration/completed-size)  size  string  The size of the generated image.  [](#images-streaming/image%5Fgeneration/completed-type)  type  string  The type of the event. Always `image_generation.completed`.  [](#images-streaming/image%5Fgeneration/completed-usage)  usage  object  For `gpt-image-1` only; the token usage information",true,35,20,20,"The retrieved documentation does not directly address how to include both text and images in the same input. While it provides details about image generation and editing events, as well as endpoints for file uploads and chat completions, it does not clearly show an endpoint or parameter structure for sending both text and image together in a single API call. There is no example or explicit mention of multipart input or how to combine text and image data. The endpoints shown (e.g., /files, /chat/completions, /responses) are not clearly tied to the user's use case, and parameter details for combining text and images are missing.",""
2025-10-09T13:06:11.963Z,zignsec-api,"Zignsec API","How can I Create a proof-of-address session?","create proof-of-address session API endpoint documentation parameters",10,"whenever an event occurs on a session with the given identifier.";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Session events that are sent as callbacks through webhooks.";"properties":{"event":{"description":"The type of event that occurred.";"type":"string"};"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"id":{"description":"Session Event ID";"type":"string"};"integration_id":{"description":"An identifier to the service provider that triggered this session event.";"type":"string"};"relay_state":{"description":"Optional Custom Parameter to be included in webhook calls ";"type":"string"};"status":{"description":"The Status of the session";"type":"string"};"workflow_session_id":{"description":"The id of the workflow session that this event relates to.";"type":"string"}};"required":["id";"workflow_session_id";"integration_id";"event";"result"];"title":"ValidateCompanyCallback";"type":"object"}}};"description":"Session Event Data";"required":true};"responses":{"200":{"content":{"application/json":{}};"description":"Acknowledge Session Event"};"204":{"content":{"application/json":{}};"description":"Acknowledge Session Event"}};"summary":"Session Event Callback Webhook";"tags":[]}}}};"deprecated":false;"operationId":"postValidateCompanyGdc";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Parameters that initiate a new synchronous data session request.";"properties":{"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"metadata":{"additionalProperties":false;"example":{"address":{"country_code":"US";"house_number":"290";"locality":"ASHEVILLE";"postal_code":"28804";"province":"NC";"thoroughfare":"Macon Avenue"};"country_code":"US";"email":{"domain":"random.com"};"identity":{"business_id":"47-423432";"organization_name":"Random Inc."};"options":"BusinessVerify;MessageVerbose"};"properties":{"address":{"additionalProperties":false;"properties":{"t",true,85,90,70,"The retrieved documentation includes the correct endpoint for creating a proof-of-address session: POST /core/api/sessions/proof_of_address/document. The relevant section describes this endpoint and provides a schema for the request body, listing parameters such as gdpr_user_id, locale, and metadata (with subfields like first_name, last_name, full_address, etc.). However, while the parameter names and types are present, the documentation lacks a full example request and does not clearly indicate which parameters are required versus optional. There is also some extra unrelated content, but the core information needed to make the API call is present and mostly clear.",""
2025-10-09T13:06:18.035Z,zignsec-api,"Zignsec API","How can I start an identity verification session?","start identity verification session API endpoint parameters documentation",10,"tity_check/pep_global_member_check/due_diligence_status":{"post":{"callbacks":{"SessionEvent":{"webhook_url":{"post":{"callbacks":{};"deprecated":false;"description":"Invoked whenever an event occurs on a session with the given identifier.";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"Session events that are sent as callbacks through webhooks.";"properties":{"event":{"description":"The type of event that occurred.";"type":"string"};"gdpr_user_id":{"description":"Optional User Identifier";"type":"string"};"id":{"description":"Session Event ID";"type":"string"};"integration_id":{"description":"An identifier to the service provider that triggered this session event.";"type":"string"};"relay_state":{"description":"Optional Custom Parameter to be included in webhook calls ";"type":"string"};"status":{"description":"The Status of the session";"type":"string"};"workflow_session_id":{"description":"The id of the workflow session that this event relates to.";"type":"string"}};"required":["id";"workflow_session_id";"integration_id";"event";"result"];"title":"UpdateDueDiligenceStatusCallback";"type":"object"}}};"description":"Session Event Data";"required":true};"responses":{"200":{"content":{"application/json":{}};"description":"Acknowledge Session Event"};"204":{"content":{"application/json":{}};"description":"Acknowledge Session Event"}};"summary":"Session Event Callback Webhook";"tags":[]}}}};"deprecated":false;"operationId":"postIdentityCheckPepGlobalMemberCheckDueDiligenceStatus";"parameters":[];"requestBody":{"content":{"application/json":{"schema":{"description":"";"properties":{"session_id":{"description":"Session ID";"example":"44d8e35b-d3d7-4d45-9d80-06e3ccf10736";"type":"string"};"status":{"description":"Status";"example":1;"type":"integer"}};"title":"Session ID Request";"type":"object"}}};"description":"Create Session Parameters";"required":false};"responses":{"200":{"content":{"application/json":{}};"description":"Update ",true,75,80,60,"The retrieved documentation includes several relevant endpoints for starting identity verification sessions, such as POST /core/api/sessions/wyzerwork/merchant-onboarding and POST /core/api/sessions/proof_of_address/document. These are clearly related to session initiation for identity verification. The documentation provides some parameter details (e.g., gdpr_user_id, locale, metadata), but the information is fragmented and lacks a clear, consolidated example or a step-by-step guide. While the correct endpoints are present and some parameter descriptions are included, the overall completeness is reduced by the lack of a full example request and a more explicit mapping between the user's intent ('start an identity verification session') and the exact endpoint to use.",""
2025-10-09T13:06:26.250Z,sitecore-components-api,"Sitecore Cloud Components API","How do I interact with a file source like azure blob storage?","azure blob storage api endpoints file upload download authentication parameters",1,"  === OPENAPI OPERATIONS ===  [POST /api/files/generateSAS] {"description":"Route used to generate SAS Token to be used in frontend to upload files to Azure blob storage";"tags":["Files"];"parameters":[{"name":"body";"in":"body";"schema":{"$schema":"http://json-schema.org/draft-07/schema#";"type":"object";"additionalProperties":false;"properties":{"storedPolicyName":{"type":"string"};"category":{"enum":["thumbnails";"uploads";"images";"webcomponents"]}};"required":["category"]}}];"responses":{"200":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":true}};"400":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Bad Request"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}};"404":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Not Found"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}};"500":{"description":"Default Response";"schema":{"type":"object";"additionalProperties":false;"properties":{"statusCode":{"type":"integer"};"error":{"type":"string";"enum":["Internal server error"]};"message":{"type":"string"}};"required":["statusCode";"error";"message"]}}}}",true,75,90,65,"The retrieved documentation is relevant to the user's question about interacting with Azure Blob Storage, specifically for generating a SAS token needed for file upload. The correct endpoint (POST /api/files/generateSAS) is clearly identified, which is crucial for authentication and secure access. The documentation provides the required parameters (category, and optionally storedPolicyName) and their types, but lacks concrete request/response examples and does not cover the actual upload/download process or how to use the SAS token with Azure Blob Storage. Thus, while it helps with the authentication step, it is incomplete for the full file interaction workflow.",""
2025-10-09T13:06:33.104Z,sitecore-components-api,"Sitecore Cloud Components API","I want to upload a new stylesheet","upload stylesheet API endpoint parameters documentation",8,"  === OPENAPI OPERATIONS ===  [PUT /api/libraries/{libraryId}/stylesheets/] {"description":"Create or update a stylesheet; requires correct revision/status to be provided.";"tags":["Stylesheets"];"parameters":[{"name":"body";"in":"body";"schema":{"required":["revision";"source";"status"];"properties":{"libraryId":{"description":"The identifier of the Library that Stylesheet belongs to";"minLength":3;"maxLength":64;"type":"string"};"id":{"description":"The identifier of the Stylesheet";"minLength":3;"maxLength":64;"type":"string"};"source":{"description":"The source of the Stylesheet"};"formatVersion":{"description":"The format version of the Stylesheet.";"minimum":0;"type":"integer"};"status":{"description":"The status of the Stylesheet";"enum":["draft";"published";"saved";"staged"];"type":"string"};"revision":{"description":"The numeric revision of the Stylesheet.";"minimum":0;"type":"integer"};"createdAt":{"description":"The timestamp the Stylesheet was created at";"type":"string";"format":"date-time"};"modifiedAt":{"description":"The timestamp when the Stylesheet was last modified at";"type":"string";"format":"date-time"}};"description":"Defines the schema for Stylesheet.";"type":"object";"additionalProperties":false;"$schema":"http://json-schema.org/draft-07/schema#";"definitions":{}}};{"type":"string";"minLength":3;"required":true;"in":"path";"name":"libraryId"}];"responses":{"200":{"description":"Defines the schema for Stylesheet.";"schema":{"required":["createdAt";"formatVersion";"id";"libraryId";"modifiedAt";"revision";"source";"status"];"properties":{"libraryId":{"description":"The identifier of the Library that Stylesheet belongs to";"minLength":3;"maxLength":64;"type":"string"};"id":{"description":"The identifier of the Stylesheet";"minLength":3;"maxLength":64;"type":"string"};"source":{"description":"The source of the Stylesheet"};"formatVersion":{"description":"The format version of the Stylesheet.";"minimum":0;"type":"integer"};"status":{"description":",true,90,95,85,"The retrieved documentation includes the correct endpoint for uploading (creating or updating) a stylesheet: PUT /api/libraries/{libraryId}/stylesheets/. The documentation provides a detailed schema for the request body, listing required fields such as 'revision', 'source', and 'status', as well as optional fields. It also describes the path parameter 'libraryId'. While there is no explicit example payload, the parameter details are thorough enough for a developer to construct a valid request. Other endpoints are present but do not distract from the main, relevant information.",""
2025-10-09T13:06:39.562Z,openstorage-api,"OpenStorage API","Create a new role","create role API endpoint parameters request body",7,"ckground filesystem trim operation   apiSdkFilesystemTrimStartResponse   apiSdkFilesystemTrimStatusResponse   SdkFilesystemTrimStopRequest defines a request to stop a background filesystem trim operation   Empty response   Defines the status of an existing job   apiSdkGetRebalanceJobStatusResponse   apiSdkGetRebalanceScheduleResponse   Defines credentials for Google   Defines the response for Google credentials   Defines a response containing the capabilities of the cluster   Defines a response containing version information   Defines a response for an SDK request that spins up a new job to perform the request   Defines credentials for NFS   Defines the response for NFS credential   SdkNodeCordonAttachmentsRequest request for disabling new volume attachments from a node   SdkNodeCordonAttachmentsRespinse response for disabling new volume attachments from a node   Defines a node drain volume attachments request   Defines a response with a list of node ids   Defines a response with a list of nodes   Defines a response when inspecting a node   Defines a response when inspecting a node   Defines response containing status of the trigger   SdkNodeUncordonAttachmentsRequest request for re-enabling volume attachments for a node   SdkNodeUncordonAttachmentsRespinse response for enabling new volume attachments from a node   Defines response containing Node's volumes/snapshot capacity usage details   Defines a request to create an object store   Defines a response when an object store has been created for a specified volume   Empty response   Defines a response when inspecting an object store endpoint   Defines a request to update an object store   Empty response   Define a request to create storage policy   Empty response   Define default storage policy response   Empty Response   Define a storage policy enumerate response   Define a storage policy inspect response   Empty Request   Empty Response   Define a request to set default storage policy   Empty Response   Define a r",true,10,0,0,"The retrieved documentation does not contain any information about a 'create role' API endpoint. The only endpoints shown are for credentials, volume creation, and migration status, none of which are related to role creation or management. There are no details about a 'role' resource, no relevant endpoint (such as POST /v1/roles), and no request body or parameter information for creating a role. Therefore, the documentation is not helpful for a developer trying to create a new role.",""
2025-10-09T13:06:45.321Z,openstorage-api,"OpenStorage API","Activate a cluster domain","activate cluster domain API endpoint parameters documentation",7,"lusterdomains/deactivate/{cluster\_domain\_name}](#/OpenStorageClusterDomains/OpenStorageClusterDomains%5FDeactivate)  Deactivates a cluster domain in the cluster. All the nodes which are part of a deactivated cluster domain. will not participate in cluster quorum calculation  GET[/v1/clusterdomains/inspect/{cluster\_domain\_name}](#/OpenStorageClusterDomains/OpenStorageClusterDomains%5FInspect)  Inspect returns information about a cluster domain and a status indicating whether the cluster domain is active  #### [OpenStorageClusterPair](#/OpenStorageClusterPair)  GET[/v1/clusterpairs](#/OpenStorageClusterPair/OpenStorageClusterPair%5FEnumerate)  Enumerate returns list of cluster pairs  POST[/v1/clusterpairs](#/OpenStorageClusterPair/OpenStorageClusterPair%5FCreate)  Creates Pair with a remote cluster and returns details about the remote cluster  GET[/v1/clusterpairs/inspect/{id}](#/OpenStorageClusterPair/OpenStorageClusterPair%5FInspect)  Inspect information about a cluster pair  GET[/v1/clusterpairs/token](#/OpenStorageClusterPair/OpenStorageClusterPair%5FGetToken)  GetToken returns a auth token  POST[/v1/clusterpairs/token](#/OpenStorageClusterPair/OpenStorageClusterPair%5FResetToken)  ResetToken returns a auth token  DELETE[/v1/clusterpairs/{cluster\_id}](#/OpenStorageClusterPair/OpenStorageClusterPair%5FDelete)  Delete a cluster pair  #### [OpenStorageCluster](#/OpenStorageCluster)  GET[/v1/clusters/inspectcurrent](#/OpenStorageCluster/OpenStorageCluster%5FInspectCurrent)  InspectCurrent returns information about the current cluster  #### [OpenStorageCredentials](#/OpenStorageCredentials)  GET[/v1/credentials](#/OpenStorageCredentials/OpenStorageCredentials%5FEnumerate)  Enumerate returns a list of credential ids  POST[/v1/credentials](#/OpenStorageCredentials/OpenStorageCredentials%5FCreate)  Create is used to submit cloud credentials. It will return an id of the credentials once they are verified to work.  GET[/v1/credentials/inspect/{credential\_id}](#/OpenSt",true,90,95,75,"The retrieved documentation directly includes the correct endpoint for activating a cluster domain: POST /v1/clusterdomains/activate/{cluster_domain_name}. It clearly specifies the required path parameter (cluster_domain_name) and its type. The summary explains the endpoint's purpose. However, while the parameter is described, there is no example request or response body shown, and details about authentication or headers are missing. The documentation is highly relevant and identifies the correct endpoint, but lacks full example usage, which slightly lowers the completeness score.",""
2025-10-09T13:06:51.113Z,caspio-api,"Caspio REST API","how do I deploy a DataPage?","deploy DataPage API endpoint documentation parameters",5,"  === OPENAPI OPERATIONS ===  [GET /v3/bridgeApplications/{externalKey}/datapages/{appKey}/deployment] {"tags":["Bridge Applications"];"summary":"Returns the DataPage deploy code";"description":"Available deployment methods: **iFrame**; **URL**; **Embedded**; **Net**.  \nValues are case-insensitive and can be replaced by a single character of each string (**I**; **U**; **E**; **N**) respectively.";"operationId":"GetBridgeApplicationDataPageDeploymentCode";"parameters":[{"name":"externalKey";"in":"path";"description":"App ID";"required":true;"schema":{"type":"string"}};{"name":"appKey";"in":"path";"description":"DataPage ID";"required":true;"schema":{"type":"string"}};{"name":"method";"in":"query";"description":"Deployment method";"required":true;"schema":{"type":"string"}}];"responses":{"200":{"description":"OK";"content":{"application/json":{"schema":{"type":"string"}};"text/json":{"schema":{"type":"string"}};"application/xml":{"schema":{"type":"string"}};"text/xml":{"schema":{"type":"string"}}}};"400":{"description":"BadRequest"};"401":{"description":"Unauthorized"};"403":{"description":"Forbidden"};"404":{"description":"NotFound"}}}  ---  [PUT /v3/outgoingWebhooks/{webhookId}] {"tags":["Outgoing Webhooks"];"summary":"Updates the outgoing webhook definition";"description":"At least one of the following parameters must be included in the request body:\n- **Name** must be unique for each outgoing webhook.\n- **Description**\n- **OutgoingUrls** must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** should be higher than 0 and lower than the max value for the account plan.\n- **Enabled** can be set to true or false to configure statuses of all events related to this webhook.";"operationId":"UpdateOutgoingWebhook";"parameters":[{"name":"webhookId";"in":"path";"description":"";"required":true;"schema":{"type":"string"}}];"requestBody":{"descrip",true,90,95,80,"The retrieved documentation includes the correct endpoint for deploying a DataPage: PUT /v3/bridgeApplications/{externalKey}/datapages/{appKey}/deployment. It clearly identifies the required path parameters (externalKey for App ID, appKey for DataPage ID) and specifies that a request body with the new deployment state (referencing SetDeploymentStatusRequest) is required. However, the actual schema or example for SetDeploymentStatusRequest is not included in the retrieved content, which slightly reduces completeness. Overall, the documentation is highly relevant and actionable for a developer looking to deploy a DataPage.",""
2025-10-09T13:06:57.863Z,caspio-api,"Caspio REST API","Create a new ongoing webhook","create webhook endpoint ongoing API documentation",5,"  === OPENAPI OPERATIONS ===  [PUT /v3/outgoingWebhooks/{webhookId}] {"tags":["Outgoing Webhooks"];"summary":"Updates the outgoing webhook definition";"description":"At least one of the following parameters must be included in the request body:\n- **Name** must be unique for each outgoing webhook.\n- **Description**\n- **OutgoingUrls** must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** should be higher than 0 and lower than the max value for the account plan.\n- **Enabled** can be set to true or false to configure statuses of all events related to this webhook.";"operationId":"UpdateOutgoingWebhook";"parameters":[{"name":"webhookId";"in":"path";"description":"";"required":true;"schema":{"type":"string"}}];"requestBody":{"description":"";"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookPutRequest"}}};"required":true};"responses":{"200":{"description":"OK";"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookPutResponse"}};"text/json":{"schema":{"$ref":"#/components/schemas/WebhookPutResponse"}}}};"400":{"description":"BadRequest"};"401":{"description":"Unauthorized"};"403":{"description":"Forbidden"};"404":{"description":"NotFound"}}}  ---  [POST /v3/outgoingWebhooks] {"tags":["Outgoing Webhooks"];"summary":"Creates a new outgoing webhook";"description":"- **Name** is required and must be unique for each outgoing webhook.\n- **Description** is optional. \n- **OutgoingUrls** is required; must be unique for each outgoing webhook; and should be a valid HTTPS address. If the account plan has access to multicast webhooks; more than one can be added.\n- **CallThrottling** is optional and should be higher than 0 and lower than the max value for the account plan. If not provided; the account plan's max value is used.";"operationId":"CreateOutgoingWebhook";"requestBody":{"description":"";"conten",true,95,95,80,"The retrieved documentation is highly relevant: it includes the correct endpoint for creating a new outgoing webhook (POST /v3/outgoingWebhooks) and provides a summary, required and optional parameters, and response details. The endpoint is clearly identified, and the required fields (Name, OutgoingUrls) and optional fields (Description, CallThrottling) are described. However, the documentation does not include a concrete example request body, which would further improve completeness for developers. Overall, the documentation is sufficient for a developer to make the API call, but would be even better with a sample payload.",""
2025-10-09T13:07:03.340Z,epaypolicy-api,"ePayPolicy API","Please cancel a ongoing payment schedule","cancel payment schedule API endpoint parameters",7,"  === OPENAPI OPERATIONS ===  [POST /api/v2/paymentSchedules] {"tags":["PaymentSchedules"];"summary":"Creates a payment schedule for a delayed payment or recurring payments.";"operationId":"PaymentSchedules_Post";"consumes":["application/json";"text/json";"application/xml";"text/xml";"application/x-www-form-urlencoded"];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"postPaymentScheduleRequestModel";"in":"body";"description":"Contains the parameters for the payment schedule. In the response; the Id of the created payment schedule is the last part of the URI in the location header attribute.";"required":true;"schema":{"$ref":"#/definitions/PostPaymentScheduleRequestModel"}};{"name":"impersonationAccountKey";"in":"header";"description":"The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request.";"required":false;"schema":{"type":"string"};"type":"string";"default":""}];"responses":{"201":{"description":"The payment schedule was created successfully. The Id of the schedule is in the location header attribute."};"400":{"description":"Invalid request. Check the body for any related errors.";"schema":{"type":"object";"additionalProperties":{"$ref":"#/definitions/Object"}}};"401":{"description":"Invalid credentials. Please verify the key and secret used to generate the authorization header value."}};"deprecated":false;"security":[{"basic":[]}]}  ---  [POST /api/v2/paymentSchedules/{id}/cancel] {"tags":["PaymentSchedules"];"summary":"Cancels an active payment schedule.";"operationId":"PaymentSchedules_Cancel";"consumes":[];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"id";"in":"path";"description":"The public Id of the payment schedule.";"required":true;"type":"string"};{"name":"impersonationAccountKey";"in":"header";"de",true,95,95,85,"The retrieved documentation directly includes the correct endpoint for canceling a payment schedule: POST /api/v2/paymentSchedules/{id}/cancel. It clearly lists the required path parameter ('id') and the optional header parameter ('impersonationAccountKey'), along with their types and descriptions. The summary and response codes are also provided, making it clear how to use the endpoint. While there is no explicit example payload or request/response sample, the information is sufficient for a developer to construct the API call. Extra endpoints are present but do not detract from the clarity of the correct one.",""
2025-10-09T13:07:07.638Z,epaypolicy-api,"ePayPolicy API","Can you calculate transaction fees for me","transaction fee calculation API endpoint parameters",7,"  === OPENAPI OPERATIONS ===  [GET /api/v2/transactions] {"tags":["Transactions"];"summary":"Retrieves a list of Transactions based on search parameters.";"operationId":"Transactions_Search";"consumes":[];"produces":["application/json";"text/json";"application/xml";"text/xml"];"parameters":[{"name":"beginDate";"in":"query";"description":"When filtering by date; the earliest permitted date. Default is 30 days ago. This parameter is ignored if beginCreateDate or endCreateDate is provided.";"required":false;"type":"string";"format":"date-time"};{"name":"endDate";"in":"query";"description":"When filtering by date; the latest permitted date. Default is now. This parameter is ignored if beginCreateDate or endCreateDate is provided.";"required":false;"type":"string";"format":"date-time"};{"name":"beginCreateDate";"in":"query";"description":"When filtering by create date; the earliest permitted date. Default is null; unless endCreateDate provided then default is 30 days ago.";"required":false;"type":"string";"format":"date-time"};{"name":"endCreateDate";"in":"query";"description":"When filtering by create date; the latest permitted date. Default is null.";"required":false;"type":"string";"format":"date-time"};{"name":"transactionSearchTypeId";"in":"query";"description":"The type of transaction search to perform. Default is Processed.";"required":false;"type":"string";"enum":["Processed";"Rejected";"PendingApproval";"Chargeback";"PendingMyApproval";"ProcessingStopped";"Refunds";"Returns"]};{"name":"minAmount";"in":"query";"description":"When filtering by amount; the minimum permitted amount.";"required":false;"type":"number";"format":"double"};{"name":"maxAmount";"in":"query";"description":"When filtering by amount; the maximum permitted amount.";"required":false;"type":"number";"format":"double"};{"name":"accountNumber";"in":"query";"description":"When filtering by payment method details; the last four digits of the payment method's account number.";"required":false;"type":",true,95,95,85,"The retrieved documentation directly includes the correct endpoint for calculating transaction fees: GET /api/v2/transactionFees. It clearly lists the required 'amount' query parameter and mentions an optional 'impersonationAccountKey' header. The response codes and expected response model are described. However, there is no concrete example of a request or response, and the description of the response model is referenced but not shown, which slightly reduces completeness. Overall, the documentation is highly relevant and actionable for a developer wanting to calculate transaction fees.",""
2025-10-09T13:07:15.812Z,twitter-api,"Twitter API","How is pagination handled in the Twitter API?","Twitter API pagination endpoints parameters next_token cursor documentation",10,"  === SECURITY ===  {   "securitySchemes": {     "BearerToken": {       "type": "http";       "scheme": "bearer"     };     "OAuth2UserToken": {       "type": "oauth2";       "flows": {         "authorizationCode": {           "authorizationUrl": "https://api.x.com/2/oauth2/authorize";           "tokenUrl": "https://api.x.com/2/oauth2/token";           "scopes": {             "block.read": "View accounts you have blocked.";             "bookmark.read": "Read your bookmarked Posts.";             "bookmark.write": "Create and delete your bookmarks.";             "dm.read": "Read all your Direct Messages.";             "dm.write": "Send and manage your Direct Messages.";             "follows.read": "View accounts you follow and accounts following you.";             "follows.write": "Follow and unfollow accounts on your behalf.";             "like.read": "View Posts you have liked and likes you can see.";             "like.write": "Like and unlike Posts on your behalf.";             "list.read": "View Lists; members; and followers of Lists you created or are a member of; including private Lists.";             "list.write": "Create and manage Lists on your behalf.";             "media.write": "Upload media; such as photos and videos; on your behalf.";             "mute.read": "View accounts you have muted.";             "mute.write": "Mute and unmute accounts on your behalf.";             "offline.access": "Request a refresh token for the app.";             "space.read": "View all Spaces you have access to.";             "timeline.read": "View all Custom Timelines you can see; including public Custom Timelines from other developers.";             "tweet.moderate.write": "Hide and unhide replies to your Posts.";             "tweet.read": "View all Posts you can see; including those from protected accounts.";             "tweet.write": "Post and repost on your behalf.";             "users.read": "View any account you can see; including protected accounts."           }     ",true,85,85,80,"The retrieved documentation provides clear information about how pagination is handled in the Twitter API. It mentions the use of 'next_token' and 'pagination_token' parameters for paginating through results, and specifies that these tokens should be used as provided by the API response. The documentation also lists relevant endpoints (e.g., GET /2/users/:id/liked_tweets, GET /2/tweets/:id/liking_users, GET /2/communities/search) and shows the pagination parameters in the OpenAPI spec. However, while parameter descriptions are present, there are no concrete request/response examples or step-by-step usage instructions, which would make the documentation more complete for developers. Overall, the right endpoints and parameters are present and described, but the lack of examples and explicit usage steps prevents a perfect score.",""
2025-10-09T13:07:20.728Z,twitter-api,"Twitter API","How do I get posts from a user's timeline?","get user timeline posts API endpoint parameters",10,"up group; you can retrieve a list of accounts that have liked a Post; or a list of Posts that an account has liked. These endpoints include:  * Posts liked by a user - GET /2/users/:id/liked\_tweets * Users who have liked a Post - GET /2/tweets/:id/liking\_users You can authenticate these endpoints with either [OAuth 1.0a User Context](/resources/fundamentals/authentication) or [OAuth 2.0 Bearer Token](/resources/fundamentals/authentication#oauth-2-0). For the liked Posts endpoints; pagination tokens will be provided for paging through large sets of results. The liking users endpoint limits you to a total of 100 liking accounts per post for all time. Additionally; the liked Posts endpoint is also subject to the monthly [Post cap](/x-api/fundamentals/post-cap) applied at the Project level.   ###   [​](#manage-likes)  Manage Likes  The manage Likes endpoints enable you to like or unlike a specified Post on behalf of an authenticated account. For this endpoint group; there are two methods available POST and DELETE. The POST method allows you to like a Post; and the DELETE method will enable you to unlike a Post. Since you are making requests on behalf of a user; you must authenticate these endpoints with [OAuth 1.0a User Context](/resources/fundamentals/authentication) and use the Access Tokens associated with the user; which can be generated using the [3-legged OAuth flow](/resources/fundamentals/authentication#oauth-1-0a-2)/obtaining-user-access-tokens). You can like a Post from your account or an account of an authenticated user. With both endpoints; there is a user rate limit of 50 requests per 15 minutes per endpoint. To access these endpoint; you must have an approved [developer account](/resources/fundamentals/developer-portal). When authenticating; you must use keys and tokens from a [developer App](/resources/fundamentals/developer-apps) that is located within a [Project](/resources/fundamentals/projects). Learn more about getting access to the X API v2 endpoi",true,90,95,85,"The retrieved documentation includes the correct endpoint for getting a user's timeline posts: GET /2/users/{id}/timelines/reverse_chronological. It also provides details on required and optional parameters (such as id, since_id, until_id, max_results, pagination_token, exclude, start_time), and describes their usage. While there is some extra information about related endpoints (liked tweets, user tweets), the main endpoint for the user's timeline is clearly present and well-documented. The only area for improvement would be the inclusion of a concrete example request/response, but overall, the documentation is highly actionable for a developer.",""
2025-10-09T13:07:29.723Z,trello-api,"Trello API","How do I create a new board?","create board API endpoint parameters request body",9,"equired  #### Query parameters  **value**  TrelloID  ### Responses  Success  PUT/lists/{id}/closed  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/closed?key=APIKey&token=APIToken'`  PUT  ## Move List to Board  Move a List to a different Board  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  TrelloID  Required  #### Query parameters  **value**  TrelloID  Required  ### Responses  Success  PUT/lists/{id}/idBoard  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/idBoard?value=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken'`  PUT  ## Update a field on a List  Rename a list  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  TrelloID  Required  **field**  string  Required  #### Query parameters  **value**  oneOf \[string; number; string; boolean\]  ### Responses  Success  PUT/lists/{id}/{field}  curl  Node.js  Java  Python  PHP  `12` `curl --request PUT \ --url 'https://api.trello.com/1/lists/{id}/{field}?key=APIKey&token=APIToken'`  GET  ## Get Actions for a List  Get the Actions on a List  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  string  Required  #### Query parameters  **filter**  string  ### Responses  Success  GET/lists/{id}/actions  curl  Node.js  Java  Python  PHP  `12` `curl --request GET \ --url 'https://api.trello.com/1/lists/{id}/actions?key=APIKey&token=APIToken'`  GET  ## Get the Board a List is on  Get the board a list is on  Forge and OAuth2 apps cannot access this REST resource.  ### Request  #### Path parameters  **id**  string  Required  #### Query parameters  **fields**  string  ### Responses  Success  GET/lists/{id}/board  curl  Node.js  Java  Python  PHP  `12` `curl --request GET \ --url 'https://api.trello.com/1/lists/{id}/board?key=APIKey&token=APIToken'`  GET  ## Get Cards in ",true,90,95,85,"The retrieved documentation includes the correct endpoint for creating a new board: POST /boards/. It clearly lists the required and optional query parameters (e.g., name, defaultLabels, defaultLists, desc, idOrganization, etc.) and provides a concrete curl example for making the API call. While there is some extra information about unrelated endpoints, the relevant section is easy to find and contains the necessary details for a developer to successfully create a board. The only minor shortcoming is that the documentation could be slightly clearer about which parameters are required versus optional, but overall, it is highly actionable.",""
2025-10-09T13:07:37.456Z,trello-api,"Trello API","How do I get a list of all cards in a board?","Trello API get all cards in board endpoint",6,"/trello/rest/api-group-emoji/#api-group-emoji) * [Enterprises](/cloud/trello/rest/api-group-enterprises/#api-group-enterprises) * [Labels](/cloud/trello/rest/api-group-labels/#api-group-labels) * [Lists](/cloud/trello/rest/api-group-lists/#api-group-lists) * [Members](/cloud/trello/rest/api-group-members/#api-group-members) * [Notifications](/cloud/trello/rest/api-group-notifications/#api-group-notifications) * [Organizations](/cloud/trello/rest/api-group-organizations/#api-group-organizations) * [Plugins](/cloud/trello/rest/api-group-plugins/#api-group-plugins) * [Search](/cloud/trello/rest/api-group-search/#api-group-search) * [Tokens](/cloud/trello/rest/api-group-tokens/#api-group-tokens) * [Webhooks](/cloud/trello/rest/api-group-webhooks/#api-group-webhooks)  Cloud  Trello / Reference / REST API  # Cards  [Postman Collection](/cloud/trello/trello.postman.json)  [OpenAPI](https://dac-static.atlassian.com/cloud/trello/swagger.v3.json?%5Fv=1.740.0)  Operations  [POST/cards](/cloud/trello/rest/api-group-cards/#api-cards-post)[GET/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-get)[PUT/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-put)[DEL/cards/{id}](/cloud/trello/rest/api-group-cards/#api-cards-id-delete)[GET/cards/{id}/{field}](/cloud/trello/rest/api-group-cards/#api-cards-id-field-get)[GET/cards/{id}/actions](/cloud/trello/rest/api-group-cards/#api-cards-id-actions-get)[GET/cards/{id}/attachments](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-get)[POST/cards/{id}/attachments](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-post)[GET/cards/{id}/attachments/{idAttachment}](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-idattachment-get)[DEL/cards/{id}/attachments/{idAttachment}](/cloud/trello/rest/api-group-cards/#api-cards-id-attachments-idattachment-delete)[GET/cards/{id}/board](/cloud/trello/rest/api-group-cards/#api-cards-id-board-get)[GET/cards/{id}/checkItemStates](/cloud/trello/rest/api-g",true,90,95,60,"The retrieved documentation includes the correct endpoint for getting all cards in a board: GET /boards/{id}/cards. It also mentions a filtered version: GET /boards/{id}/cards/{filter}, which is relevant. The endpoint is clearly identified, and the required path parameter ('id') is shown. However, the documentation lacks concrete usage examples, details about optional query parameters, and sample responses, which would be necessary for a developer to make the call confidently. The description is brief and does not provide a full request/response example or authentication requirements.",""
2025-10-09T13:07:50.224Z,gemini-api,"Gemini API","How do I generate content using the Gemini API?","Gemini API generate content endpoint documentation parameters",10,"s.com/v1beta/models/gemini-2.5-flash:generateContent" \   -H "x-goog-api-key: $GEMINI_API_KEY" \   -H 'Content-Type: application/json' \   -X POST \   -d '{     "contents": [       {         "parts": [           {             "text": "Explain how AI works in a few words"           }         ]       }     ]   }'  ```  ## Meet the models  [Start building with Gemini](https://aistudio.google.com/apps)    2.5 Prospark    Our most powerful thinking model with features for complex reasoning and much more  [](/gemini-api/docs/models#gemini-2.5-pro)    2.5 Flashspark    Our most balanced model; with a 1 million token context window and more  [](/gemini-api/docs/models/gemini#gemini-2.5-flash)    2.5 Flash-Litespark    Our fastest and most cost-efficient multimodal model with great performance for high-frequency tasks  [](/gemini-api/docs/models/gemini#gemini-2.5-flash-lite)    Veo 3video\_library    Our state of the art video generation model; with native audio  [](/gemini-api/docs/video)    Gemini 2.5 Flash Imageimagesmode    (Nano Banana); our highly effective and precise image generation model  [](/gemini-api/docs/image-generation)    Gemini Embeddingsdata\_array    Our first Gemini embedding model; designed for production RAG workflows  [](/gemini-api/docs/embeddings)   ## Explore the API  ### Native Image Generation (aka Nano Banana)  Generate and edit highly contextual images natively with Gemini 2.5 Flash Image.  [](/gemini-api/docs/image-generation)   ### Explore long context  Input millions of tokens to Gemini models and derive understanding from unstructured images; videos; and documents.  [](/gemini-api/docs/long-context)   ### Generate structured outputs  Constrain Gemini to respond with JSON; a structured data format suitable for automated processing.  [](/gemini-api/docs/structured-output)   ### Start building with the Gemini API  [Get started](/gemini-api/docs/quickstart)   Except as otherwise noted; the content of this page is licensed under the [Creative Co",true,90,95,85,"The retrieved documentation includes a clear example of how to generate content using the Gemini API, showing the correct endpoint (POST to /v1beta/models/gemini-2.5-flash:generateContent), required headers (API key, Content-Type), and a sample request body with the 'contents' and 'parts' structure. The endpoint is explicitly shown and matches the user's intent. While the example is present and sufficient for a basic call, the documentation could be more complete by listing all possible parameters, their types, and optional fields. However, for a developer looking to quickly generate content, the provided example and endpoint are highly relevant and actionable.",""
2025-10-09T13:07:55.791Z,gemini-api,"Gemini API","How do I count tokens I used?","count tokens API endpoint usage parameter documentation",10,"lem";"thumb-up"\];\["Other";"otherUp";"thumb-up"\]\];\[\["Missing the information I need";"missingTheInformationINeed";"thumb-down"\];\["Too complicated / too many steps";"tooComplicatedTooManySteps";"thumb-down"\];\["Out of date";"outOfDate";"thumb-down"\];\["Samples / code issue";"samplesCodeIssue";"thumb-down"\];\["Other";"otherDown";"thumb-down"\]\];\["Last updated 2025-09-22 UTC."\];\[\];\[\]\]   * On this page * [Method: models.get](#method:-models.get)      * [Endpoint](#endpoint)      * [Path parameters](#path-parameters)      * [Request body](#request-body)      * [Example request](#example-request)      * [Response body](#response-body) * [Method: models.list](#method:-models.list)      * [Endpoint](#endpoint%5F1)      * [Query parameters](#query-parameters)      * [Request body](#request-body%5F1)      * [Example request](#example-request%5F1)      * [Response body](#response-body%5F1) * [REST Resource: models](#rest-resource:-models) * [Resource: Model](#Model) * [Method: models.predict](#method:-models.predict)      * [Endpoint](#endpoint%5F2)      * [Path parameters](#path-parameters%5F1)      * [Request body](#request-body%5F2)      * [Response body](#response-body%5F2) * [Method: models.predictLongRunning](#method:-models.predictlongrunning)      * [Endpoint](#endpoint%5F3)      * [Path parameters](#path-parameters%5F2)      * [Request body](#request-body%5F3)      * [Response body](#response-body%5F3)   A new native audio model is available for the Live API. [Learn more](https://ai.google.dev/gemini-api/docs/live)   * [ Home](https://ai.google.dev/) * [ Gemini API](https://ai.google.dev/gemini-api) * [ API Reference](https://ai.google.dev/api)  Was this helpful?  #  Models   * On this page * [Method: models.get](#method:-models.get)      * [Endpoint](#endpoint)      * [Path parameters](#path-parameters)      * [Request body](#request-body)      * [Example request](#example-request)      * [Response body](#response-body) * [Method: models.list](#meth",true,35,20,15,"The retrieved documentation does not directly answer the user's question about how to count tokens used in API calls. While it mentions model metadata, token limits, and some model parameters (like max output tokens), it does not specify any endpoint or method for retrieving token usage statistics or counting tokens for a given request. The endpoints shown (e.g., models.get, models.list, models.predict) are related to model information and prediction, not token counting or usage tracking. There are no example requests or parameter details for a token counting feature. Thus, the documentation is only tangentially related and lacks the specific, actionable information the user needs.",""
2025-10-09T13:08:02.403Z,linear-api,"Linear API","How do I create a new triage issue?","create triage issue API endpoint parameters request example",10,"on":"The time at which the issue entered triage.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"triagedAt";"description":"The time at which the issue left triage.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"canceledAt";"description":"The time at which the issue was moved into canceled state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"autoClosedAt";"description":"The time at which the issue was automatically closed by the auto pruning process.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"autoArchivedAt";"description":"The time at which the issue was automatically archived by the auto pruning process.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"dueDate";"description":"The date at which the issue is due.";"args":[];"type":{"kind":"SCALAR";"name":"TimelessDate";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaStartedAt";"description":"The time at which the issue's SLA began.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaMediumRiskAt";"description":"The time at which the issue's SLA will enter medium risk state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaHighRiskAt";"description":"The time at which the issue's SLA will enter high risk state.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofType":null};"isDeprecated":false;"deprecationReason":null};{"name":"slaBreachesAt";"description":"The time at which the issue's SLA will breach.";"args":[];"type":{"kind":"SCALAR";"name":"DateTime";"ofT",true,45,10,40,"The retrieved documentation contains a lot of relevant parameter and field definitions related to issues and triage, such as teamId, labelIds, dueDate, and triage responsibility inputs. However, it does not clearly identify the specific API endpoint to use for creating a new triage issue (e.g., no mention of a POST endpoint or mutation name). There is also no concrete request example or clear step-by-step usage instructions. While the parameter details are somewhat helpful, the lack of endpoint identification and example usage significantly limits the documentation's practical value for a developer trying to make this API call.",""
2025-10-09T13:08:07.847Z,linear-api,"Linear API","How do I get a list of all issues?","list issues API endpoint documentation",10,"es title.";"type":{"kind":"INPUT_OBJECT";"name":"StringComparator";"ofType":null};"defaultValue":null};{"name":"description";"description":"Comparator for the issues description.";"type":{"kind":"INPUT_OBJECT";"name":"NullableStringComparator";"ofType":null};"defaultValue":null};{"name":"priority";"description":"Comparator for the issues priority. 0 = No priority; 1 = Urgent; 2 = High; 3 = Normal; 4 = Low.";"type":{"kind":"INPUT_OBJECT";"name":"NullableNumberComparator";"ofType":null};"defaultValue":null};{"name":"estimate";"description":"Comparator for the issues estimate.";"type":{"kind":"INPUT_OBJECT";"name":"EstimateComparator";"ofType":null};"defaultValue":null};{"name":"startedAt";"description":"Comparator for the issues started at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"triagedAt";"description":"Comparator for the issues triaged at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"completedAt";"description":"Comparator for the issues completed at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"canceledAt";"description":"Comparator for the issues canceled at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"archivedAt";"description":"Comparator for the issues archived at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"autoClosedAt";"description":"Comparator for the issues auto closed at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"autoArchivedAt";"description":"Comparator for the issues auto archived at date.";"type":{"kind":"INPUT_OBJECT";"name":"NullableDateComparator";"ofType":null};"defaultValue":null};{"name":"addedToCycleAt";"description":"Comparator for the ",true,35,10,20,"The retrieved documentation contains a list of possible filters and comparators related to issues, which suggests it is related to querying or listing issues. However, it does not clearly identify any API endpoint (such as GET /issues or a GraphQL query name), nor does it provide a concrete example or a clear list of required/optional parameters for making the API call. The information is fragmented and mostly describes filter objects, making it difficult for a developer to know exactly how to make a call to 'get a list of all issues.'",""
2025-10-09T13:08:15.090Z,claude-api,"Claude API","How does Claude handle Rate Limiting?","Claude API rate limiting endpoints parameters documentation",10,"-data-retention-period%3F) * [Which Claude Code deployments are supported?](#which-claude-code-deployments-are-supported%3F) * [What does it cost to use this API?](#what-does-it-cost-to-use-this-api%3F) * [How do I calculate tool acceptance rates?](#how-do-i-calculate-tool-acceptance-rates%3F) * [What time zone is used for the date parameter?](#what-time-zone-is-used-for-the-date-parameter%3F) * [See also](#see-also)  **The Admin API is unavailable for individual accounts.** To collaborate with teammates and add members; set up your organization in **Console → Settings → Organization**.  The Claude Code Analytics Admin API provides programmatic access to daily aggregated usage metrics for Claude Code users; enabling organizations to analyze developer productivity and build custom dashboards. This API bridges the gap between our basic [Analytics dashboard](https://console.anthropic.com/claude-code) and the complex OpenTelemetry integration. This API enables you to better monitor; analyze; and optimize your Claude Code adoption:  * **Developer Productivity Analysis:** Track sessions; lines of code added/removed; commits; and pull requests created using Claude Code * **Tool Usage Metrics:** Monitor acceptance and rejection rates for different Claude Code tools (Edit; MultiEdit; Write; NotebookEdit) * **Cost Analysis:** View estimated costs and token usage broken down by Claude model * **Custom Reporting:** Export data to build executive dashboards and reports for management teams * **Usage Justification:** Provide metrics to justify and expand Claude Code adoption internally  **Admin API key required**This API is part of the [Admin API](/en/api/administration-api). These endpoints require an Admin API key (starting with `sk-ant-admin...`) that differs from standard API keys. Only organization members with the admin role can provision Admin API keys through the [Claude Console](https://console.anthropic.com/settings/admin-keys).  ##   [​](#quick-start)  Quick start  Get",true,30,10,5,"The retrieved documentation does not directly answer the user's question about how Claude handles rate limiting. There is a mention of a 'Rate limits' documentation link, but no actual rate limit details, headers, or error codes are included in the retrieved text. No specific endpoint for checking rate limits or handling rate limiting is mentioned. There are no parameter details, error responses, or example requests related to rate limiting. The content is mostly about usage analytics, SDKs, and general API usage, not about rate limiting mechanics or developer guidance for handling rate limits.",""
2025-10-09T13:08:21.863Z,claude-api,"Claude API","How do I create a new message in a conversation?","create message API endpoint conversation parameters",10,"2` or specify the header multiple times for each beta.  [​](#parameter-anthropic-version)  anthropic-version  string  required  The version of the Claude API you want to use.  Read more about versioning and our version history [here](https://docs.claude.com/en/api/versioning).  [​](#parameter-x-api-key)  x-api-key  string  required  Your unique API key for authentication.  This key is required in the header of all API requests; to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.  #### Body  application/json  [​](#body-messages)  messages  InputMessage · object\[\]  required  Input messages.  Our models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`; you specify the prior conversational turns with the `messages` parameter; and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.  Each input message must be an object with a `role` and `content`. You can specify a single `user`\-role message; or you can include multiple `user` and `assistant` messages.  If the final message uses the `assistant` role; the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.  Example with a single `user` message:  ``` [{"role": "user"; "content": "Hello; Claude"}] ```  Example with multiple conversational turns:  ``` [   {"role": "user"; "content": "Hello there."};   {"role": "assistant"; "content": "Hi; I'm Claude. How can I help you?"};   {"role": "user"; "content": "Can you explain LLMs in plain English?"}; ] ```  Example with a partially-filled response from Claude:  ``` [   {"role": "user"; "content": "What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun"};   {"role": "assistant"; "content": "The bes",true,85,60,90,"The retrieved documentation contains highly relevant information about creating a new message in a conversation, including required headers (x-api-key, anthropic-version), required body parameters (model, messages), and detailed examples of the messages array. However, the actual API endpoint URL (e.g., POST /v1/messages or similar) is not explicitly shown in the retrieved content, which lowers the endpoint score. The completeness is high because parameter requirements, types, and example payloads are all present, making it possible for a developer to construct a valid API call if they know or can infer the endpoint.",""
2025-10-09T13:08:35.994Z,pokeapi-api,"PokeAPI API","How do I get a list of gen2 pokemons?","GET endpoint list Generation II Pokémon API documentation",10,"Level up"                     * ▶                     language:{} 2 keys                                 * name:"en"                                 * url:"https://pokeapi.co/api/v2/language/9/"      * ▶      pokemon\_species:\[\] 1 item            * ▶            0:{} 2 keys                     * name:"ivysaur"                     * url:"https://pokeapi.co/api/v2/pokemon-species/2/"   View raw JSON (0.321 kB; 19 lines)  #### EvolutionTrigger (type)  | Name             | Description                                                        | Type                                                                              | | ---------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------------------- | | id               | The identifier for this resource.                                  | _integer_                                                                         | | name             | The name for this resource.                                        | _string_                                                                          | | names            | The name of this resource listed in different languages.           | list _[Name](#name)_                                                              | | pokemon\_species | A list of pokemon species that result from this evolution trigger. | list __[NamedAPIResource](#namedapiresource) ([PokemonSpecies](#pokemonspecies))_ |  ## Games (group)  ### Generations (endpoint)  A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation; a new set of Pokémon; Moves; Abilities and Types that did not exist in the previous generation are released.  GET https://pokeapi.co/api/v2/generation/{id or name}/  * * id:1      * name:"generation-i"      * abilities:\[\] 0 items      * ▶      main\_region:{} 2 keys            * name:"kanto"            * url:"https://pokeapi.co/",true,85,90,60,"The documentation correctly surfaces the relevant endpoint for retrieving Pokémon by generation: GET https://pokeapi.co/api/v2/generation/{id or name}/. It explains that each generation resource includes a 'pokemon_species' list, which is exactly what the user needs to get Gen 2 Pokémon. The endpoint is clearly identified, and the purpose is described. However, the documentation does not provide a concrete example of how to use the endpoint for Generation II (e.g., /generation/2 or /generation/generation-ii), nor does it specify required/optional parameters or show a sample response. This limits completeness, but the core information is present and actionable for a developer familiar with REST APIs.",""
2025-10-09T13:08:42.506Z,pokeapi-api,"PokeAPI API","How do find information about a specific berry?","berry endpoint get specific berry API documentation parameters",10,".                 | _string_                           | | previous | The URL for the previous page in the list.             | _string_                           | | results  | A list of unnamed API resources.                       | list _[APIResource](#apiresource)_ |  ## Berries (group)  ### Berries (endpoint)  Berries are small fruits that can provide HP and status condition restoration; stat enhancement; and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.  GET https://pokeapi.co/api/v2/berry/{id or name}/  * * id:1      * name:"cheri"      * growth\_time:3      * max\_harvest:5      * natural\_gift\_power:60      * size:20      * smoothness:25      * soil\_dryness:15      * ▶      firmness:{} 2 keys            * name:"soft"            * url:"https://pokeapi.co/api/v2/berry-firmness/2/"      * ▶      flavors:\[\] 1 item            * ▶            0:{} 2 keys                     * potency:10                     * ▶                     flavor:{} 2 keys                                 * name:"spicy"                                 * url:"https://pokeapi.co/api/v2/berry-flavor/1/"      * ▶      item:{} 2 keys            * name:"cheri-berry"            * url:"https://pokeapi.co/api/v2/item/126/"      * ▶      natural\_gift\_type:{} 2 keys            * name:"fire"            * url:"https://pokeapi.co/api/v2/type/10/"   View raw JSON (0.608 kB; 31 lines)  #### Berry (type)  | Name                 | Description                                                                                                                       | Type                                                                        | | -------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- | | id                   | The identifier for this res",true,95,95,85,"The documentation directly addresses how to find information about a specific berry. It clearly presents the correct endpoint (GET https://pokeapi.co/api/v2/berry/{id or name}/) and explains that either the berry's id or name can be used as a path parameter. The response structure is detailed, listing all relevant fields returned for a berry. While there is no explicit example API call shown, the parameter usage is clear from the endpoint format and the sample data. The documentation also includes extra context about related endpoints (firmness, flavor), but this does not detract from the clarity of the main answer.",""
2025-10-09T13:08:51.076Z,jira-api,"JIRA API","Get all issues from the current active sprint, categorize them by status","Jira API get issues active sprint group by status endpoint parameters",10,"m/rest/v3/api-group-issue-type-properties/#api-group-issue-type-properties) * [Issue type schemes](/cloud/jira/platform/rest/v3/api-group-issue-type-schemes/#api-group-issue-type-schemes) * [Issue type screen schemes](/cloud/jira/platform/rest/v3/api-group-issue-type-screen-schemes/#api-group-issue-type-screen-schemes) * [Issue types](/cloud/jira/platform/rest/v3/api-group-issue-types/#api-group-issue-types) * [Issue votes](/cloud/jira/platform/rest/v3/api-group-issue-votes/#api-group-issue-votes) * [Issue watchers](/cloud/jira/platform/rest/v3/api-group-issue-watchers/#api-group-issue-watchers) * [Issue worklog properties](/cloud/jira/platform/rest/v3/api-group-issue-worklog-properties/#api-group-issue-worklog-properties) * [Issue worklogs](/cloud/jira/platform/rest/v3/api-group-issue-worklogs/#api-group-issue-worklogs) * [Issues](/cloud/jira/platform/rest/v3/api-group-issues/#api-group-issues) * [JQL](/cloud/jira/platform/rest/v3/api-group-jql/#api-group-jql) * [JQL functions (apps)](/cloud/jira/platform/rest/v3/api-group-jql-functions--apps-/#api-group-jql-functions--apps-) * [Jira expressions](/cloud/jira/platform/rest/v3/api-group-jira-expressions/#api-group-jira-expressions) * [Jira settings](/cloud/jira/platform/rest/v3/api-group-jira-settings/#api-group-jira-settings) * [Labels](/cloud/jira/platform/rest/v3/api-group-labels/#api-group-labels) * [License metrics](/cloud/jira/platform/rest/v3/api-group-license-metrics/#api-group-license-metrics) * [Myself](/cloud/jira/platform/rest/v3/api-group-myself/#api-group-myself) * [Permission schemes](/cloud/jira/platform/rest/v3/api-group-permission-schemes/#api-group-permission-schemes) * [Permissions](/cloud/jira/platform/rest/v3/api-group-permissions/#api-group-permissions) * [Plans](/cloud/jira/platform/rest/v3/api-group-plans/#api-group-plans) * [Priority schemes](/cloud/jira/platform/rest/v3/api-group-priority-schemes/#api-group-priority-schemes) * [Project avatars](/cloud/jira/platform/rest/v3/api-group-project",true,30,20,10,"The retrieved documentation does not directly address the user's question about getting all issues from the current active sprint and grouping them by status. There is no mention of the Jira Agile (board/sprint) endpoints (e.g., /rest/agile/1.0/board/{boardId}/sprint/{sprintId}/issue), which are required for fetching sprint issues. The closest relevant links are generic references to 'Issues' and 'JQL', but no specific endpoint or example is provided for retrieving issues from an active sprint. There is also no information about required parameters (such as boardId, sprintId, or JQL for filtering by active sprint), nor any example of grouping by status. Most of the content is about workflow rules, validators, and unrelated endpoints, making it insufficient for a developer to make the correct API call.",""
2025-10-09T13:08:56.545Z,jira-api,"JIRA API","Get all issues marked as Blocked or High Priority that are still in progress?","issues API filter blocked high priority status in progress endpoint parameters",10,"oud  Jira Cloud platform / Reference / REST API v3  # Issue priorities  [Postman Collection](/cloud/jira/platform/jiracloud.3.postman.json)  [OpenAPI](https://dac-static.atlassian.com/cloud/jira/platform/swagger-v3.v3.json?%5Fv=1.8197.0)  This resource represents issue priorities. Use it to get; create and update issue priorities and details for individual issue priorities.  Operations  [GET/rest/api/3/priority](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-get)[POST/rest/api/3/priority](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-post)[PUT/rest/api/3/priority/default](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-default-put)[PUT/rest/api/3/priority/move](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-move-put)[GET/rest/api/3/priority/search](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-search-get)[GET/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-get)[PUT/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-put)[DEL/rest/api/3/priority/{id}](/cloud/jira/platform/rest/v3/api-group-issue-priorities/#api-rest-api-3-priority-id-delete)  GET  ## Get prioritiesDeprecated  Returns the list of all issue priorities.  **[Permissions](/cloud/jira/platform/rest/v3/intro/#permissions) required:** Permission to access Jira.  **[Data Security Policy](/cloud/confluence/data-security-developer-guide)**: Exempt from app access rules  ##### Scopes  **[OAuth 2.0 scopes](/cloud/jira/platform/scopes-for-oauth-2-3LO-and-forge-apps/) required:**  **Classic**RECOMMENDED:`read:jira-work`  **Granular**:`read:priority:jira`  **[Connect app scope](/cloud/jira/platform/scopes) required**: `READ`  ### Request  This request has no parameters.  ### Responses  Returned if the request is successful.  #### ",true,20,10,10,"The retrieved documentation does not directly address the user's question about filtering issues by status (In Progress) and priority (Blocked or High Priority). Instead, it focuses on issue priorities endpoints (e.g., GET /rest/api/3/priority) and filter sharing, but does not mention the main issues search endpoint (typically GET /rest/api/3/search) or how to use JQL to filter issues by status and priority. There are no details about filtering parameters, no example queries, and no clear guidance on how to retrieve issues matching the user's criteria. The correct endpoint and usage instructions are missing, so the documentation is not helpful for making the desired API call.",""
2025-10-09T13:09:02.107Z,attio-api,"Attio API","Get all people with a non-empty email address","GET people endpoint filter non-empty email address",10,"des/creating-an-app)[REST API](/rest-api/overview)  * [Developer dashboard](https://build.attio.com/) * [Support](https://attio.com/help)  ##### Introduction  * [Overview](/rest-api/overview)  ##### How-to guides  * [How to authenticate requests](/rest-api/how-to/authentication) * [How to handle rate limits](/rest-api/how-to/rate-limiting) * [How to apply filters and sorts](/rest-api/how-to/filtering-and-sorting) * [How to paginate API results](/rest-api/how-to/pagination) * [How to configure webhooks](/rest-api/how-to/webhooks)  ##### Tutorials  * [Connect an app to Attio through OAuth](/rest-api/tutorials/connect-an-app-through-oauth)  ##### Endpoint reference  * [OpenAPI](/rest-api/endpoint-reference/openapi) * * * [GETList attributes](/rest-api/endpoint-reference/attributes/list-attributes)            * [POSTCreate an attribute](/rest-api/endpoint-reference/attributes/create-an-attribute)            * [GETGet an attribute](/rest-api/endpoint-reference/attributes/get-an-attribute)            * [PATCHUpdate an attribute](/rest-api/endpoint-reference/attributes/update-an-attribute)            * [GETList select options](/rest-api/endpoint-reference/attributes/list-select-options)            * [POSTCreate a select option](/rest-api/endpoint-reference/attributes/create-a-select-option)            * [PATCHUpdate a select option](/rest-api/endpoint-reference/attributes/update-a-select-option)            * [GETList statuses](/rest-api/endpoint-reference/attributes/list-statuses)            * [POSTCreate a status](/rest-api/endpoint-reference/attributes/create-a-status)            * [PATCHUpdate a status](/rest-api/endpoint-reference/attributes/update-a-status)  ##### Webhook reference  Get an attribute  Copy  Ask AI  ``` curl --request GET \   --url https://api.attio.com/v2/{target}/{identifier}/attributes/{attribute} \   --header 'Authorization: Bearer <token>' ```  Copy  Ask AI  ``` {   "data": {     "id": {       "workspace_id": "14beef7a-99f7-4534-a87e-70b564330a4c";",true,55,60,40,"The retrieved documentation includes references to endpoints related to 'people' records, such as POST /v2/objects/records/search and mentions filtering and searching. However, it does not clearly show how to filter for non-empty email addresses specifically, nor does it provide a direct example or parameter list for this use case. The correct general area (searching/filtering people records) is present, but the details on filtering by non-empty email are missing. The endpoint is somewhat identifiable (search records), but the exact usage and required parameters for the user's scenario are not clearly documented.",""
2025-10-09T13:09:07.904Z,attio-api,"Attio API","Get all members of a workspace","workspace API get all members endpoint list users parameters",8,"des/creating-an-app)[REST API](/rest-api/overview)  * [Developer dashboard](https://build.attio.com/) * [Support](https://attio.com/help)  ##### Introduction  * [Overview](/rest-api/overview)  ##### How-to guides  * [How to authenticate requests](/rest-api/how-to/authentication) * [How to handle rate limits](/rest-api/how-to/rate-limiting) * [How to apply filters and sorts](/rest-api/how-to/filtering-and-sorting) * [How to paginate API results](/rest-api/how-to/pagination) * [How to configure webhooks](/rest-api/how-to/webhooks)  ##### Tutorials  * [Connect an app to Attio through OAuth](/rest-api/tutorials/connect-an-app-through-oauth)  ##### Endpoint reference  * [OpenAPI](/rest-api/endpoint-reference/openapi) * * * [GETList attributes](/rest-api/endpoint-reference/attributes/list-attributes)            * [POSTCreate an attribute](/rest-api/endpoint-reference/attributes/create-an-attribute)            * [GETGet an attribute](/rest-api/endpoint-reference/attributes/get-an-attribute)            * [PATCHUpdate an attribute](/rest-api/endpoint-reference/attributes/update-an-attribute)            * [GETList select options](/rest-api/endpoint-reference/attributes/list-select-options)            * [POSTCreate a select option](/rest-api/endpoint-reference/attributes/create-a-select-option)            * [PATCHUpdate a select option](/rest-api/endpoint-reference/attributes/update-a-select-option)            * [GETList statuses](/rest-api/endpoint-reference/attributes/list-statuses)            * [POSTCreate a status](/rest-api/endpoint-reference/attributes/create-a-status)            * [PATCHUpdate a status](/rest-api/endpoint-reference/attributes/update-a-status)  ##### Webhook reference  Get an attribute  Copy  Ask AI  ``` curl --request GET \   --url https://api.attio.com/v2/{target}/{identifier}/attributes/{attribute} \   --header 'Authorization: Bearer <token>' ```  Copy  Ask AI  ``` {   "data": {     "id": {       "workspace_id": "14beef7a-99f7-4534-a87e-70b564330a4c";",true,85,90,65,"The retrieved documentation includes the correct endpoint for listing all workspace members: GET /v2/workspace_members, and clearly states its purpose. The required OAuth scope (user_management:read) is also mentioned. However, the documentation lacks a concrete example of the API call (e.g., curl command), and does not specify if there are any optional query parameters (such as pagination, filtering, etc.), nor does it show a sample response. While the endpoint is clearly identified and the purpose is unambiguous, the lack of parameter and example details reduces the completeness score.",""
2025-10-09T13:09:17.559Z,posthog-api,"PostHog API","Get the project IDs of all projects in my posthog account.","posthog API list projects endpoint project IDs authentication",10,"# API overview  ###   #### Contents  PostHog has a powerful API that enables you to capture; evaluate; create; update; and delete nearly all of your information in PostHog. You can use it to [pull information into your app](/tutorials/embedded-analytics); update metadata programmatically; [capture events from any language that can send HTTP requests](/tutorials/api-capture-events); and more.  The API is available for all users and instances. It contains two types of endpoints:  1. **Public POST-only endpoints** such as [/i/v0/e](/docs/api/capture) and [/flags](/docs/api/flags) are used for capturing events; batching events; updating person or group information; and evaluating feature flags. These don't require authentication; but use [your project API key](https://app.posthog.com/project/settings) to handle the request. 2. **Private `GET`; `POST`; `PATCH`; `DELETE` endpoints** are used for [querying](/docs/api/queries); creating; updating; or deleting nearly all data in PostHog. They give the same access as if you were logged into your PostHog instance; but require authentication with your personal API key.  > You must make API requests to the correct domain. On US Cloud; these are `https://us.i.posthog.com` for public endpoints and `https://us.posthog.com` for private ones. On EU Cloud; these are `https://eu.i.posthog.com` for public endpoints and `https://eu.posthog.com` for private ones. For self-hosted instances; use your self-hosted domain. Confirm yours by checking your PostHog instance URL.  ## Private endpoint authentication  Personal API keys can enable full access to your account; like logging in with your email and password. You can create multiple; give them different scopes; and each can be invalidated individually. This improves the security of your PostHog account. Personal API keys need to be kept private and shouldn't be used in the frontend.  #### How to obtain a personal API key  1. Go to the [Personal API keys](https://us.posthog.com/settings/use",true,75,80,60,"The documentation retrieved is generally relevant to the user's question about getting project IDs in PostHog. It repeatedly references the /api/projects/ endpoint as the place to 'find the ID of the project,' which strongly suggests this is the correct endpoint for listing projects and their IDs. However, the actual documentation for the /api/projects/ endpoint itself is not shown in detail—there is no explicit example of a GET /api/projects/ call, no sample response, and no parameter breakdown. Authentication requirements are covered, and the context makes it clear that a personal API key is needed. The endpoint is identified, but the lack of a concrete example or response schema limits completeness.",""
2025-10-09T13:09:24.227Z,posthog-api,"PostHog API","Get all events in the last 30 days for a project","get events endpoint last 30 days project filter parameters API documentation",10," 200 No response body  ---  ## Update cohorts remove person from static cohort  #### Required API key scopes  `cohort:write`  ---  #### Path parameters  * id   integer   A unique integer value identifying this cohort. * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/projects/.  ---  #### Request parameters  * person\_id   string   Person UUID to remove from the cohort  ---  #### Example request  `PATCH ` `/api/projects/:project_id/cohorts/:id/remove_person_from_static_cohort`  `export POSTHOG_PERSONAL_API_KEY=[your personal api key]  curl -X PATCH \      -H "Authorization: Bearer $POSTHOG_PERSONAL_API_KEY" \      <ph_app_host>/api/projects/:project_id/cohorts/:id/remove_person_from_static_cohort/\  	-d person_id="string"  `  #### Example response  ##### Status 200 No response body  ---  ## Retrieve cohorts activity  #### Required API key scopes  `activity_log:read`  ---  #### Path parameters  * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/projects/.  ---  #### Example request  `GET ` `/api/projects/:project_id/cohorts/activity`  `export POSTHOG_PERSONAL_API_KEY=[your personal api key]  curl \      -H "Authorization: Bearer $POSTHOG_PERSONAL_API_KEY" \      <ph_app_host>/api/projects/:project_id/cohorts/activity/  `  #### Example response  ##### Status 200 No response body  ### Community questions  ## Insights  > For instructions on how to authenticate to use this endpoint; see [API overview](/docs/api/overview).  ### Endpoints  | GET    | | ------ | | POST   | | GET    | | POST   | | DELETE | | POST   | | GET    | | PATCH  | | DELETE | | GET    | | GET    | | POST   | | GET    | | POST   |  ## List all insights  #### Required API key scopes  `insight:read`  ---  #### Path parameters  * project\_id   string   Project ID of the project you're trying to access. To find the ID of the project; make a call to /api/pr",true,10,0,0,"The retrieved documentation does not contain any information about an endpoint for retrieving events, filtering by date, or filtering by project. The endpoints shown are related to cohorts, insights, dashboards, and groups, but none are for fetching events or specifying a date range (such as the last 30 days). There is no mention of a 'get events' endpoint, required parameters, or example requests for event retrieval. Therefore, the documentation is not helpful for the user's question.",""
2025-10-09T13:09:32.724Z,github-api,"GitHub API","List all repositories in my GitHub account.","GitHub API list repositories endpoint user authentication parameters",10,"e information; see [Keeping your API credentials secure](/en/rest/overview/keeping-your-api-credentials-secure).  ### [Parameters](#parameters)  Many API methods require or allow you to send additional information in parameters in your request. There are a few different types of parameters: Path parameters; body parameters; and query parameters.  #### [Path parameters](#path-parameters)  Path parameters modify the endpoint path. These parameters are required in your request. For more information; see [Path](#path).  #### [Body parameters](#body-parameters)  Body parameters allow you to pass additional data to the API. These parameters can be optional or required; depending on the endpoint. For example; a body parameter may allow you to specify an issue title when creating a new issue; or specify certain settings when enabling or disabling a feature. The documentation for each GitHub REST API endpoint will describe the body parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["Create an issue" endpoint](/en/rest/issues/issues#create-an-issue) requires that you specify a title for the new issue in your request. It also allows you to optionally specify other information; such as text to put in the issue body; users to assign to the new issue; or labels to apply to the new issue. For an example of a request that uses body parameters; see [Making a request](#making-a-request).  You must authenticate your request to pass body parameters. For more information; see [Authenticating](#authenticating).  #### [Query parameters](#query-parameters)  Query parameters allow you to control what data is returned for a request. These parameters are usually optional. The documentation for each GitHub REST API endpoint will describe any query parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["List public events" endpoint](/en/rest/activity/events#lis",true,25,10,10,"The retrieved documentation does not directly mention or describe the correct endpoint for listing all repositories in a user's GitHub account (which should be GET /user/repos or GET /users/{username}/repos). Instead, it provides general information about parameters and authentication, and details about unrelated endpoints (e.g., collaborators, pull requests). There is no clear mention of the correct endpoint, required parameters, or example usage for listing repositories. As a result, a developer would not be able to confidently make the correct API call based on this documentation.",""
2025-10-09T13:09:39.014Z,github-api,"GitHub API","Get all issues for a specific repository","GitHub API list issues endpoint repository parameters",10,"e information; see [Keeping your API credentials secure](/en/rest/overview/keeping-your-api-credentials-secure).  ### [Parameters](#parameters)  Many API methods require or allow you to send additional information in parameters in your request. There are a few different types of parameters: Path parameters; body parameters; and query parameters.  #### [Path parameters](#path-parameters)  Path parameters modify the endpoint path. These parameters are required in your request. For more information; see [Path](#path).  #### [Body parameters](#body-parameters)  Body parameters allow you to pass additional data to the API. These parameters can be optional or required; depending on the endpoint. For example; a body parameter may allow you to specify an issue title when creating a new issue; or specify certain settings when enabling or disabling a feature. The documentation for each GitHub REST API endpoint will describe the body parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["Create an issue" endpoint](/en/rest/issues/issues#create-an-issue) requires that you specify a title for the new issue in your request. It also allows you to optionally specify other information; such as text to put in the issue body; users to assign to the new issue; or labels to apply to the new issue. For an example of a request that uses body parameters; see [Making a request](#making-a-request).  You must authenticate your request to pass body parameters. For more information; see [Authenticating](#authenticating).  #### [Query parameters](#query-parameters)  Query parameters allow you to control what data is returned for a request. These parameters are usually optional. The documentation for each GitHub REST API endpoint will describe any query parameters that it supports. For more information; see the [GitHub REST API documentation](/en/rest).  For example; the ["List public events" endpoint](/en/rest/activity/events#lis",true,25,10,10,"The retrieved documentation does not directly address the user's question about listing all issues for a specific repository. The correct endpoint for this task is GET /repos/{owner}/{repo}/issues, but this endpoint is not mentioned anywhere in the retrieved content. Instead, the documentation discusses general parameter types (path, body, query) and provides examples for unrelated endpoints (e.g., creating an issue, listing public events, getting repository content, adding collaborators, getting pull requests). There is no clear identification of the correct endpoint, nor are there details about the required or optional parameters for listing issues. As a result, a developer would not be able to confidently make the correct API call based on this documentation.",""
2025-10-09T13:09:47.782Z,snowflake-api,"Snowflake API","List all warehouses in my Snowflake account.","Snowflake API list warehouses endpoint parameters",10,"  | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:create\_like       | _Deprecated. Use the replacement endpoint below._               | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:create-like        | Creates a table like a specified one.                           | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:undrop             | Undrops a table.                                                | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:suspend\_recluster | _Deprecated. Use the replacement endpoint below._               | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:suspend-recluster  | Suspends a table reclustering action.                           | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:resume\_recluster  | _Deprecated. Use the replacement endpoint below._               | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:resume-recluster   | Resumes a suspended table reclustering action.                  | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:rename             | Renames a table.                                                | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:swapwith           | _Deprecated. Use the replacement endpoint below._               | | POST /api/v2/databases/_database_/schemas/._schema_/tables/_name_:swap-with          | Swaps one table with another.                                   |  For reference documentation; see [Snowflake Table API reference](/developer-guide/snowflake-rest-api/reference/table.html).  # Manage functions[¶](#manage-functions "Link to this heading")  The Snowflake REST [Function API](/developer-guide/snowflake-rest-api/reference/function.html) provides the following Snowflake endpoints to manage Snowflake functions:  __Snowflake REST Function API endpoints[¶](#id1 "Link to this table")__ | Endpoint   ",true,90,95,40,"The documentation clearly lists the correct endpoint (GET /api/v2/warehouses) for listing all warehouses in a Snowflake account, which directly answers the user's question. The endpoint is easy to identify in the retrieved content. However, the documentation does not provide details about required or optional parameters, request/response structure, or example API calls for this endpoint. It only gives a high-level description ('Returns a list of available warehouses'), so a developer would need to look elsewhere for specifics on how to use the endpoint in practice.",""
2025-10-09T13:09:52.791Z,snowflake-api,"Snowflake API","Get all tables in the TESTING_SCHEMA in the snowflake SUPERGLUE_DATA database.","Snowflake API list tables in schema SUPERGLUE_DATA.TESTING_SCHEMA endpoint parameters",10,"# Manage database schemas[¶](#manage-database-schemas "Link to this heading")  The Snowflake REST [Schema API](/developer-guide/snowflake-rest-api/reference/schema.html) provides the following endpoints to manage Snowflake schemas:  __Snowflake REST Schemas API endpoints[¶](#id1 "Link to this table")__ | Endpoint                                                | Description                                 | | ------------------------------------------------------- | ------------------------------------------- | | GET /api/v2/databases/_database_/schemas                | Lists the available schemas.                | | POST /api/v2/databases/_database_/schemas               | Creates a schema.                           | | POST /api/v2/databases/_database_/schemas/_name_/clone  | Clones a schema.                            | | POST /api/v2/databases/_database_/schemas/_name_/clone  | Undrop a schema.                            | | POST /api/v2/databases/_database_/schemas/_name_:undrop | Fetches a schema.                           | | PUT /api/v2/databases/_database_/schemas/_name_         | Creates a new or alters an existing schema. | | DELETE /api/v2/databases/_database_/schemas/_name_      | Deletes a schema.                           |  For reference documentation; see [Snowflake Schema API reference](/developer-guide/snowflake-rest-api/reference/schema.html).  # Manage roles[¶](#manage-roles "Link to this heading")  The Snowflake REST [Role API](/developer-guide/snowflake-rest-api/reference/role.html) provides the following endpoints to manage Snowflake roles:  __Snowflake REST Sessions API endpoints[¶](#id1 "Link to this table")__ | Endpoint                                                        | Description                                           | | --------------------------------------------------------------- | ----------------------------------------------------- | | POST /api/v2/roles                                              | Creates a role accord",true,85,90,40,"The documentation correctly surfaces the relevant endpoint for listing tables in a schema: GET /api/v2/databases/_database_/schemas/_schema_/tables. This directly answers the user's need to list all tables in the TESTING_SCHEMA of the SUPERGLUE_DATA database. However, while the endpoint is clearly identified, the documentation does not provide details on required or optional parameters (e.g., how to substitute _database_ and _schema_ with actual values), nor does it include example requests or responses. This limits completeness, as a developer would need to infer or look elsewhere for specifics on path parameter formatting and authentication.",""
2025-10-09T13:10:00.882Z,finwise-api,"Finwise API","Can you create a new account for me?","create account API endpoint user registration parameters",10,"                                                                                                               | | institutionUserIdnullable stringThe unique identifier of the data connection to the financial institution that the account is linked to.                                                                                                                                                                                                                                                                                                              | | datanullable objectAdditional data and configuration for the account.excludeFromBudgetbooleanWhether or not the account transactions should be excluded from the budget.excludeFromNetWorthbooleanWhether or not the account should be excluded from the net-worth.excludeTransactionsbooleanWhether or not the account transactions should completely ignored by FinWise.invertAmountsbooleanWhether or not the account balances should be inverted. |  THE ACCOUNT OBJECT  {    "id": "94d2f962-d4e3-4c99-ab47-8c941cea012a";    "createdAt": "2024-05-01T09:15:46.724Z";    "updatedAt": "2024-05-01T09:15:46.724Z";    "userId": "f472696c-47ac-4873-98cf-2a1069a1cf45";    "name": "My Credit Card Account";    "displayName": null;    "friendlyName": null;    "accountNumber": "275417291";    "currentBalance": {      "amount": -3432;      "currencyCode": "USD"    };    "availableBalance": null;    "accountType": null;    "archivedAt": null;    "isLinked": true;    "institutionId": "b8cb6f04-2f2b-440a-a55f-6708ebb57130";    "type": "credit";    "subType": "credit card";    "logoBase64": null;    "data": null;    "interestRate": null;    "interestRateType": null;    "lastPaymentDate": null;    "lastPaymentAmount": null;    "minimumAmountDue": null;    "originationDate": null;    "amountDue": null;    "originalLoanAmount": null;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Create an account  ### Request Body Attributes",true,65,60,50,"The retrieved documentation is focused on 'account' creation and management, not user registration or account creation in the sense of user onboarding. The endpoints and examples provided (e.g., POST /accounts/:id/archive, POST /account-balances) are for financial account objects, not user accounts. There is no clear mention of a user registration or 'create user account' endpoint, nor are the required parameters for user registration shown. While the documentation is detailed for account and account balance creation, it does not answer the user's question about creating a new user account. Thus, the retrieval is only partially relevant, the endpoint is not clearly identified for user registration, and completeness is lacking for the user's actual intent.",""
2025-10-09T13:10:09.200Z,finwise-api,"Finwise API","What is my aggregated account balance?","aggregated account balance API endpoint parameters response structure",10,"ll;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Archive an account  Archive an account.  POST /accounts/:id/archive  import axios from 'axios'   const response = await axios({    method: 'post';    url: 'https://api.finwiseapp.io/accounts/94d2f962-d4e3-4c99-ab47-8c941cea012a/archive';    headers: {      'Content-Type': 'application/json';      Authorization: '<YOUR_API_KEY>';    };  })  RESPONSE  {    "id": "94d2f962-d4e3-4c99-ab47-8c941cea012a";    "createdAt": "2024-05-01T09:15:46.724Z";    "updatedAt": "2024-05-01T09:15:46.724Z";    "userId": "f472696c-47ac-4873-98cf-2a1069a1cf45";    "name": "My Credit Card Account";    "displayName": null;    "friendlyName": null;    "accountNumber": "275417291";    "currentBalance": {      "amount": -3432;      "currencyCode": "USD"    };    "availableBalance": null;    "accountType": null;    "archivedAt": "2024-04-29T00:03:34";    "isLinked": true;    "institutionId": "b8cb6f04-2f2b-440a-a55f-6708ebb57130";    "type": "credit";    "subType": "credit card";    "logoBase64": null;    "data": null;    "interestRate": null;    "interestRateType": null;    "lastPaymentDate": null;    "lastPaymentAmount": null;    "minimumAmountDue": null;    "originationDate": null;    "amountDue": null;    "originalLoanAmount": null;    "institutionUserId": null;    "emoji": "💳";    "institution": null  }  ## Account Balances  This object represents an account balance; which is a snapshot of the balance of an account on a particular date.  ENDPOINTS  | POST | /account-balances             | Create an account balance      | | ---- | ----------------------------- | ------------------------------ | | GET  | /account-balances             | Get a list of account balances | | GET  | /account-balances/aggregated2 | Get aggregate account balances | | POST | /account-balances/:id/archive | Archive an account balance     |  ## The account balance object  ### Attributes  | idstringUnique identifier for the account balance",true,90,95,90,"The retrieved documentation is highly relevant to the user's question about aggregated account balances. It clearly identifies the correct endpoint (GET /account-balances/aggregated2) for retrieving aggregated account balances, including a sample request with query parameters and headers. The documentation also provides a sample response and details about the account balance object, including its attributes. There is a clear example of how to use the endpoint, what parameters to include (such as filters for userId), and what the response structure looks like. The only minor deduction is for some clutter and extra information about unrelated endpoints, but the core information needed to make the API call is present and well-detailed.",""
